# 新人エンジニア向け Pythonコーディングテンプレート 🎯

実務ですぐ使える、優れたエンジニアの思考プロセスを組み込んだテンプレートです。

## 📝 プロジェクト開始テンプレート

### STEP 1: 要件定義シート
```markdown
# プロジェクト名: [ここに記入]

## 目的
- このプログラムは何をするのか: 
- 誰が使うのか: 
- どんな問題を解決するのか: 

## 入力
- データの種類: 
- データの形式（CSV, JSON, API等）: 
- サンプルデータ: 

## 出力
- 期待される結果: 
- 出力形式: 

## エッジケース（考えられる例外）
- [ ] 空のデータが来た場合
- [ ] 不正な形式のデータ
- [ ] 想定外の大量データ
- [ ] ネットワークエラー
- [ ] その他: 
```

### STEP 2: 擬似コード設計
```python
"""
[プロジェクト名]

目的: [簡潔に記述]
作成日: YYYY-MM-DD
作成者: [名前]
"""

# === 擬似コード（実装前に日本語で処理を書く）===
# 1. データを読み込む
# 2. データを検証する
# 3. データを加工する
# 4. 結果を保存する
# 5. ログを出力する
```

## 🏗️ 基本プロジェクト構造テンプレート

```
project_name/
│
├── main.py              # メインプログラム
├── config.py            # 設定ファイル
├── utils.py             # 汎用関数
├── requirements.txt     # 依存パッケージ
├── tests/               # テストコード
│   └── test_main.py
├── data/                # データフォルダ
│   ├── input/
│   └── output/
└── logs/                # ログフォルダ
```

## 💻 実装テンプレート

### main.py（メインプログラム）
```python
"""
[プロジェクト名]

このスクリプトは[目的]を行います。

使用例:
    python main.py --input data.csv --output result.csv

Author: [名前]
Date: YYYY-MM-DD
"""

import sys
import logging
from typing import List, Dict, Optional
from pathlib import Path

# ログ設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class DataProcessor:
    """データ処理を行うクラス"""
    
    def __init__(self, config: Dict[str, any]):
        """
        初期化
        
        Args:
            config: 設定情報の辞書
        """
        self.config = config
        logger.info("DataProcessorを初期化しました")
    
    def load_data(self, filepath: str) -> Optional[List]:
        """
        データを読み込む
        
        Args:
            filepath: 読み込むファイルのパス
            
        Returns:
            読み込んだデータのリスト、失敗時はNone
        """
        try:
            # TODO: データ読み込み処理を実装
            logger.info(f"データを読み込みました: {filepath}")
            return []
        except FileNotFoundError:
            logger.error(f"ファイルが見つかりません: {filepath}")
            return None
        except Exception as e:
            logger.error(f"データ読み込み中にエラー: {e}")
            return None
    
    def validate_data(self, data: List) -> bool:
        """
        データを検証する
        
        Args:
            data: 検証するデータ
            
        Returns:
            検証結果（True: 正常, False: 異常）
        """
        if not data:
            logger.warning("データが空です")
            return False
        
        # TODO: データ検証ロジックを実装
        logger.info("データ検証を完了しました")
        return True
    
    def process_data(self, data: List) -> List:
        """
        データを処理する
        
        Args:
            data: 処理するデータ
            
        Returns:
            処理後のデータ
        """
        try:
            # TODO: データ処理ロジックを実装
            processed_data = data
            logger.info(f"{len(processed_data)}件のデータを処理しました")
            return processed_data
        except Exception as e:
            logger.error(f"データ処理中にエラー: {e}")
            raise
    
    def save_data(self, data: List, filepath: str) -> bool:
        """
        データを保存する
        
        Args:
            data: 保存するデータ
            filepath: 保存先のパス
            
        Returns:
            保存成功時True、失敗時False
        """
        try:
            # TODO: データ保存処理を実装
            logger.info(f"データを保存しました: {filepath}")
            return True
        except Exception as e:
            logger.error(f"データ保存中にエラー: {e}")
            return False


def main():
    """メイン処理"""
    logger.info("プログラムを開始します")
    
    try:
        # 設定
        config = {
            'input_file': 'data/input/sample.csv',
            'output_file': 'data/output/result.csv'
        }
        
        # 処理実行
        processor = DataProcessor(config)
        
        # 1. データ読み込み
        data = processor.load_data(config['input_file'])
        if data is None:
            logger.error("データ読み込みに失敗しました")
            return 1
        
        # 2. データ検証
        if not processor.validate_data(data):
            logger.error("データ検証に失敗しました")
            return 1
        
        # 3. データ処理
        processed_data = processor.process_data(data)
        
        # 4. データ保存
        if not processor.save_data(processed_data, config['output_file']):
            logger.error("データ保存に失敗しました")
            return 1
        
        logger.info("プログラムが正常に完了しました")
        return 0
        
    except Exception as e:
        logger.error(f"予期しないエラーが発生しました: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())
```

### config.py（設定ファイル）
```python
"""
設定ファイル

環境に依存する設定や定数を定義します。
"""

from pathlib import Path

# プロジェクトルート
PROJECT_ROOT = Path(__file__).parent

# ディレクトリ
DATA_DIR = PROJECT_ROOT / "data"
INPUT_DIR = DATA_DIR / "input"
OUTPUT_DIR = DATA_DIR / "output"
LOG_DIR = PROJECT_ROOT / "logs"

# 定数
MAX_RETRY_COUNT = 3
TIMEOUT_SECONDS = 30
DEFAULT_ENCODING = 'utf-8'

# 各種設定
CONFIG = {
    'debug_mode': False,
    'batch_size': 100,
    'max_workers': 4
}
```

### utils.py（汎用関数）
```python
"""
汎用的なユーティリティ関数

プロジェクト全体で使える便利な関数を定義します。
"""

import json
from typing import Any, Dict
from datetime import datetime


def load_json(filepath: str) -> Dict:
    """
    JSONファイルを読み込む
    
    Args:
        filepath: JSONファイルのパス
        
    Returns:
        読み込んだデータの辞書
    """
    with open(filepath, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_json(data: Dict, filepath: str) -> None:
    """
    データをJSONファイルに保存する
    
    Args:
        data: 保存するデータ
        filepath: 保存先のパス
    """
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def get_timestamp() -> str:
    """
    現在のタイムスタンプを取得
    
    Returns:
        YYYY-MM-DD HH:MM:SS形式の文字列
    """
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def format_number(value: float, decimals: int = 2) -> str:
    """
    数値をカンマ区切りでフォーマット
    
    Args:
        value: フォーマットする数値
        decimals: 小数点以下の桁数
        
    Returns:
        フォーマットされた文字列
    """
    return f"{value:,.{decimals}f}"
```

### tests/test_main.py（テストコード）
```python
"""
main.pyのテストコード
"""

import unittest
from main import DataProcessor


class TestDataProcessor(unittest.TestCase):
    """DataProcessorクラスのテスト"""
    
    def setUp(self):
        """各テストの前に実行される準備処理"""
        self.config = {'test': True}
        self.processor = DataProcessor(self.config)
    
    def test_validate_data_with_empty_list(self):
        """空のリストを渡した場合のテスト"""
        result = self.processor.validate_data([])
        self.assertFalse(result)
    
    def test_validate_data_with_valid_data(self):
        """正常なデータを渡した場合のテスト"""
        data = [1, 2, 3]
        result = self.processor.validate_data(data)
        self.assertTrue(result)
    
    def tearDown(self):
        """各テストの後に実行されるクリーンアップ処理"""
        pass


if __name__ == '__main__':
    unittest.main()
```

### requirements.txt
```
# 必須パッケージ
pandas>=2.0.0
numpy>=1.24.0
requests>=2.31.0

# 開発用パッケージ
pytest>=7.4.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.4.0
```

## 📋 実装チェックリスト

コーディング中に確認してください：

```markdown
## 実装前
- [ ] 要件定義シートを記入した
- [ ] 擬似コードを書いた
- [ ] 必要なフォルダを作成した
- [ ] 仮想環境をセットアップした

## 実装中
- [ ] 関数に適切な名前をつけた
- [ ] docstringを書いた
- [ ] 型ヒントを追加した
- [ ] エラーハンドリングを実装した
- [ ] ログ出力を追加した

## 実装後
- [ ] テストコードを書いた
- [ ] テストが全て通った
- [ ] 不要なコードを削除した
- [ ] コメントを見直した
- [ ] READMEを書いた
```

## 🚀 使い方

1. このテンプレートをコピー
2. 要件定義シートを埋める
3. 擬似コードを書く
4. TODOコメント部分を実装
5. テストを書いて実行
6. 完成！

このテンプレートを使えば、新人エンジニアでも優れた設計のコードが書けます！
