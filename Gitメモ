Gitの流れを図解で説明しますね！

## 📁 Gitの3つのエリア

```
┌─────────────────────────────────────────────────────┐
│  ワークツリー (作業ディレクトリ)                    │
│  ┌─────────┐  ┌─────────┐  ┌─────────┐           │
│  │ index.  │  │ style.  │  │ app.js  │           │
│  │ html    │  │ css     │  │         │           │
│  └─────────┘  └─────────┘  └─────────┘           │
│  ↑ 実際にファイルを編集する場所                     │
└─────────────────────────────────────────────────────┘
                    │
                    │ git add
                    ↓
┌─────────────────────────────────────────────────────┐
│  ステージングエリア (インデックス)                   │
│  ┌─────────┐  ┌─────────┐                         │
│  │ index.  │  │ style.  │                         │
│  │ html ✓  │  │ css ✓   │                         │
│  └─────────┘  └─────────┘                         │
│  ↑ コミット予定の変更を準備する場所                 │
└─────────────────────────────────────────────────────┘
                    │
                    │ git commit
                    ↓
┌─────────────────────────────────────────────────────┐
│  ローカルリポジトリ (.git/)                          │
│  📦 コミット履歴                                     │
│  [commit 3] ← [commit 2] ← [commit 1]              │
│  ↑ 変更履歴が保存される場所                         │
└─────────────────────────────────────────────────────┘
                    │
                    │ git push
                    ↓
┌─────────────────────────────────────────────────────┐
│  リモートリポジトリ (GitHub等)                       │
│  ☁️ チームで共有                                     │
└─────────────────────────────────────────────────────┘
```

## 🔄 実際の作業フロー

```
ステップ1: ファイルを編集
━━━━━━━━━━━━━━━━━━━
📝 index.html を編集中...

ワークツリー: index.html (変更あり) 🔴
ステージング: (空)
リポジトリ:   (変更なし)


ステップ2: git add
━━━━━━━━━━━━━━━━━━━
$ git add index.html

ワークツリー: index.html (変更あり) 🟢
ステージング: index.html (追加済み) ✓
リポジトリ:   (変更なし)


ステップ3: git commit
━━━━━━━━━━━━━━━━━━━
$ git commit -m "トップページ更新"

ワークツリー: (クリーン)
ステージング: (クリーン)
リポジトリ:   📦 新しいコミット作成! ✓


ステップ4: git push
━━━━━━━━━━━━━━━━━━━
$ git push origin main

ローカル → リモート ☁️ 送信完了!
```

## 🎯 よく使うコマンドと効果

```
git status
┗━━ 今どの状態？を確認
    🔴 赤 = まだaddしてない
    🟢 緑 = addしたけどcommitしてない

git add ファイル名
┗━━ ワークツリー → ステージング

git add .
┗━━ 全部まとめてステージング

git commit -m "メッセージ"
┗━━ ステージング → リポジトリ

git push
┗━━ ローカル → リモート
```

## ⚠️ やり直しコマンド

```
間違えた時の対処法
━━━━━━━━━━━━━━━━━━━

git reset HEAD ファイル名
  ↑ addを取り消し
  ステージング → ワークツリーに戻す

git checkout -- ファイル名
  ↑ 編集を破棄
  ワークツリーの変更を元に戻す

git reset --soft HEAD^
  ↑ commitを取り消し
  リポジトリ → ステージングに戻す


チーム開発でのGit/GitHub連携の流れを図解しますね！

## 🏢 チーム開発の全体像

```
        あなた              同僚A              同僚B
          💻                 💻                 💻
          │                  │                  │
          │    push/pull     │    push/pull     │
          └────────┬─────────┴────────┬─────────┘
                   │                  │
                   ↓                  ↓
            ┌──────────────────────────────┐
            │   GitHub (リモートリポジトリ)  │
            │          ☁️ 中央サーバー        │
            │   main ブランチ (本番用)       │
            └──────────────────────────────┘
```

## 📝 基本的なチーム開発フロー

### **初回セットアップ**

```
ステップ1: リポジトリをクローン
━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git clone https://github.com/team/project.git

GitHub ☁️ 
  ↓ コピー
あなたのPC 💻
  project/フォルダができる
```

### **日常の開発サイクル**

```
┌─────────────────────────────────────────────┐
│ 🔄 毎日の作業フロー (重要！)                 │
└─────────────────────────────────────────────┘

1️⃣ 作業開始前: 最新を取得
━━━━━━━━━━━━━━━━━━━━━━━━
$ git pull origin main

GitHub の最新 → あなたのPC
(同僚の変更を取り込む)


2️⃣ ブランチを作って作業
━━━━━━━━━━━━━━━━━━━━━━━━
$ git checkout -b feature/login-page

main ブランチ ────────────────
                 ↓ 分岐
      feature/login-page ブランチ
      (あなたの作業用)


3️⃣ ファイル編集 → add → commit
━━━━━━━━━━━━━━━━━━━━━━━━
$ vim login.html
$ git add login.html
$ git commit -m "ログインページ作成"


4️⃣ GitHubにプッシュ
━━━━━━━━━━━━━━━━━━━━━━━━
$ git push origin feature/login-page

あなたのPC 💻
  ↓ アップロード
GitHub ☁️ (新しいブランチができる)


5️⃣ プルリクエスト作成
━━━━━━━━━━━━━━━━━━━━━━━━
GitHub上で「Pull Request」ボタンをクリック

feature/login-page → main へのマージ依頼


6️⃣ レビュー & マージ
━━━━━━━━━━━━━━━━━━━━━━━━
同僚がコードレビュー 👀
  ↓ OK!
GitHub上で「Merge」ボタン
  ↓
main ブランチに統合完了 ✅
```

## 🌳 ブランチ戦略の図解

```
時間 →

main ────●────────────●──────●─────→ (本番環境)
         │            ↑      ↑
         │         merge  merge
         │            │      │
         └→ feature/A ●──●──┘
                (あなた)

         ┌→ feature/B ●──●──●──┘
         │        (同僚A)
         │
         └→ feature/C ●──●───→
                 (同僚B・作業中)

各自が別ブランチで作業 → 完成したらmainにマージ
```

## ⚠️ よくあるトラブルと対処法

### **コンフリクト（衝突）が起きた時**

```
状況: あなたと同僚が同じファイルを編集
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

あなた: index.html の10行目を編集
同僚A:  index.html の10行目を編集
        ↓ 両方がpushすると...
      🔥 CONFLICT! 🔥


解決方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git pull origin main

# ファイルを開くと...
<<<<<<< HEAD (あなたの変更)
<h1>ようこそ</h1>
=======
<h1>Welcome</h1>
>>>>>>> origin/main (同僚の変更)

↓ どちらを残すか選んで編集

<h1>ようこそ (Welcome)</h1>

$ git add index.html
$ git commit -m "コンフリクト解決"
$ git push
```

## 📋 チーム開発のルール例

```
✅ 必ず守ること
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. mainブランチで直接作業しない
   → 必ずfeatureブランチを作る

2. 作業前に git pull
   → 最新の状態で作業開始

3. こまめに commit
   → 1機能 = 1コミット

4. わかりやすいコミットメッセージ
   ❌ "修正"
   ✅ "ログインボタンの色を変更"

5. プルリクエストでレビューを受ける
   → 勝手にマージしない
```

## 🎯 実践例: 新機能を追加する流れ

```
【あなたのタスク: お問い合わせフォームを作る】

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
月曜日 9:00
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git pull origin main          # 最新を取得
$ git checkout -b feature/contact-form  # ブランチ作成

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
作業中...
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ vim contact.html              # ファイル作成
$ git add contact.html
$ git commit -m "お問い合わせフォームのHTML作成"

$ vim contact.css               # スタイル追加
$ git add contact.css
$ git commit -m "お問い合わせフォームのCSS追加"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
月曜日 17:00
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git push origin feature/contact-form

GitHubでPull Request作成
  タイトル: "お問い合わせフォームを追加"
  説明: "デザイン通りに実装しました"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
火曜日 10:00
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
同僚Aがレビュー 👀
  コメント: "ボタンの色を変更してください"

$ vim contact.css               # 修正
$ git add contact.css
$ git commit -m "ボタンの色を青に変更"
$ git push origin feature/contact-form

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
火曜日 14:00
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
レビュー承認 ✅
→ GitHub上で「Merge pull request」
→ main ブランチに統合完了！

$ git checkout main             # mainに戻る
$ git pull origin main          # 最新を取得
$ git branch -d feature/contact-form  # 不要なブランチ削除
```

## 🔧 よく使うコマンド一覧

```
# 初回のみ
git clone <URL>          リポジトリをコピー

# 毎日使う
git pull origin main     最新を取得
git checkout -b <名前>   新しいブランチ作成
git add .                変更を全部追加
git commit -m "〇〇"     コミット
git push origin <名前>   GitHubに送信

# 確認用
git status               今の状態
git log                  履歴を見る
git branch               ブランチ一覧

# トラブル時
git reset HEAD <file>    addを取り消し
git checkout .           編集を破棄
```

どの部分をもっと詳しく知りたいですか？実際のシチュエーションで質問してもらえれば、具体的に説明しますよ！


Gitの流れを図解で説明しますね！

## 📁 Gitの3つのエリア

```
┌─────────────────────────────────────────────────────┐
│  ワークツリー (作業ディレクトリ)                    │
│  ┌─────────┐  ┌─────────┐  ┌─────────┐           │
│  │ index.  │  │ style.  │  │ app.js  │           │
│  │ html    │  │ css     │  │         │           │
│  └─────────┘  └─────────┘  └─────────┘           │
│  ↑ 実際にファイルを編集する場所                     │
└─────────────────────────────────────────────────────┘
                    │
                    │ git add
                    ↓
┌─────────────────────────────────────────────────────┐
│  ステージングエリア (インデックス)                   │
│  ┌─────────┐  ┌─────────┐                         │
│  │ index.  │  │ style.  │                         │
│  │ html ✓  │  │ css ✓   │                         │
│  └─────────┘  └─────────┘                         │
│  ↑ コミット予定の変更を準備する場所                 │
└─────────────────────────────────────────────────────┘
                    │
                    │ git commit
                    ↓
┌─────────────────────────────────────────────────────┐
│  ローカルリポジトリ (.git/)                          │
│  📦 コミット履歴                                     │
│  [commit 3] ← [commit 2] ← [commit 1]              │
│  ↑ 変更履歴が保存される場所                         │
└─────────────────────────────────────────────────────┘
                    │
                    │ git push
                    ↓
┌─────────────────────────────────────────────────────┐
│  リモートリポジトリ (GitHub等)                       │
│  ☁️ チームで共有                                     │
└─────────────────────────────────────────────────────┘
```

## 🔄 実際の作業フロー

```
ステップ1: ファイルを編集
━━━━━━━━━━━━━━━━━━━
📝 index.html を編集中...

ワークツリー: index.html (変更あり) 🔴
ステージング: (空)
リポジトリ:   (変更なし)


ステップ2: git add
━━━━━━━━━━━━━━━━━━━
$ git add index.html

ワークツリー: index.html (変更あり) 🟢
ステージング: index.html (追加済み) ✓
リポジトリ:   (変更なし)


ステップ3: git commit
━━━━━━━━━━━━━━━━━━━
$ git commit -m "トップページ更新"

ワークツリー: (クリーン)
ステージング: (クリーン)
リポジトリ:   📦 新しいコミット作成! ✓


ステップ4: git push
━━━━━━━━━━━━━━━━━━━
$ git push origin main

ローカル → リモート ☁️ 送信完了!
```

## 🎯 よく使うコマンドと効果

```
git status
┗━━ 今どの状態？を確認
    🔴 赤 = まだaddしてない
    🟢 緑 = addしたけどcommitしてない

git add ファイル名
┗━━ ワークツリー → ステージング

git add .
┗━━ 全部まとめてステージング

git commit -m "メッセージ"
┗━━ ステージング → リポジトリ

git push
┗━━ ローカル → リモート
```

## ⚠️ やり直しコマンド

```
間違えた時の対処法
━━━━━━━━━━━━━━━━━━━

git reset HEAD ファイル名
  ↑ addを取り消し
  ステージング → ワークツリーに戻す

git checkout -- ファイル名
  ↑ 編集を破棄
  ワークツリーの変更を元に戻す

git reset --soft HEAD^
  ↑ commitを取り消し
  リポジトリ → ステージングに戻す
```

どの部分をもっと詳しく知りたいですか？


GitHubでのチーム開発の流れを同じ形式で図解しますね！

## 🌐 GitHub連携の全体像

```
┌─────────────────────────────────────────────────────┐
│  GitHub (リモートリポジトリ) ☁️                      │
│  ┌─────────────────────────────────────────────┐   │
│  │  main ブランチ (本番)                        │   │
│  │  [commit 5] ← [commit 4] ← [commit 3]      │   │
│  └─────────────────────────────────────────────┘   │
│  ↑ チーム全員で共有する中央サーバー                 │
└─────────────────────────────────────────────────────┘
         ↑ push/pull ↓
┌─────────────────────────────────────────────────────┐
│  あなたのPC (ローカルリポジトリ) 💻                  │
│  ┌─────────────────────────────────────────────┐   │
│  │  main ブランチ                               │   │
│  │  [commit 5] ← [commit 4] ← [commit 3]      │   │
│  └─────────────────────────────────────────────┘   │
│  ↑ あなたの作業環境                                 │
└─────────────────────────────────────────────────────┘
```

## 📥 Clone（クローン）- 初回のみ

```
ステップ: リポジトリをコピー
━━━━━━━━━━━━━━━━━━━━━━━━━
$ git clone https://github.com/team/project.git

GitHub ☁️
  📦 project リポジトリ
  [commit 3] ← [commit 2] ← [commit 1]
                ↓ 
            丸ごとコピー
                ↓
あなたのPC 💻
  📁 project/ フォルダ作成
  📦 .git/ (全履歴含む)
  📄 全ファイル

結果: GitHub と同じ内容があなたのPCに！
```

## 📥 Pull（プル）- 最新を取得

```
ステップ1: 同僚が変更をpush済み
━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub ☁️
  [新commit] ← [commit 3] ← [commit 2]
  ↑ 同僚Aが追加

あなたのPC 💻
  [commit 3] ← [commit 2]
  ↑ 古い状態 🔴


ステップ2: git pull
━━━━━━━━━━━━━━━━━━━━━━━━━
$ git pull origin main

GitHub ☁️
  [新commit] ← [commit 3] ← [commit 2]
       ↓ ダウンロード
あなたのPC 💻
  [新commit] ← [commit 3] ← [commit 2]
  ↑ 最新に更新！ ✅

結果: 同僚の変更を取り込み完了
```

## 🌿 Branch（ブランチ）とCommit

```
ステップ1: ブランチ作成
━━━━━━━━━━━━━━━━━━━━━━━━━
$ git checkout -b feature/new-page

main    ●───●───●───●─────→
                    ↓ 分岐
        feature/new-page ──→
        (あなたの作業用)


ステップ2: ファイル編集 & Commit
━━━━━━━━━━━━━━━━━━━━━━━━━
$ vim new-page.html
$ git add new-page.html
$ git commit -m "新ページ作成"

main    ●───●───●───●─────→
                    ↓
        feature/  ●─────→
        new-page  ↑ 新コミット

ローカルにのみ存在（まだGitHubにない）
```

## 📤 Push（プッシュ）

```
ステップ: ローカル → GitHub
━━━━━━━━━━━━━━━━━━━━━━━━━
$ git push origin feature/new-page

あなたのPC 💻
  feature/new-page ●───●
            ↓ アップロード
GitHub ☁️
  main             ●───●───●
                       ↓
  feature/new-page     ●───●
  ↑ 新しいブランチ作成！

結果: GitHubに自分の作業をバックアップ完了
```

## 🔀 Pull Request（プルリクエスト）→ Merge

```
ステップ1: PR作成
━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub上で「Pull Request」ボタンクリック

feature/new-page → main へのマージ依頼
  「このコード、mainに入れていいですか？」


ステップ2: レビュー
━━━━━━━━━━━━━━━━━━━━━━━━━
同僚 👀 「コードチェック中...」
  ✅ 承認 or
  💬 修正依頼


ステップ3: Merge（マージ）
━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub上で「Merge pull request」ボタン

main             ●───●───●
                     ↓    ↘
feature/new-page     ●───●  ↘
                            ↘
                             ●
                        統合完了！

main             ●───●───●───●
                         ↑
                    新ページ追加


結果: あなたの変更がmainブランチに統合！
```

## ⚠️ Conflict（コンフリクト）- 衝突

```
状況: 同じファイルの同じ場所を編集
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

main ●───● (index.html 10行目: "Hello")
      ↓   ↘
あなた  ●   ● 同僚A
(10行目:   (10行目:
"こんにちは") "ようこそ")

両方がmainにマージしようとすると...
🔥 CONFLICT! 🔥


解決手順
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. pullすると...
$ git pull origin main

Auto-merging index.html
CONFLICT (content): Merge conflict in index.html


2. ファイルを開くと...
index.html:
<<<<<<< HEAD (あなたの変更)
<h1>こんにちは</h1>
=======
<h1>ようこそ</h1>
>>>>>>> origin/main (同僚の変更)


3. 手動で修正
<h1>ようこそ (こんにちは)</h1>
↑ どちらを残すか or 両方使うか決める


4. 解決をコミット
$ git add index.html
$ git commit -m "コンフリクト解決"
$ git push

結果: 衝突解消！ ✅
```

## 🔄 Rebase（リベース）- 履歴を整理

```
状況: mainが進んでいる
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

main        ●───●───●───●
                ↓       ↑ 同僚の変更
            feature     
                ●───●
                ↑ あなたの変更


Merge の場合（普通のやり方）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git merge main

main        ●───●───●───●
                ↓       ↘ ↘
            feature      ↘ ●
                ●───●───── ↗
                        merge commit
履歴が複雑になる 😵


Rebase の場合（きれいなやり方）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git rebase main

main        ●───●───●───●
                        ↓
                    feature
                        ●───●
                    ↑ 付け替え！

履歴が一直線で読みやすい ✨


手順
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git checkout feature/new-page
$ git rebase main

もし衝突したら...
1. ファイル修正
2. git add <file>
3. git rebase --continue

$ git push -f origin feature/new-page
↑ -f (force) 必須！履歴を書き換えたから
```

## ↩️ Revert（リバート）- 取り消し

```
状況: まずいコミットをした！
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

main  ●───●───●───●
          ↑   ↑   ↑
          良  良  バグ！
                  commit-C


Revert（推奨）- 取り消しを記録
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git revert <commit-C>

main  ●───●───●───●───●
          ↑   ↑   ↑   ↑
          良  良  バグ  取消
                      (新しいcommit)

commit-Cの変更を打ち消す新commitを作成
履歴は残る = 安全 ✅


Reset（危険）- 履歴ごと削除
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git reset --hard HEAD~1

main  ●───●───●
          ↑   ↑
          良  良
              ↑ ここまで戻る

commit-Cが消える = 危険！ ⚠️
pushした後は使わない！


使い分け
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Revert : pushした後 (他人に影響あり)
Reset  : pushする前 (自分だけの変更)
```

## 📊 全体の流れまとめ

```
初回セットアップ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git clone <URL>
GitHub → あなたのPC


日常の開発サイクル
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 最新を取得
$ git pull origin main
GitHub → ローカル (同僚の変更を取込み)

2. ブランチ作成
$ git checkout -b feature/xxx

3. 編集 & コミット
$ git add .
$ git commit -m "〇〇を追加"

4. GitHubへ送信
$ git push origin feature/xxx
ローカル → GitHub

5. Pull Request作成
GitHub上で「PR」ボタン

6. レビュー & マージ
同僚確認 → Merge

7. 掃除
$ git checkout main
$ git pull origin main
$ git branch -d feature/xxx
```

## 🎯 コマンド早見表

```
# 取得・同期
git clone <URL>          初回コピー
git pull origin main     最新取得

# ブランチ
git branch               一覧表示
git checkout -b <名前>   作成+移動
git checkout <名前>      移動

# コミット
git add .                全追加
git commit -m "〇〇"     記録

# 送信
git push origin <名前>   アップロード
git push -f              強制push (rebase後)

# マージ・統合
git merge <ブランチ>     マージ
git rebase <ブランチ>    リベース

# 取り消し
git revert <commit>      取消commit作成
git reset --hard HEAD~1  直前のcommit削除

# 確認
git status               状態確認
git log                  履歴表示
git log --oneline        簡易履歴
git diff                 差分表示
```

どの部分をもっと詳しく知りたいですか？
```

どの部分をもっと詳しく知りたいですか？
