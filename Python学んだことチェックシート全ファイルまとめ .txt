================================================================================
ディレクトリ構造
================================================================================

📁 lesson1/
  ☐c1_1_1.py
  ☐c1_1_2.py
  ☐c1_1_3.py
  ☐c1_1_4.py
  ☐c1_1_5.py
  ☐c1_1_6.py
  ☐c1_1_7.py
  ☐c1_1_8.py
  ☐c1_1_9.py
  ☐c1_1_10.py
  ☐c1_1_11.py
  ☐c1_1_12.py
  ☐c1_1_13.py
  ☐c1_1_14.py
  ☐c1_1_15.py
  ☐c1_1_16.py
  ☐c1_1_17.py
  ☐c1_1_18.py
  ☐c1_1_19.py
  ☐c1_1_20.py
  ☐c1_1_21.py
  ☐c1_2_1.py
  ☐c1_2_2.py
  ☐c1_2_3.py
  ☐c1_2_4.py
  ☐c1_2_5.py
  ☐c1_2_6.py
  ☐c1_2_7.py
  ☐c1_2_8.py
  ☐c1_2_9.py
  ☐c1_2_10.py
  ☐c1_2_11.py
  ☐c1_2_12.py
  ☐c1_2_13.py
  ☐c1_2_14.py
  ☐c1_2_15.py
  ☐c1_2_16.py
  ☐c1_2_17.py
  ☐c1_2_18.py
  ☐c1_2_19.py
  ☐c1_2_20.py
  ☐c1_2_21.py
  ☐c1_2_22.py
  ☐c1_2_23.py
  ☐c1_2_24.py
  ☐c1_2_25.py
  ☐c1_2_26.py
  ☐c1_2_27.py
  ☐c1_2_28.py
  ☐c1_2_29.py
  ☐c1_2_30.py
  ☐c1_2_31.py
  ☐c1_2_32.py
  ☐c1_2_33.py
  ☐c1_2_34.py
  ☐c1_2_35.py
  ☐c1_2_36.py
  ☐c1_2_37.py
  ☐c1_2_38.py
  ☐c1_2_39.py
  ☐c1_2_40.py
  ☐c1_2_41.py
  ☐c1_2_42.py
  ☐c1_2_43.py
  ☐c1_2_44.py
  ☐c1_2_45.py
  ☐c1_2_46.py
  ☐c1_2_47.py
  ☐c1_2_48.py

📁 lesson2/
  ☐c2_1_1.py
  ☐c2_1_2.py
  ☐c2_1_3.py
  ☐c2_1_4.py
  ☐c2_1_5.py
  ☐c2_1_6.py
  ☐c2_1_7.py
  ☐c2_1_8.py
  ☐c2_1_9.py
  ☐c2_1_10.py
  ☐c2_1_11.py
  ☐c2_1_12.py
  ☐c2_1_13.py
  ☐c2_1_14.py
  ☐c2_1_15.py
  ☐c2_2_1.py
  ☐c2_2_2.py
  ☐c2_2_3.py
  ☐c2_2_4.py
  ☐c2_2_5.py
  ☐c2_2_6.py
  ☐c2_2_7.py
  ☐c2_2_8.py
  ☐c2_2_9.py
  ☐c2_3_1.py
  ☐c2_3_2.py
  ☐c2_3_3.py
  ☐c2_3_4.py
  ☐c2_4_1.py
  ☐c2_4_2.py

📁 lesson3/
  ☐c3_1_1.py
  ☐c3_1_2.py
  ☐c3_1_3.py
  ☐c3_1_4.py
  ☐c3_1_5.py
  ☐c3_1_6.py
  ☐c3_2_1.py
  ☐c3_2_2.py
  ☐c3_2_3.py
  ☐c3_2_4.py
  ☐c3_2_5.py
  ☐c3_2_6.py
  ☐c3_2_7.py
  ☐c3_2_8.py
  ☐c3_2_9.py
  ☐c3_2_10.py
  ☐c3_2_11.py
  ☐c3_2_12.py
  ☐c3_2_13.py
  ☐c3_2_14.py
  ☐c3_2_15.py
  ☐c3_2_16.py
  ☐c3_2_17.py
  ☐c3_2_18.py
  ☐c3_2_19.py
  ☐c3_2_20.py
  ☐c3_2_21.py
  ☐c3_2_22.py
  ☐c3_2_23.py
  ☐c3_2_24.py
  ☐c3_2_25.py
  ☐c3_2_26.py
  ☐c3_2_27.py
  ☐c3_2_28.py
  ☐c3_2_29.py
  ☐c3_2_30.py
  ☐c3_2_31.py
  ☐c3_2_32.py
  ☐c3_2_33.py
  ☐c3_2_34.py
  ☐c3_2_35.py
  ☐c3_2_36.py
  ☐c3_2_37.py
  ☐c3_2_38.py
  ☐c3_3_1.py
  ☐c3_3_2.py
  ☐c3_3_3.py
  ☐c3_3_4.py
  ☐c3_3_5.py
  ☐c3_3_6.py
  ☐c3_3_7.py
  ☐c3_3_8.py
  ☐c3_3_9.py
  ☐c3_3_10.py
  ☐c3_3_11.py
  ☐c3_3_12.py
  ☐c3_3_13.py
  ☐c3_3_14.py
  ☐c3_3_15.py
  ☐c3_3_16.py
  ☐c3_3_17.py
  ☐c3_3_18.py
  ☐c3_3_19.py
  ☐c3_3_20.py
  ☐c3_3_21.py
  ☐c3_3_22.py
  ☐c3_3_23.py
  ☐c3_3_24.py
  ☐c3_3_25.py
  ☐c3_3_26.py
  ☐c3_3_27.py
  ☐c3_3_28.py

📁 lesson4/
  ☐c4_1_1.py
  ☐c4_1_2.py
  ☐c4_1_3.py
  ☐c4_1_4.py
  ☐c4_1_5.py
  ☐c4_1_6.py
  ☐c4_1_7.py
  ☐c4_1_8.py
  ☐c4_1_9.py
  ☐c4_1_10.py
  ☐c4_1_11.py
  ☐c4_1_12.py
  ☐c4_1_13.py
  ☐c4_1_14.py
  ☐c4_1_15.py
  ☐c4_1_16.py
  ☐c4_1_17.py
  ☐c4_1_18.py
  ☐c4_1_19.py
  ☐c4_1_20.py
  ☐c4_1_21.py
  ☐c4_1_22.py
  ☐c4_1_23.py
  ☐c4_1_24.py
  ☐c4_1_25.py
  ☐c4_1_26.py
  ☐c4_1_27.py
  ☐c4_1_28.py
  ☐c4_1_29.py
  ☐c4_1_30.py
  ☐c4_1_31.py
  ☐c4_1_32.py
  ☐c4_1_33.py
  ☐c4_1_34.py
  ☐c4_1_35.py
  ☐c4_1_36.py
  ☐c4_1_37.py
  ☐c4_2_1.py
  ☐c4_2_2.py
  ☐c4_2_3.py
  ☐c4_2_4.py
  ☐c4_2_5.py
  ☐c4_2_6.py
  ☐c4_2_7.py
  ☐c4_2_8.py
  ☐c4_2_9.py
  ☐c4_2_10.py
  ☐c4_2_11.py
  ☐c4_2_12.py
  ☐c4_2_13.py
  ☐c4_2_14.py
  ☐c4_2_15.py
  ☐c4_2_16.py
  ☐c4_2_17.py
  ☐c4_2_18.py
  ☐c4_2_19.py
  ☐c4_2_20.py
  ☐c4_2_21.py
  ☐c4_2_22.py
  ☐c4_3_1.py
  ☐c4_3_2.py
  ☐c4_3_3.py
  ☐c4_3_4.py
  ☐c4_3_5.py
  ☐c4_3_6.py
  ☐c4_3_7.py
  ☐c4_3_8.py
  ☐c4_3_9.py
  ☐c4_3_10.py
  ☐c4_3_11.py
  ☐c4_3_12.py
  ☐c4_3_13.py
  ☐c4_3_14.py
  ☐c4_4_1.py
  ☐c4_4_2.py
  ☐c4_4_3.py
  ☐c4_4_4.py
  ☐c4_4_5.py
  ☐c4_4_6.py
  ☐c4_4_7.py
  ☐c4_4_8.py
  ☐c4_4_9.py
  ☐c4_4_10.py
  ☐c4_5_1.py
  ☐c4_5_2.py
  ☐c4_5_3.py
  ☐c4_5_4.py
  ☐c4_5_5.py
  ☐c4_5_6.py
  ☐c4_5_7.py
  ☐c4_5_8.py
  ☐c4_5_9.py
  ☐c4_5_10.py
  ☐c4_5_11.py
  ☐c4_5_12.py
  ☐c4_5_13.py
  ☐c4_5_14.py

📁 lesson5/
  ☐__init__.py
    ☐__pycache__\config.cpython-39.pyc
  ☐c5_1_1.py
  ☐c5_1_2.py
  ☐c5_1_3.py
  ☐c5_1_4.py
  ☐c5_1_5.py
  ☐c5_1_6.py
  ☐c5_1_7.py
  ☐c5_1_8.py
  ☐c5_1_9.py
  ☐c5_1_10.py
  ☐c5_1_11.py
  ☐c5_1_12.py
  ☐c5_1_13.py
  ☐c5_1_14.py
  ☐c5_2_1.py
  ☐c5_2_2.py
  ☐c5_2_3.py
  ☐c5_2_4.py
  ☐c5_2_5.py
  ☐c5_2_6.py
  ☐c5_2_7.py
  ☐c5_2_8.py
  ☐c5_2_9.py
  ☐c5_2_10.py
  ☐c5_2_11.py
  ☐c5_2_12.py
  ☐c5_2_13.py
  ☐c5_2_14.py
  ☐c5_2_15.py
  ☐c5_2_16.py
  ☐c5_2_17.py
  ☐c5_2_18.py
  ☐c5_2_19.py
  ☐c5_2_20.py
  ☐c5_2_21.py
  ☐c5_2_22.py
  ☐c5_2_23.py
  ☐config.py
    ☐lesson_package\__init__.py
      ☐lesson_package\__pycache__\__init__.cpython-39.pyc
      ☐lesson_package\talk\__init__.py
        ☐lesson_package\talk\__pycache__\__init__.cpython-39.pyc
        ☐lesson_package\talk\__pycache__\animal.cpython-39.pyc
        ☐lesson_package\talk\__pycache__\human.cpython-39.pyc
      ☐lesson_package\talk\animal.py
      ☐lesson_package\talk\human.py
      ☐lesson_package\tools\__init__.py
        ☐lesson_package\tools\__pycache__\__init__.cpython-39.pyc
    ☐lesson_package\utils.py
  ☐main.py
  ☐setup.py

📁 lesson6/
  ☐c6_1_1.py
  ☐c6_1_2.py
  ☐c6_1_3.py
  ☐c6_1_4.py
  ☐c6_1_5.py
  ☐c6_1_6.py
  ☐c6_1_7.py
  ☐c6_1_8.py
  ☐c6_1_9.py
  ☐c6_1_10.py
  ☐c6_1_11.py
  ☐c6_1_12.py
  ☐c6_1_13.py
  ☐c6_1_14.py
  ☐c6_1_15.py
  ☐c6_1_16.py
  ☐c6_1_17.py
  ☐c6_2_1.py
  ☐c6_2_2.py
  ☐c6_2_3.py
  ☐c6_2_4.py
  ☐c6_2_5.py
  ☐c6_2_6.py
  ☐c6_2_7.py
  ☐c6_2_8.py
  ☐c6_2_9.py
  ☐c6_2_10.py
  ☐c6_2_11.py
  ☐c6_2_12.py
  ☐c6_2_13.py
  ☐c6_2_14.py
  ☐c6_2_15.py
  ☐c6_2_16.py
  ☐c6_2_17.py
  ☐c6_2_18.py
  ☐c6_2_19.py
  ☐c6_2_20.py
  ☐c6_2_21.py
  ☐c6_2_22.py
  ☐c6_2_23.py
  ☐c6_2_24.py
  ☐c6_2_25.py
  ☐c6_2_26.py
  ☐c6_2_27.py
  ☐c6_2_28.py
  ☐c6_2_29.py
  ☐c6_2_30.py
  ☐c6_2_31.py
  ☐c6_2_32.py
  ☐c6_2_33.py
  ☐c6_2_34.py
  ☐c6_2_35.py
  ☐c6_2_36.py
  ☐c6_2_37.py
  ☐c6_2_38.py
  ☐c6_2_39.py
  ☐c6_2_40.py

📁 lesson7/
  ☐c7_1_1.py
  ☐c7_1_2.py
  ☐c7_1_3.py
  ☐c7_1_4.py
  ☐c7_1_5.py
  ☐c7_1_6.py
  ☐c7_1_7.py
  ☐c7_1_8.py
  ☐c7_1_9.py
  ☐c7_1_10.py
  ☐c7_1_11.py
  ☐c7_1_12.py
  ☐c7_1_13.py
  ☐c7_1_14.py
  ☐c7_1_15.py
  ☐c7_1_16.py
  ☐c7_1_17.py
  ☐c7_1_18.py
  ☐c7_1_19.py
  ☐c7_1_20.py
  ☐c7_2_1.py
  ☐c7_2_2.py
  ☐c7_2_3.py
  ☐c7_2_4.py
  ☐c7_2_5.py
  ☐c7_2_6.py
  ☐c7_2_7.py
  ☐c7_2_8.py
  ☐c7_2_9.py
  ☐c7_2_10.py
  ☐c7_2_11.py
  ☐c7_2_12.py
  ☐c7_2_13.py
  ☐c7_2_14.py
  ☐c7_2_15.py
  ☐c7_2_16.py
  ☐c7_2_17.py
  ☐c7_2_18.py
  ☐c7_3_1.py
  ☐c7_3_2.py
  ☐c7_3_3.py
  ☐c7_3_4.py
  ☐c7_3_5.py
  ☐c7_3_6.py
  ☐c7_3_7.py
  ☐c7_4_1.py
  ☐c7_4_2.py
  ☐c7_4_3.py
  ☐c7_4_4.py
  ☐c7_4_5.py
  ☐c7_4_6.py
  ☐c7_4_7.py
  ☐c7_4_8.py
  ☐c7_4_9.py
  ☐c7_4_10.py
  ☐c7_4_11.py
  ☐c7_4_12.py
  ☐c7_4_13.py
  ☐c7_4_14.py
  ☐c7_4_15.py
  ☐c7_4_16.py
  ☐c7_4_17.py
  ☐c7_4_18.py
  ☐c7_4_19.py
  ☐c7_4_20.py
  ☐c7_4_21.py
  ☐c7_4_22.py
  ☐c7_4_23.py
  ☐c7_4_24.py
    ☐design\email_template.txt
  ☐renamed.txt
  ☐symlink.txt
  ☐test.csv
  ☐test.tar.gz
  ☐test.zip
      ☐test_dir\sub_dir\sub_test.txt
    ☐test_dir\test.txt
        ☐test_tar\test_dir\sub_dir\sub_test.txt
      ☐test_tar\test_dir\text.txt
        ☐zzz2\test_dir\sub_dir\sub_test.txt
      ☐zzz2\test_dir\test.txt

📁 lesson8/
  ☐__init__.py
  ☐main.py
  ☐PKG-INFO
  ☐ranking.csv
  ☐README.txt
    ☐roboter\__init__.py
      ☐roboter\__pycache__\__init__.cpython-39.pyc
      ☐roboter\controller\__init__.py
        ☐roboter\controller\__pycache__\__init__.cpython-39.pyc
        ☐roboter\controller\__pycache__\conversation.cpython-39.pyc
      ☐roboter\controller\conversation.py
      ☐roboter\models\__init__.py
        ☐roboter\models\__pycache__\__init__.cpython-39.pyc
        ☐roboter\models\__pycache__\ranking.cpython-39.pyc
        ☐roboter\models\__pycache__\robot.cpython-39.pyc
      ☐roboter\models\ranking.py
      ☐roboter\models\robot.py
    ☐roboter\ranking.csv
      ☐roboter\templates\good_by.txt
      ☐roboter\templates\greeting.txt
      ☐roboter\templates\hello.txt
      ☐roboter\templates\which_restaurant.txt
      ☐roboter\views\__init__.py
        ☐roboter\views\__pycache__\__init__.cpython-39.pyc
        ☐roboter\views\__pycache__\console.cpython-39.pyc
      ☐roboter\views\console.py
  ☐setup.cfg
  ☐setup.py

📁 lesson10/
    ☐__pycache__\logtest.cpython-39.pyc
  ☐c10_1_1.py
  ☐c10_1_2.py
  ☐c10_1_3.py
  ☐c10_1_4.py
  ☐c10_1_5.py
  ☐c10_2_1.py
  ☐c10_2_2.py
  ☐c10_2_3.py
  ☐c10_2_4.py
  ☐c10_2_5.py
  ☐c10_2_6.py
  ☐c10_2_7.py
  ☐c10_2_8.py
  ☐c10_2_9.py
  ☐c10_2_10.py
  ☐c10_2_11.py
  ☐c10_2_12.py
  ☐c10_2_13.py
  ☐c10_2_14.py
  ☐c10_2_15.py
  ☐c10_2_16.py
  ☐c10_2_17.py
  ☐c10_2_18.py
  ☐c10_2_19.py
  ☐c10_3_1.py
  ☐c10_3_2.py
  ☐c10_3_3.py
  ☐c10_4_1.py
  ☐config2.yml
  ☐config.ini
  ☐config.yml
  ☐console.py
  ☐logging.ini
  ☐logtest.log
  ☐logtest.py
  ☐ranking.py
  ☐test.log

📁 lesson11/
  ☐c11_1_1.py
  ☐c11_1_2.py
  ☐c11_1_3.py
  ☐c11_1_4.py
  ☐c11_2_1.py
  ☐c11_2_2.py
  ☐c11_2_3.py
  ☐c11_2_4.py
  ☐c11_2_5.py
  ☐c11_2_6.py
  ☐c11_2_7.py
  ☐c11_2_8.py
  ☐c11_2_9.py
  ☐c11_2_10.py
  ☐c11_2_11.py
  ☐c11_2_12.py
  ☐c11_3_1.py
  ☐c11_3_2.py
  ☐c11_3_3.py
  ☐c11_3_4.py
  ☐c11_3_5.py
  ☐c11_3_6.py
  ☐c11_3_7.py
  ☐c11_3_8.py
  ☐c11_3_9.py
  ☐c11_3_10.py
  ☐c11_4_1.py
  ☐c11_4_2.py
  ☐c11_4_3.py
  ☐c11_4_4.py
  ☐c11_4_5.py
    ☐templates\hello.html
  ☐test.json
  ☐test_flask.py
  ☐test_sqlite.db

📁 lesson12/
  ☐c12_1_1.py
  ☐c12_1_2.py
  ☐c12_1_3.py
  ☐c12_1_4.py
  ☐c12_1_5.py
  ☐c12_1_6.py
  ☐c12_1_7.py
  ☐c12_1_8.py
  ☐c12_1_9.py
  ☐c12_1_10.py
  ☐c12_1_11.py
  ☐c12_1_12.py
  ☐c12_1_13.py
  ☐c12_1_14.py
  ☐c12_1_15.py
  ☐c12_1_16.py
  ☐c12_1_17.py
  ☐c12_1_18.py
  ☐c12_1_19.py
  ☐c12_1_20.py
  ☐c12_1_21.py
  ☐c12_2_1.py
  ☐c12_2_2.py
  ☐c12_2_3.py
  ☐c12_2_4.py
  ☐c12_2_5.py
  ☐c12_2_6.py
  ☐c12_2_7.py
  ☐c12_2_8.py
  ☐c12_2_9.py
  ☐c12_2_10.py
  ☐c12_2_11.py
  ☐c12_2_12.py
  ☐c12_2_13.py
  ☐c12_2_14.py
  ☐c12_2_15.py
  ☐c12_2_16.py
  ☐c12_2_17.py
  ☐c12_2_18.py
  ☐c12_2_19.py
  ☐c12_2_20.py
  ☐c12_3_1.py
  ☐c12_3_2.py
  ☐c12_3_3.py
  ☐c12_3_4.py
  ☐c12_3_5.py

📁 lesson13/
    ☐.ipynb_checkpoints\c13_2_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_2_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_2_20-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_3_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_3_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_3_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_4_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_4_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_5-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_6-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_10-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\c13_6_12-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_5-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_6-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_10-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_12-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_13-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_14-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_15-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_16-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_17-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_18-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_19-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_20-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_21-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_22-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_23-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_24-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_25-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_26-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_27-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_28-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_29-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_30-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_2_31-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_5-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_6-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_10-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_12-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_13-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_14-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_15-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_16-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_17-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_18-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_19-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_20-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_21-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_22-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_23-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_24-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_25-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_26-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_27-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_28-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_29-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_3_30-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_5-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_6-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_10-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_4_12-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_5_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_5_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_5_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_5_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_1-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_2-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_3-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_4-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_5-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_6-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_7-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_8-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_9-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_10-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_11-checkpoint.ipynb
    ☐.ipynb_checkpoints\lesson13_6_12-checkpoint.ipynb
    ☐.ipynb_checkpoints\test-checkpoint.ipynb
  ☐c13_2_1.ipynb
  ☐c13_2_2.ipynb
  ☐c13_2_3.ipynb
  ☐c13_2_4.ipynb
  ☐c13_2_5.ipynb
  ☐c13_2_6.ipynb
  ☐c13_2_7.ipynb
  ☐c13_2_8.ipynb
  ☐c13_2_9.ipynb
  ☐c13_2_10.ipynb
  ☐c13_2_11.ipynb
  ☐c13_2_12.ipynb
  ☐c13_2_13.ipynb
  ☐c13_2_14.ipynb
  ☐c13_2_15.ipynb
  ☐c13_2_16.ipynb
  ☐c13_2_17.ipynb
  ☐c13_2_18.ipynb
  ☐c13_2_19.ipynb
  ☐c13_2_20.ipynb
  ☐c13_2_21.ipynb
  ☐c13_2_22.ipynb
  ☐c13_2_23.ipynb
  ☐c13_2_24.ipynb
  ☐c13_2_25.ipynb
  ☐c13_2_26.ipynb
  ☐c13_2_27.ipynb
  ☐c13_2_28.ipynb
  ☐c13_2_29.ipynb
  ☐c13_2_30.ipynb
  ☐c13_2_31.ipynb
  ☐c13_3_1.ipynb
  ☐c13_3_2.ipynb
  ☐c13_3_3.ipynb
  ☐c13_3_4.ipynb
  ☐c13_3_5.ipynb
  ☐c13_3_6.ipynb
  ☐c13_3_7.ipynb
  ☐c13_3_8.ipynb
  ☐c13_3_9.ipynb
  ☐c13_3_10.ipynb
  ☐c13_3_11.ipynb
  ☐c13_3_12.ipynb
  ☐c13_3_13.ipynb
  ☐c13_3_14.ipynb
  ☐c13_3_15.ipynb
  ☐c13_3_16.ipynb
  ☐c13_3_17.ipynb
  ☐c13_3_18.ipynb
  ☐c13_3_19.ipynb
  ☐c13_3_20.ipynb
  ☐c13_3_21.ipynb
  ☐c13_3_22.ipynb
  ☐c13_3_23.ipynb
  ☐c13_3_24.ipynb
  ☐c13_3_25.ipynb
  ☐c13_3_26.ipynb
  ☐c13_3_27.ipynb
  ☐c13_3_28.ipynb
  ☐c13_3_29.ipynb
  ☐c13_3_30.ipynb
  ☐c13_4_1.ipynb
  ☐c13_4_2.ipynb
  ☐c13_4_3.ipynb
  ☐c13_4_4.ipynb
  ☐c13_4_5.ipynb
  ☐c13_4_6.ipynb
  ☐c13_4_7.ipynb
  ☐c13_4_8.ipynb
  ☐c13_4_9.ipynb
  ☐c13_4_10.ipynb
  ☐c13_4_11.ipynb
  ☐c13_4_12.ipynb
  ☐c13_5_1.ipynb
  ☐c13_5_2.ipynb
  ☐c13_5_3.ipynb
  ☐c13_5_4.ipynb
  ☐c13_6_1.ipynb
  ☐c13_6_2.ipynb
  ☐c13_6_3.ipynb
  ☐c13_6_4.ipynb
  ☐c13_6_5.ipynb
  ☐c13_6_6.ipynb
  ☐c13_6_7.ipynb
  ☐c13_6_8.ipynb
  ☐c13_6_9.ipynb
  ☐c13_6_10.ipynb
  ☐c13_6_11.ipynb
  ☐c13_6_12.ipynb
  ☐uninstall.txt


================================================================================
ファイル内容
================================================================================


################################################################################
### lesson1 ###
################################################################################


================================================================================
☐ファイル: lesson1\c1_1_1.py
================================================================================

""""数値型の変数の宣言"""
num = 1
print(num)


================================================================================
☐ファイル: lesson1\c1_1_2.py
================================================================================

"""文字列型の変数の宣言"""
name = 'Mike'
print(name)


================================================================================
☐ファイル: lesson1\c1_1_3.py
================================================================================

"""変数の型を確認する"""
num = 1
name = 'Mike'
print(num, type(num))
print(name, type(name))


================================================================================
☐ファイル: lesson1\c1_1_4.py
================================================================================

"""Boolean型の変数の宣言"""
is_ok = True
print(is_ok, type(is_ok))


================================================================================
☐ファイル: lesson1\c1_1_5.py
================================================================================

"""変数に違う型の値を入れる"""
num = 1
name = 'Mike'
num = name
print(num, type(num))


================================================================================
☐ファイル: lesson1\c1_1_6.py
================================================================================

"""型変換"""
name = '1'

new_num = int(name)

print(new_num, type(new_num))


================================================================================
☐ファイル: lesson1\c1_1_7.py
================================================================================

"""型宣言"""
num: int = 1
name: str = '1'


================================================================================
☐ファイル: lesson1\c1_1_8.py
================================================================================

"""型宣言をした変数に違う型の値を入れる"""
num: int = 1
name: str = '1'

num = name

print(num, type(num))


================================================================================
☐ファイル: lesson1\c1_1_9.py
================================================================================

"""先頭が数字の名前"""
1num = 1


================================================================================
☐ファイル: lesson1\c1_1_10.py
================================================================================

"""数字を最後の文字にする／_を最初の文字にする"""
num1 = 1
_num = 1


================================================================================
☐ファイル: lesson1\c1_1_11.py
================================================================================

"""予約語の変数名"""
if = 1


================================================================================
☐ファイル: lesson1\c1_1_12.py
================================================================================

"""printで出力"""
print('Hi')


================================================================================
☐ファイル: lesson1\c1_1_13.py
================================================================================

"""複数の文字列を出力"""
print('Hi', 'Mike')


================================================================================
☐ファイル: lesson1\c1_1_14.py
================================================================================

"""区切り文字を指定する"""
print('Hi', 'Mike', sep=',')


================================================================================
☐ファイル: lesson1\c1_1_15.py
================================================================================

"""終わりの文字を指定する"""
print('Hi', 'Mike', sep=',', end='\n')
print('Hi', 'Mike', sep=',', end='\n')


================================================================================
☐ファイル: lesson1\c1_1_16.py
================================================================================

"""終わりの文字を指定する"""
print('Hi', 'Mike', sep=',', end='')
print('Hi', 'Mike', sep=',', end='')


================================================================================
☐ファイル: lesson1\c1_1_17.py
================================================================================

"""終わりの文字を指定する"""
print('Hi', 'Mike', sep=',', end='.\n')


================================================================================
☐ファイル: lesson1\c1_1_18.py
================================================================================

"""足し算"""
print(2 + 2)


================================================================================
☐ファイル: lesson1\c1_1_19.py
================================================================================

"""平方根の計算"""
import math

result = math.sqrt(25)
print(result)


================================================================================
☐ファイル: lesson1\c1_1_20.py
================================================================================

"""対数の計算"""
import math

result = math.log2(10)
print(result)


================================================================================
☐ファイル: lesson1\c1_1_21.py
================================================================================

"""help関数"""
import math

print(help(math))


================================================================================
☐ファイル: lesson1\c1_2_1.py
================================================================================

"""文字列の出力"""
s = 'hello'
print(s)


================================================================================
☐ファイル: lesson1\c1_2_2.py
================================================================================

"""文字列の出力"""
print('hello')


================================================================================
☐ファイル: lesson1\c1_2_3.py
================================================================================

"""シングルクォートとダブルクォート"""
print('hello')
print("hello")


================================================================================
☐ファイル: lesson1\c1_2_4.py
================================================================================

"""ダブルクォートの中にシングルクォート"""
print("I don't know")


================================================================================
☐ファイル: lesson1\c1_2_5.py
================================================================================

"""シングルクォートの中にシングルクォート"""
print('I don't know')


================================================================================
☐ファイル: lesson1\c1_2_6.py
================================================================================

"""シングルクォートの前にバックスラッシュ"""
print('I don\'t know')


================================================================================
☐ファイル: lesson1\c1_2_7.py
================================================================================

"""シングルクォートの中にダブルクォート"""
print('say "I don\'t know"')


================================================================================
☐ファイル: lesson1\c1_2_8.py
================================================================================

"""ダブルクォートの中にダブルクォート"""
print("say "I don\'t know"")


================================================================================
☐ファイル: lesson1\c1_2_9.py
================================================================================

"""ダブルクォートの前にバックスラッシュ"""
print("say \"I don't know\"")


================================================================================
☐ファイル: lesson1\c1_2_10.py
================================================================================

"""改行"""
print('hello. \nHow are you?')


================================================================================
☐ファイル: lesson1\c1_2_11.py
================================================================================

"""意図せぬ改行"""
print('C:\name\name')


================================================================================
☐ファイル: lesson1\c1_2_12.py
================================================================================

"""意図せぬ改行の回避"""
print(r'C:\name\name')


================================================================================
☐ファイル: lesson1\c1_2_13.py
================================================================================

"""複数行にわたる文字列の出力"""
print("""
line1
line2
line3
""")


================================================================================
☐ファイル: lesson1\c1_2_14.py
================================================================================

"""複数行にわたる文字列の出力"""
print("##########")
print("""
line1
line2
line3
""")
print("##########")


================================================================================
☐ファイル: lesson1\c1_2_15.py
================================================================================

"""複数行にわたる文字列の出力"""
print("##########")
print("""line1
line2
line3""")
print("##########")


================================================================================
☐ファイル: lesson1\c1_2_16.py
================================================================================

"""複数行にわたる文字列の出力"""
print("##########")
print("""\
line1
line2
line3\
""")
print("##########")


================================================================================
☐ファイル: lesson1\c1_2_17.py
================================================================================

"""文字列を繰り返し出力する"""
print('Hi.' * 3)


================================================================================
☐ファイル: lesson1\c1_2_18.py
================================================================================

"""文字列を連結する"""
print('Hi.' * 3 + 'Mike.')


================================================================================
☐ファイル: lesson1\c1_2_19.py
================================================================================

"""リテラル同士を連結する"""
print('Py' + 'thon')
print('Py''thon')


================================================================================
☐ファイル: lesson1\c1_2_20.py
================================================================================

"""変数とリテラルを連結する"""
prefix = 'Py'
print(prefix'thon')


================================================================================
☐ファイル: lesson1\c1_2_21.py
================================================================================

"""変数とリテラルを連結する"""
prefix = 'Py'
print(prefix + 'thon')


================================================================================
☐ファイル: lesson1\c1_2_22.py
================================================================================

"""複数行にわたる文字列の連結"""
s = ('aaaaaaaaaaaaaaaaaaaaaaaaaaa'
     'bbbbbbbbbbbbbbbbbbbbbbbbbbb')
print(s)


================================================================================
☐ファイル: lesson1\c1_2_23.py
================================================================================

"""複数行にわたる文字列の連結"""
s = 'aaaaaaaaaaaaaaaaaaaaaaaaaaa'\
    'bbbbbbbbbbbbbbbbbbbbbbbbbbb'
print(s)


================================================================================
☐ファイル: lesson1\c1_2_24.py
================================================================================

"""文字列のインデックス"""
word = 'python'
print(word[0])


================================================================================
☐ファイル: lesson1\c1_2_25.py
================================================================================

"""文字列のインデックス"""
word = 'python'
print(word[1])


================================================================================
☐ファイル: lesson1\c1_2_26.py
================================================================================

"""文字列のインデックス"""
word = 'python'
print(word[-1])


================================================================================
☐ファイル: lesson1\c1_2_27.py
================================================================================

"""文字列のスライス"""
word = 'python'
print(word[0:2])


================================================================================
☐ファイル: lesson1\c1_2_28.py
================================================================================

"""文字列のスライス"""
word = 'python'
print(word[2:5])


================================================================================
☐ファイル: lesson1\c1_2_29.py
================================================================================

"""文字列のスライス"""
word = 'python'
print(word[0:2])
print(word[:2])


================================================================================
☐ファイル: lesson1\c1_2_30.py
================================================================================

"""文字列のスライス"""
word = 'python'
print(word[2:])


================================================================================
☐ファイル: lesson1\c1_2_31.py
================================================================================

"""存在しないインデックスの指定"""
word = 'python'
print(word[100])


================================================================================
☐ファイル: lesson1\c1_2_32.py
================================================================================

"""文字列の一部を書き換える"""
word = 'python'
word[0] = 'j'


================================================================================
☐ファイル: lesson1\c1_2_33.py
================================================================================

"""文字列の一部を書き換える"""
word = 'python'
word = 'j' + word[1:]
print(word)


================================================================================
☐ファイル: lesson1\c1_2_34.py
================================================================================

"""文字列のスライス"""
word = 'python'
print(word[:])


================================================================================
☐ファイル: lesson1\c1_2_35.py
================================================================================

"""文字列の長さを調べる"""
word = 'python'
n = len(word)
print(n)


================================================================================
☐ファイル: lesson1\c1_2_36.py
================================================================================

"""startswith()"""
s = 'My name is Mike. Hi Mike.'
is_start = s.startswith('My')
print(is_start)


================================================================================
☐ファイル: lesson1\c1_2_37.py
================================================================================

"""startswith()"""
s = 'My name is Mike. Hi Mike.'
is_start = s.startswith('X')
print(is_start)


================================================================================
☐ファイル: lesson1\c1_2_38.py
================================================================================

"""find()"""
s = 'My name is Mike. Hi Mike.'
print(s.find('Mike'))


================================================================================
☐ファイル: lesson1\c1_2_39.py
================================================================================

"""rfind()"""
s = 'My name is Mike. Hi Mike.'
print(s.rfind('Mike'))


================================================================================
☐ファイル: lesson1\c1_2_40.py
================================================================================

"""count()"""
s = 'My name is Mike. Hi Mike.'
print(s.count('Mike'))


================================================================================
☐ファイル: lesson1\c1_2_41.py
================================================================================

"""capitilize()"""
s = 'My name is Mike. Hi Mike.'
print(s.capitalize())


================================================================================
☐ファイル: lesson1\c1_2_42.py
================================================================================

"""title()"""
s = 'My name is Mike. Hi Mike.'
print(s.title())


================================================================================
☐ファイル: lesson1\c1_2_43.py
================================================================================

"""upper()"""
s = 'My name is Mike. Hi Mike.'
print(s.upper())


================================================================================
☐ファイル: lesson1\c1_2_44.py
================================================================================

"""lower()"""
s = 'My name is Mike. Hi Mike'
print(s.lower())


================================================================================
☐ファイル: lesson1\c1_2_45.py
================================================================================

"""replace()"""
s = 'My name is Mike. Hi Mike.'
print(s.replace('Mike', 'Nancy'))


================================================================================
☐ファイル: lesson1\c1_2_46.py
================================================================================

"""f-strings"""
a = 'a'
print(f'a is {a}')


================================================================================
☐ファイル: lesson1\c1_2_47.py
================================================================================

"""f-stringsによる複数の文字列の挿入"""
x, y, z = 1, 2, 3
print(f'a is {x}, {y}, {z}')
print(f'a is {z}, {y}, {x}')


================================================================================
☐ファイル: lesson1\c1_2_48.py
================================================================================

"""f-stringsによる複数の文字列の挿入"""
name = 'Jun'
family = 'Sakai'
print(f'My name is {name} {family}. Watashi wa {family} {name}.')


################################################################################
### lesson2 ###
################################################################################


================================================================================
☐ファイル: lesson2\c2_1_1.py
================================================================================

"""indexメソッド"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
print(r.index(3))


================================================================================
☐ファイル: lesson2\c2_1_2.py
================================================================================

"""indexメソッド"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
print(r.index(3, 3))


================================================================================
☐ファイル: lesson2\c2_1_3.py
================================================================================

"""countメソッド"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
print(r.count(3))


================================================================================
☐ファイル: lesson2\c2_1_4.py
================================================================================

"""in演算子による包含判定"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
if 5 in r:
    print('exist')


================================================================================
☐ファイル: lesson2\c2_1_5.py
================================================================================

"""sortメソッド"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
r.sort()
print(r)


================================================================================
☐ファイル: lesson2\c2_1_6.py
================================================================================

"""逆順のソート"""
r = [1, 2, 3, 4, 5, 1, 2, 3]
r.sort()
print(r)
r.sort(reverse=True)
print(r)
r.reverse()
print(r)


================================================================================
☐ファイル: lesson2\c2_1_7.py
================================================================================

"""splitメソッド"""
s = 'My name is Mike.'
to_split = s.split(' ')
print(to_split)


================================================================================
☐ファイル: lesson2\c2_1_8.py
================================================================================

"""splitメソッド"""
s = 'My name is Mike.'
to_split = s.split('!!!')
print(to_split)


================================================================================
☐ファイル: lesson2\c2_1_9.py
================================================================================

"""joinメソッド"""
s = 'My name is Mike.'
to_split = s.split(' ')
print(to_split)
x = ' '.join(to_split)
print(x)


================================================================================
☐ファイル: lesson2\c2_1_10.py
================================================================================

"""help関数"""
print(help(list))


================================================================================
☐ファイル: lesson2\c2_1_11.py
================================================================================

"""コピー（代入）"""
i = [1, 2, 3, 4, 5]
j = i
j[0] = 100
print('j =', j)
print('i =', i)


================================================================================
☐ファイル: lesson2\c2_1_12.py
================================================================================

"""copyメソッドを試す"""
x = [1, 2, 3, 4, 5]
y = x.copy()
y[0] = 100
print('y =', y)
print('x =', x)


================================================================================
☐ファイル: lesson2\c2_1_13.py
================================================================================

"""オブジェクトidの確認"""
X = 20
Y = X
Y = 5
print(id(X))
print(id(Y))
print(Y)
print(X)


================================================================================
☐ファイル: lesson2\c2_1_14.py
================================================================================

"""オブジェクトidの確認"""
X = ['a', 'b']
Y = X
Y[0] = 'p'
print(id(X))
print(id(Y))
print(Y)
print(X)


================================================================================
☐ファイル: lesson2\c2_1_15.py
================================================================================

"""スライスによるコピー"""
x = [1, 2, 3, 4, 5]
y = x[:]
y[0] = 100
print('y =', y)
print('x =', x)


================================================================================
☐ファイル: lesson2\c2_2_1.py
================================================================================

"""タプルのアンパッキング"""
num_tuple = (10, 20)
x, y = num_tuple
print(x, y)


================================================================================
☐ファイル: lesson2\c2_2_2.py
================================================================================

"""タプルのアンパッキング"""
x, y = 10, 20
print(x, y)


================================================================================
☐ファイル: lesson2\c2_2_3.py
================================================================================

"""変数が多いときの宣言の仕方"""
a, b, c, d, e, f = 'Mike', '1', '1', '1', 'e', 'f'


================================================================================
☐ファイル: lesson2\c2_2_4.py
================================================================================

"""変数が多いときの宣言の仕方"""
a = 'Mike'
b = '1'
c = '1'
d = '1'
e = 'e'
f = 'f'


================================================================================
☐ファイル: lesson2\c2_2_5.py
================================================================================

"""変数の入れ替え"""
i = 10
j = 20
tmp = i
i = j
j = tmp
print(i, j)


================================================================================
☐ファイル: lesson2\c2_2_6.py
================================================================================

"""変数の入れ替え"""
a = 100
b = 200
print(a, b)
a, b = b, a
print(a, b)


================================================================================
☐ファイル: lesson2\c2_2_7.py
================================================================================

"""選択問題の作成"""
choose_from_three = ('A', 'B', 'C')

answer = []

answer.append('A')
answer.append('C')

print(choose_from_three)
print(answer)


================================================================================
☐ファイル: lesson2\c2_2_8.py
================================================================================

"""選択問題の作成（失敗例）"""
choose_from_three = ['A', 'B', 'C']

answer = []

choose_from_three.append('A')
choose_from_three.append('C')

print(choose_from_three)


================================================================================
☐ファイル: lesson2\c2_2_9.py
================================================================================

"""選択問題の作成"""
choose_from_three = ('A', 'B', 'C')

answer = []

choose_from_three.append('A')
choose_from_three.append('C')


================================================================================
☐ファイル: lesson2\c2_3_1.py
================================================================================

"""辞書のコピー（代入）"""
x = {'a': 1}
y = x
y['a'] = 1000
print(x)
print(y)


================================================================================
☐ファイル: lesson2\c2_3_2.py
================================================================================

"""copyメソッドを試す"""
x = {'a': 1}
y = x.copy()
y['a'] = 1000
print(x)
print(y)


================================================================================
☐ファイル: lesson2\c2_3_3.py
================================================================================

"""果物の値段を辞書で作成"""
fruits = {
    'apple': 100,
    'banana': 200,
    'orange': 300
}

print(fruits['apple'])


================================================================================
☐ファイル: lesson2\c2_3_4.py
================================================================================

"""果物の値段をリストで作成"""
l = [
    ['apple', 100],
    ['banana', 200],
    ['orange', 300]
]


================================================================================
☐ファイル: lesson2\c2_4_1.py
================================================================================

"""共通の友人を求める"""
my_friends = {'A', 'C', 'D'}
A_friends = {'B', 'D', 'E', 'F'}
print(my_friends & A_friends)


================================================================================
☐ファイル: lesson2\c2_4_2.py
================================================================================

"""リストから重複を削除する"""
f = ['apple', 'banana', 'apple', 'banana']
kind = set(f)
print(kind)


################################################################################
### lesson3 ###
################################################################################


================================================================================
☐ファイル: lesson3\c3_1_1.py
================================================================================

"""コメント"""
print('XXXXX')
# test
print('XXXXX')


================================================================================
☐ファイル: lesson3\c3_1_2.py
================================================================================

"""複数行のコメント"""
print('XXXXX')
"""
test
test
test
test
"""
print('XXXXX')


================================================================================
☐ファイル: lesson3\c3_1_3.py
================================================================================

"""変数の説明"""
# Apple price
some_value = 100


================================================================================
☐ファイル: lesson3\c3_1_4.py
================================================================================

"""変数の説明"""
some_value = 100 # Apple price


================================================================================
☐ファイル: lesson3\c3_1_5.py
================================================================================

"""行の分割"""
s = 'aaaaaaaaaaa' \
    + 'bbbbbbbbb'
print(s)


================================================================================
☐ファイル: lesson3\c3_1_6.py
================================================================================

"""()による行の分割"""
s = ('aaaaaaaaaaa'
    + 'bbbbbbbbb')
print(s)
x = (1 + 1 + 1 + 1 + 1 + 1 + 1
    + 1 + 1 + 1 + 1 + 1 + 1 + 1)
print(x)


================================================================================
☐ファイル: lesson3\c3_2_1.py
================================================================================

"""if文"""
x = -10

if x < 0:
    print('negative')


================================================================================
☐ファイル: lesson3\c3_2_2.py
================================================================================

"""if文の条件にあてはまらない場合"""
x = 10

if x < 0:
    print('negative')


================================================================================
☐ファイル: lesson3\c3_2_3.py
================================================================================

"""else文"""
x = 10

if x < 0:
    print('negative')
else:
    print('positive')


================================================================================
☐ファイル: lesson3\c3_2_4.py
================================================================================

"""elif文"""
x = 0

if x < 0:
    print('negative')
elif x == 0:
    print('zero')
else:
    print('positive')


================================================================================
☐ファイル: lesson3\c3_2_5.py
================================================================================

"""複数のelif文"""
x = 10

if x < 0:
    print('negative')
elif x == 0:
    print('zero')
elif x == 10:
    print('10')
else:
    print('positive')


================================================================================
☐ファイル: lesson3\c3_2_6.py
================================================================================

"""複数のelif文"""
x = 10

if x < 0:
    print('negative')
elif x == 0:
    print('zero')
elif x == 10:
    print('1000000000000')
elif x == 10:
    print('10')
else:
    print('positive')


================================================================================
☐ファイル: lesson3\c3_2_7.py
================================================================================

"""if文のネスト"""
a = 5
b = 10

if a > 0:
    print('a is positive')
    if b > 0:
        print('b is positive')


================================================================================
☐ファイル: lesson3\c3_2_8.py
================================================================================

"""ネストしたif文のインデント"""
a = 5
b = 10

if a > 0:
    print('a is positive')
     if b > 0:
        print('b is positive')


================================================================================
☐ファイル: lesson3\c3_2_9.py
================================================================================

"""比較演算子 =="""
a = 1
b = 1

print(a == b)


================================================================================
☐ファイル: lesson3\c3_2_10.py
================================================================================

"""比較演算子 !="""
a = 1
b = 1
print(a != b)


================================================================================
☐ファイル: lesson3\c3_2_11.py
================================================================================

"""比較演算子 <"""
a = 1
b = 2
print(a < b)


================================================================================
☐ファイル: lesson3\c3_2_12.py
================================================================================

""""比較演算子 <="""
a = 2
b = 2
print(a <= b)


================================================================================
☐ファイル: lesson3\c3_2_13.py
================================================================================

"""論理演算子 and"""
a = 2
b = 2
if a > 0 and b > 0:
    print('a and b are positive')


================================================================================
☐ファイル: lesson3\c3_2_14.py
================================================================================

"""andを使わない場合"""
a = 2
b = 2
# a > 0もb > 0も真であれば真
if a > 0:
    if b > 0:
        print('a and b are positive')


================================================================================
☐ファイル: lesson3\c3_2_15.py
================================================================================

"""論理演算子 or"""
a = 1
b = -1
# a > 0またはb > 0が真であれば真
if a > 0 or b > 0:
    print('a or b are positive')


================================================================================
☐ファイル: lesson3\c3_2_16.py
================================================================================

"""orを使わない場合"""
a = 1
b = -1
# a > 0またはb > 0が真であれば真
if a > 0:
    print('a or b are positive')
elif b > 0:
    print('a or b are positive')


================================================================================
☐ファイル: lesson3\c3_2_17.py
================================================================================

"""in"""
y = [1, 2, 3]
x = 1

if x in y:
    print('in')


================================================================================
☐ファイル: lesson3\c3_2_18.py
================================================================================

"""not"""
y = [1, 2, 3]
x = 1

if 100 not in y:
    print('not in')


================================================================================
☐ファイル: lesson3\c3_2_19.py
================================================================================

"""not"""
a = 1
b = 10

if not a == b:
    print('Not equal')


================================================================================
☐ファイル: lesson3\c3_2_20.py
================================================================================

"""notではなく!="""
a = 1
b = 10

if a != b:
    print('Not equal')


================================================================================
☐ファイル: lesson3\c3_2_21.py
================================================================================

"""Boolean型の変数をそのままif文に書く"""
is_ok = True

if is_ok:
    print('hello')


================================================================================
☐ファイル: lesson3\c3_2_22.py
================================================================================

"""Boolean型の変数をnotで否定する"""
is_ok = True

if not is_ok:
    print('hello')


================================================================================
☐ファイル: lesson3\c3_2_23.py
================================================================================

"""Booleanの変数をそのままif文に書く"""
is_ok = True

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_24.py
================================================================================

"""変数に数値が入っていた場合のifの判定"""
is_ok = 1

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_25.py
================================================================================

"""変数に0が入っていた場合のifの判定"""
is_ok = 0

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_26.py
================================================================================

"""変数に数値が入っていた場合のifの判定"""
is_ok = 10020

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_27.py
================================================================================

"""変数に文字列が入っていた場合のifの判定"""
is_ok = ''

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_28.py
================================================================================

"""変数に文字列が入っていた場合のifの判定"""
is_ok = 'afdafdsafdsa'

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_29.py
================================================================================

"""リストが空だった場合のifの判定"""
is_ok = []

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_30.py
================================================================================

"""リストに要素が入っていた場合のifの判定"""
is_ok = [1, 2, 3, 4]

if is_ok:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_31.py
================================================================================

"""lenを使ったリストの中身の判定"""
is_ok = [1, 2, 3, 4]

if len(is_ok) > 0:
    print('OK!')
else:
    print('No!')


================================================================================
☐ファイル: lesson3\c3_2_32.py
================================================================================

"""Noneをhelpで確認する"""
is_empty = None
print(help(is_empty))


================================================================================
☐ファイル: lesson3\c3_2_33.py
================================================================================

"""==によるNoneであるかどうかの判定"""
is_empty = None

if is_empty == None:
    print('None!!!')


================================================================================
☐ファイル: lesson3\c3_2_34.py
================================================================================

"""isによるNoneであるかどうかの判定"""
is_empty = None

if is_empty is None:
    print('None!!!')


================================================================================
☐ファイル: lesson3\c3_2_35.py
================================================================================

"""Noneではないことの判定"""
is_empty = None

if is_empty is not None:
    print('None!!!')


================================================================================
☐ファイル: lesson3\c3_2_36.py
================================================================================

"""==による比較"""
print(1 == True)


================================================================================
☐ファイル: lesson3\c3_2_37.py
================================================================================

"""isによる比較"""
print(1 is True)
print(True is True)


================================================================================
☐ファイル: lesson3\c3_2_38.py
================================================================================

"""isによる比較"""
print(None is None)


================================================================================
☐ファイル: lesson3\c3_3_1.py
================================================================================

"""while文"""
count = 0
while count < 5:
    print(count)
    count += 1


================================================================================
☐ファイル: lesson3\c3_3_2.py
================================================================================

"""break文"""
count = 0
while True:
    print('XXX')


================================================================================
☐ファイル: lesson3\c3_3_3.py
================================================================================

"""break文"""
count = 0
while True:
    if count >= 5:
        break

    print(count)
    count += 1


================================================================================
☐ファイル: lesson3\c3_3_4.py
================================================================================

"""continue文"""
count = 0
while True:
    if count >= 5:
        break

    if count == 2:
        count += 1
        continue

    print(count)
    count += 1


================================================================================
☐ファイル: lesson3\c3_3_5.py
================================================================================

"""while else文"""
count = 0

while count < 5:
    print(count)
    count += 1
else:
    print('Done')


================================================================================
☐ファイル: lesson3\c3_3_6.py
================================================================================

"""while else文とbreak文"""
count = 0

while count < 5:
    if count == 1:
        break
    print(count)
    count += 1
else:
    print('Done')


================================================================================
☐ファイル: lesson3\c3_3_7.py
================================================================================

"""input関数"""
while True:
    word = input('Enter:')
    if word == 'ok':
        break
    print('next')


================================================================================
☐ファイル: lesson3\c3_3_8.py
================================================================================

"""input関数での入力を数値として扱う"""
while True:
    word = input('Enter:')
    num = int(word)
    if num == 100:
        break
    print('next')


================================================================================
☐ファイル: lesson3\c3_3_9.py
================================================================================

"""while文でリストの中身を取り出す"""
some_list = [1, 2, 3, 4, 5]

i = 0
while i < len(some_list):
    print(some_list[i])
    i += 1


================================================================================
☐ファイル: lesson3\c3_3_10.py
================================================================================

"""for文でリストの中身を取り出す"""
some_list = [1, 2, 3, 4, 5]

for i in some_list:
    print(i)


================================================================================
☐ファイル: lesson3\c3_3_11.py
================================================================================

"""for文で文字列を取り出す"""
for s in 'abcde':
    print(s)

for word in ['My', 'name', 'is', 'Mike']:
    print(word)


================================================================================
☐ファイル: lesson3\c3_3_12.py
================================================================================

"""for文とbreak文"""
for word in ['My', 'name', 'is', 'Mike']:
    if word == 'name':
        break
    print(word)


================================================================================
☐ファイル: lesson3\c3_3_13.py
================================================================================

"""for文とcontinue文"""
for word in ['My', 'name', 'is', 'Mike']:
    if word == 'name':
        continue
    print(word)


================================================================================
☐ファイル: lesson3\c3_3_14.py
================================================================================

"""for else文"""
for fruit in['apple', 'banana', 'orange']:
    print(fruit)
else:
    print('I ate all.')


================================================================================
☐ファイル: lesson3\c3_3_15.py
================================================================================

"""for else文とbreak文"""
for fruit in['apple', 'banana', 'orange']:
    if fruit == 'banana':
        print('stop eating')
        break
    print(fruit)
else:
    print('I ate all.')


================================================================================
☐ファイル: lesson3\c3_3_16.py
================================================================================

"""数値を1つずつ出力する"""
num_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for i in num_list:
    print(i)


================================================================================
☐ファイル: lesson3\c3_3_17.py
================================================================================

"""range関数"""
for i in range(10):
    print(i)


================================================================================
☐ファイル: lesson3\c3_3_18.py
================================================================================

"""range関数で開始位置を指定する"""
for i in range(2, 10):
    print(i)


================================================================================
☐ファイル: lesson3\c3_3_19.py
================================================================================

"""range関数で数値をとばして取り出す"""
for i in range(2, 10, 3):
    print(i)


================================================================================
☐ファイル: lesson3\c3_3_20.py
================================================================================

"""range関数の活用"""
for i in range(10):
    print('hello')


================================================================================
☐ファイル: lesson3\c3_3_21.py
================================================================================

"""range関数の活用"""
for _ in range(10):
    print('hello')


================================================================================
☐ファイル: lesson3\c3_3_22.py
================================================================================

"""インデックス番号を表示する"""
i = 0
for fruit in ['apple', 'banana', 'orange']:
    print(i, fruit)
    i += 1


================================================================================
☐ファイル: lesson3\c3_3_23.py
================================================================================

"""enumerate関数"""
for i, fruit in enumerate(['apple', 'banana', 'orange']):
    print(i, fruit)


================================================================================
☐ファイル: lesson3\c3_3_24.py
================================================================================

"""複数のリストから1つずつ要素を取り出す"""
days = ['Mon', 'Tue', 'Wed']
fruits = ['apple', 'banana', 'orange']
drinks = ['coffee', 'tea', 'beer']

for i in range(len(days)):
    print(days[i], fruits[i], drinks[i])


================================================================================
☐ファイル: lesson3\c3_3_25.py
================================================================================

"""zip関数"""
days = ['Mon', 'Tue', 'Wed']
fruits = ['apple', 'banana', 'orange']
drinks = ['coffee', 'tea', 'beer']

for day, fruit, drink in zip(days, fruits, drinks):
    print(day, fruit, drink)


================================================================================
☐ファイル: lesson3\c3_3_26.py
================================================================================

"""辞書をfor文で処理する"""
d = {'x': 100, 'y': 200}

for v in d:
    print(v)


================================================================================
☐ファイル: lesson3\c3_3_27.py
================================================================================

"""辞書をfor文で処理する"""
d = {'x': 100, 'y': 200}

for k, v in d.items():
    print(k, ':', v)


================================================================================
☐ファイル: lesson3\c3_3_28.py
================================================================================

"""items()の中身を確認する"""
d = {'x': 100, 'y': 200}

print(d.items())


################################################################################
### lesson4 ###
################################################################################


================================================================================
☐ファイル: lesson4\c4_1_1.py
================================================================================

""""関数定義"""
def say_something():
    print('hi')

say_something()



================================================================================
☐ファイル: lesson4\c4_1_2.py
================================================================================

""""関数定義の順番"""
say_something()
def say_something():
    print('hi')


================================================================================
☐ファイル: lesson4\c4_1_3.py
================================================================================

""""関数の呼び出し方"""
def say_something():
    print('hi')
say_something



================================================================================
☐ファイル: lesson4\c4_1_4.py
================================================================================

""""関数の型"""
def say_something():
    print('hi')

print(type(say_something))



================================================================================
☐ファイル: lesson4\c4_1_5.py
================================================================================

"""関数を変数に入れて呼び出す"""
def say_something():
    print('hi')

f = say_something
f()


================================================================================
☐ファイル: lesson4\c4_1_6.py
================================================================================

"""返り値"""
def say_something():
    s = 'hi'
    return s

result = say_something()
print(result)


================================================================================
☐ファイル: lesson4\c4_1_7.py
================================================================================

"""引数"""
def what_is_this(color):
    print(color)

what_is_this('red')


================================================================================
☐ファイル: lesson4\c4_1_8.py
================================================================================

"""引数"""
def what_is_this(color):
    if color == 'red':
        return 'tomato'
    elif color == 'green':
        return 'green pepper'
    else:
        return "I don't know"

result = what_is_this('red')
print(result)


================================================================================
☐ファイル: lesson4\c4_1_9.py
================================================================================

"""引数の型の宣言"""
def add_num(a: int, b: int):
    return a + b


================================================================================
 ファイル: lesson4\c4_1_10.py
================================================================================

"""返り値の型の宣言"""
def add_num(a: int, b: int) -> int:
    return a + b


================================================================================
☐ファイル: lesson4\c4_1_11.py
================================================================================

"""型が宣言された関数の呼び出し"""
def add_num(a: int, b: int) -> int:
    return a + b

r = add_num(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_1_12.py
================================================================================

"""型が宣言された関数の呼び出し"""
def add_num(a: int, b: int) -> int:
    return a + b

r = add_num('a', 'b')
print(r)


================================================================================
☐ファイル: lesson4\c4_1_13.py
================================================================================

"""位置引数"""
def menu(entree, drink, dessert):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu('beef', 'beer', 'ice')




================================================================================
☐ファイル: lesson4\c4_1_14.py
================================================================================

"""位置引数の順番"""
def menu(entree, drink, dessert):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu('beef', 'ice', 'beer')


================================================================================
☐ファイル: lesson4\c4_1_15.py
================================================================================

"""キーワード引数"""
def menu(entree, drink, dessert):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu(entree='beef', dessert='ice', drink='beer')


================================================================================
☐ファイル: lesson4\c4_1_16.py
================================================================================

"""位置引数とキーワード引数を混ぜて使う"""
def menu(entree, drink, dessert):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu('beef', dessert='ice', drink='beer')


================================================================================
☐ファイル: lesson4\c4_1_17.py
================================================================================

"""位置引数とキーワード引数を混ぜて使う"""
def menu(entree, drink, dessert):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu(dessert='ice', 'beef', drink='beer')




================================================================================
☐ファイル: lesson4\c4_1_18.py
================================================================================

"""デフォルト引数"""
def menu(entree='beef', drink='wine', dessert='ice'):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu()


================================================================================
☐ファイル: lesson4\c4_1_19.py
================================================================================

"""デフォルト引数を上書きする"""
def menu(entree='beef', drink='wine', dessert='ice'):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu(entree='chicken', drink='beer')



================================================================================
☐ファイル: lesson4\c4_1_20.py
================================================================================

"""位置引数とキーワード引数とデフォルト引数を混ぜて使う"""
def menu(entree='beef', drink='wine', dessert='ice'):
    print('entree = ', entree)
    print('drink = ', drink)
    print('dessert = ', dessert)

menu('chicken', drink='beer')




================================================================================
☐ファイル: lesson4\c4_1_21.py
================================================================================

"""デフォルト引数に空のリストを使う"""
def sample_func(x, l=[]):
    l.append(x)
    return l

y = [1, 2, 3]
r = sample_func(100, y)
print(r)

y = [1, 2, 3]
r = sample_func(200, y)
print(r)


================================================================================
☐ファイル: lesson4\c4_1_22.py
================================================================================

"""デフォルト引数に空のリストを使う"""
def sample_func(x, l=[]):
    l.append(x)
    return l

r = sample_func(100)
print(r)



================================================================================
☐ファイル: lesson4\c4_1_23.py
================================================================================

"""デフォルト引数に空のリストを使う"""
def sample_func(x, l=[]):
    l.append(x)
    return l

r = sample_func(100)
print(r)

r = sample_func(100)
print(r)


================================================================================
☐ファイル: lesson4\c4_1_24.py
================================================================================

"""デフォルト引数に空のリストではなくNoneを使う"""
def sample_func(x, l=None):
    if l is None:
        l = []
    l.append(x)
    return l

r = sample_func(100)
print(r)

r = sample_func(100)
print(r)


================================================================================
☐ファイル: lesson4\c4_1_25.py
================================================================================

"""複数の引数"""
def say_something(word, word2, word3):
    print(word)
    print(word2)
    print(word3)

say_something('Hi!', 'Mike', 'Nancy')




================================================================================
☐ファイル: lesson4\c4_1_26.py
================================================================================

"""位置引数のタプル化"""
def say_something(*args):
    print(args)

say_something('Hi!', 'Mike', 'Nancy')


================================================================================
☐ファイル: lesson4\c4_1_27.py
================================================================================

"""位置引数のタプル化"""
def say_something(*args):
    for arg in args:
        print(arg)

say_something('Hi!', 'Mike', 'Nancy')


================================================================================
☐ファイル: lesson4\c4_1_28.py
================================================================================

"""位置引数のタプル化"""
def say_something(word, *args):
    print('word =', word)
    for arg in args:
        print(arg)

say_something('Hi!', 'Mike', 'Nancy')


================================================================================
☐ファイル: lesson4\c4_1_29.py
================================================================================

"""タプルの引数をタプル化する"""
def say_something(word, *args):
    print('word =', word)
    for arg in args:
        print(arg)

t = ('Mike', 'Nancy')
say_something('Hi!', *t)




================================================================================
☐ファイル: lesson4\c4_1_30.py
================================================================================

"""キーワード引数"""
def menu(entree='beef', drink='wine'):
    print(entree, drink)

menu(entree='beef', drink='coffee')


================================================================================
☐ファイル: lesson4\c4_1_31.py
================================================================================

"""キーワード引数の辞書化"""
def menu(**kwargs):
    print(kwargs)

menu(entree='beef', drink='coffee')



================================================================================
☐ファイル: lesson4\c4_1_32.py
================================================================================

"""キーワード引数の辞書化"""
def menu(**kwargs):
    for k, v in kwargs.items():
        print(k, v)

menu(entree='beef', drink='coffee')


================================================================================
☐ファイル: lesson4\c4_1_33.py
================================================================================

"""キーワード引数の辞書化"""
def menu(**kwargs):
    for k, v in kwargs.items():
        print(k, v)

d = {
    'entree': 'beef',
    'drink': 'ice coffee',
    'dessert': 'ice',
}
menu(**d)



================================================================================
☐ファイル: lesson4\c4_1_34.py
================================================================================

"""位置引数とタプル化と辞書化"""
def menu(food, *args, **kwargs):
    print(food)
    print(args)
    print(kwargs)

menu('banana', 'apple', 'orange', entree='beef', drink='coffee')


================================================================================
☐ファイル: lesson4\c4_1_35.py
================================================================================

"""位置引数とタプル化と辞書化"""
def menu(food, **kwargs, *args):
    print(food)
    print(args)
    print(kwargs)

menu('banana', 'apple', 'orange', entree='beef', drink='coffee')


================================================================================
☐ファイル: lesson4\c4_1_36.py
================================================================================

"""関数の説明の出力"""
def example_func(param1, param2):
    """Example function with types documented in the docstring.

    Args:
        param1 (int): The first parameter.
        param2 (str): The second parameter.

    Returns:
        bool: The return value. True for success, False otherwise.

    """
    print(param1)
    print(param2)
    return True

print(example_func.__doc__)


================================================================================
☐ファイル: lesson4\c4_1_37.py
================================================================================

"""関数の説明の出力"""
def example_func(param1, param2):
    """Example function with types documented in the docstring.

    Args:
        param1 (int): The first parameter.
        param2 (str): The second parameter.

    Returns:
        bool: The return value. True for success, False otherwise.

    """
    print(param1)
    print(param2)
    return True

help(example_func)


================================================================================
☐ファイル: lesson4\c4_2_1.py
================================================================================

"""関数内関数"""
def outer(a, b):

    def plus(c, d):
        return c + d

    r = plus(a, b)
    print(r)

outer(1, 2)


================================================================================
☐ファイル: lesson4\c4_2_2.py
================================================================================

"""クロージャー"""
def outer(a, b):
    def inner():
        return a + b

    return inner

print(outer(1, 2))


================================================================================
☐ファイル: lesson4\c4_2_3.py
================================================================================

"""クロージャー"""
def outer(a, b):
    def inner():
        return a + b

    return inner

f = outer(1, 2)
r = f()
print(r)


================================================================================
☐ファイル: lesson4\c4_2_4.py
================================================================================

"""円の面積を求める - 2とおりの計算を実行する"""
def circle_area_func(pi):
    def circle_area(radius):
        return pi * radius * radius
    return circle_area

ca1 = circle_area_func(3.14)
ca2 = circle_area_func(3.14159)

print(ca1(10))
print(ca2(10))



================================================================================
☐ファイル: lesson4\c4_2_5.py
================================================================================

"""関数の実行前と実行後に処理を行う"""
def add_num(a, b):
    return a + b

print('start')
r = add_num(10, 20)
print('end')

print(r)


================================================================================
☐ファイル: lesson4\c4_2_6.py
================================================================================

"""デコレーターの実行"""
def print_info(func):
    def wrapper(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return wrapper

def add_num(a, b):
    return a + b


f = print_info(add_num)
r = f(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_2_7.py
================================================================================

"""デコレーターの簡単な指定"""
def print_info(func):
    def wrapper(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return wrapper

@print_info
def add_num(a, b):
    return a + b

r = add_num(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_2_8.py
================================================================================

"""デコレーター"""
def print_more(func):
    def wrapper(*args, **kwargs):
        print('func:', func.__name__)
        print('args:', args)
        print('kwargs', kwargs)
        result = func(*args, **kwargs)
        print('result:', result)
        return result
    return wrapper

@print_more
def add_num(a, b):
    return a + b

r = add_num(10, 20)
print(r)



================================================================================
☐ファイル: lesson4\c4_2_9.py
================================================================================

"""複数のデコレーター"""
def print_more(func):
    def wrapper(*args, **kwargs):
        print('func:', func.__name__)
        print('args:', args)
        print('kwargs', kwargs)
        result = func(*args, **kwargs)
        print('result:', result)
        return result
    return wrapper

def print_info(func):
    def wrapper(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return wrapper

@print_info
@print_more
def add_num(a, b):
    return a + b

r = add_num(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_2_10.py
================================================================================

"""複数のデコレーターの順番"""
def print_more(func):
    def wrapper(*args, **kwargs):
        print('func:', func.__name__)
        print('args:', args)
        print('kwargs', kwargs)
        result = func(*args, **kwargs)
        print('result:', result)
        return result
    return wrapper

def print_info(func):
    def wrapper(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return wrapper

@print_more
@print_info
def add_num(a, b):
    return a + b

r = add_num(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_2_11.py
================================================================================

"""@を使わない複数のデコレーターの書き方"""
def print_more(func):
    def wrapper(*args, **kwargs):
        print('func:', func.__name__)
        print('args:', args)
        print('kwargs', kwargs)
        result = func(*args, **kwargs)
        print('result:', result)
        return result
    return wrapper

def print_info(func):
    def wrapper(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return wrapper


def add_num(a, b):
    return a + b

r = add_num(10, 20)
f = print_info(print_more(add_num))
r = f(10, 20)
print(r)


================================================================================
☐ファイル: lesson4\c4_2_12.py
================================================================================

"""リストの要素に関数を適用する"""
l = ['Mon', 'tue', 'Wed', 'Thu', 'Fri', 'sat', 'Sun']

def change_words(words, func):
    for word in words:
        print(func(word))

def sample_func(word):
    return word.capitalize()

change_words(l, sample_func)


================================================================================
☐ファイル: lesson4\c4_2_13.py
================================================================================

"""lambda"""
l = ['Mon', 'tue', 'Wed', 'Thu', 'Fri', 'sat', 'Sun']

def change_words(words, func):
    for word in words:
        print(func(word))

sample_func = lambda word: word.capitalize()

change_words(l, sample_func)


================================================================================
☐ファイル: lesson4\c4_2_14.py
================================================================================

"""lambda"""
l = ['Mon', 'tue', 'Wed', 'Thu', 'Fri', 'sat', 'Sun']

def change_words(words, func):
    for word in words:
        print(func(word))

change_words(l, lambda word: word.capitalize())


================================================================================
☐ファイル: lesson4\c4_2_15.py
================================================================================

"""複数の簡単な関数を定義する"""
l = ['Mon', 'tue', 'Wed', 'Thu', 'Fri', 'sat', 'Sun']

def change_words(words, func):
    for word in words:
        print(func(word))

def sample_func(word):
    return word.capitalize()

def sample_func2(word):
    return word.lower()

change_words(l, sample_func)
change_words(l, sample_func2)


================================================================================
☐ファイル: lesson4\c4_2_16.py
================================================================================

"""lambdaで簡潔に書く"""
l = ['Mon', 'tue', 'Wed', 'Thu', 'Fri', 'sat', 'Sun']

def change_words(words, func):
    for word in words:
        print(func(word))

change_words(l, lambda word: word.capitalize())
change_words(l, lambda word: word.lower())




================================================================================
☐ファイル: lesson4\c4_2_17.py
================================================================================

"""イテレーター"""
l = ['Good morning', 'Good afternoon', 'Good night']

for i in l:
    print(i)


================================================================================
☐ファイル: lesson4\c4_2_18.py
================================================================================

"""ジェネレーター"""
def greeting():
    yield 'Good morning'
    yield 'Good afternoon'
    yield 'Good night'

for g in greeting():
    print(g)


================================================================================
☐ファイル: lesson4\c4_2_19.py
================================================================================

"""ジェネレーター"""
def greeting():
    yield 'Good morning'
    yield 'Good afternoon'
    yield 'Good night'

g = greeting()
print(next(g))
print('@@@@@')
print(next(g))
print('@@@@@')
print(next(g))


================================================================================
☐ファイル: lesson4\c4_2_20.py
================================================================================

"""ジェネレーター"""
def greeting():
    yield 'Good morning'
    yield 'Good afternoon'
    yield 'Good night'

g = greeting()
print(next(g))
print(next(g))
print(next(g))
print(next(g))


================================================================================
☐ファイル: lesson4\c4_2_21.py
================================================================================

"""ジェネレーター"""
def counter(num=10):
    for _ in range(num):
        yield 'run'

def greeting():
    yield 'Good morning'
    yield 'Good afternoon'
    yield 'Good night'

g = greeting()
c = counter()

print(next(g))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))

print(next(g))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))

print(next(g))


================================================================================
☐ファイル: lesson4\c4_2_22.py
================================================================================

"""ジェネレーター"""
def counter(num=10):
    for _ in range(num):
        yield 'run'

def greeting():
    yield 'Good morning'
    for i in range(1000000):
        print(i)
    yield 'Good afternoon'
    for i in range(1000000):
        print(i)
    yield 'Good night'

g = greeting()
c = counter()

print(next(g))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))

print(next(g))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))

print(next(g))


================================================================================
☐ファイル: lesson4\c4_3_1.py
================================================================================

"""タプルから要素を取り出してリストにする"""
t = (1, 2, 3, 4, 5)

r = []
for i in t:
    r.append(i)

print(r)


================================================================================
☐ファイル: lesson4\c4_3_2.py
================================================================================

"""リスト内包表記"""
t = (1, 2, 3, 4, 5)

r = [i for i in t]

print(r)


================================================================================
☐ファイル: lesson4\c4_3_3.py
================================================================================

"""タプルから偶数の要素を取り出してリストにする"""
t = (1, 2, 3, 4, 5)

r = []
for i in t:
    if i % 2 == 0:
        r.append(i)

print(r)

r = [i for i in t if i % 2 == 0]

print(r)


================================================================================
☐ファイル: lesson4\c4_3_4.py
================================================================================

"""2つのforループでリストを作成する"""
t = (1, 2, 3, 4, 5)
t2 = (5, 6, 7, 8, 9, 10)

r = []
for i in t:
    for j in t2:
        r.append(i * j)

print(r)


================================================================================
☐ファイル: lesson4\c4_3_5.py
================================================================================

"""2つのforループのリスト内包表記"""
t = (1, 2, 3, 4, 5)
t2 = (5, 6, 7, 8, 9, 10)

r = [i * j for i in t for j in t2]

print(r)


================================================================================
☐ファイル: lesson4\c4_3_6.py
================================================================================

"""2つのリストから辞書を作成する"""
w = ['mon', 'tue', 'wed']
f = ['coffee', 'milk', 'water']

d = {}
for x, y in zip(w, f):
    d[x] = y

print(d)


================================================================================
☐ファイル: lesson4\c4_3_7.py
================================================================================

"""辞書包括表記"""
w = ['mon', 'tue', 'wed']
f = ['coffee', 'milk', 'water']

d = {x: y for x, y in zip(w, f)}

print(d)


================================================================================
☐ファイル: lesson4\c4_3_8.py
================================================================================

"""forループで集合を作成する"""
s = set()

for i in range(10):
    s.add(i)

print(s)


================================================================================
☐ファイル: lesson4\c4_3_9.py
================================================================================

"""集合内包表記"""
s = {i for i in range(10)}
print(s)


================================================================================
☐ファイル: lesson4\c4_3_10.py
================================================================================

"""if文を使った集合内包表記"""
s = set()

for i in range(10):
    if i % 2 == 0:
        s.add(i)

print(s)

s = {i for i in range(10) if i % 2 == 0}
print(s)


================================================================================
☐ファイル: lesson4\c4_3_11.py
================================================================================

"""forループでジェネレーターを作成する"""
def g():
    for i in range(10):
        yield i

g = g()
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))


================================================================================
☐ファイル: lesson4\c4_3_12.py
================================================================================

"""ジェネレーター内包表記"""
g = (i for i in range(10))
print(type(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))


================================================================================
☐ファイル: lesson4\c4_3_13.py
================================================================================

"""内包表記でタプルを作成する"""
g = tuple(i for i in range(10))
print(type(g))
print(g)


================================================================================
☐ファイル: lesson4\c4_3_14.py
================================================================================

"""if文を使ったジェネレーター内包表記"""
g = (i for i in range(10) if i % 2 == 0)
for x in g:
    print(x)


================================================================================
☐ファイル: lesson4\c4_4_1.py
================================================================================

"""グローバル変数"""
animal = 'cat'

print(animal)


================================================================================
☐ファイル: lesson4\c4_4_2.py
================================================================================

"""関数内からグローバル変数を呼び出す"""
animal = 'cat'

def f():
    print(animal)

f()


================================================================================
☐ファイル: lesson4\c4_4_3.py
================================================================================

"""関数内でグローバル変数に値を入れる"""
animal = 'cat'

def f():
    print(animal)
    animal = 'dog'
    print('after:', animal)

f()


================================================================================
☐ファイル: lesson4\c4_4_4.py
================================================================================

"""関数内でグローバル変数に値を入れる"""
animal = 'cat'

def f():
    animal = 'dog'
    print('after:', animal)

f()
print('global:', animal)


================================================================================
☐ファイル: lesson4\c4_4_5.py
================================================================================

"""関数内でグローバル変数に値を入れる"""
animal = 'cat'

def f():
    global animal
    animal = 'dog'
    print('local:', animal)

f()
print('global:', animal)


================================================================================
☐ファイル: lesson4\c4_4_6.py
================================================================================

"""ローカル変数を出力する"""
def f():
    animal = 'dog'
    print('local:', locals())

f()


================================================================================
☐ファイル: lesson4\c4_4_7.py
================================================================================

"""ローカル変数を出力する"""
def f():
    print('local:', locals())

f()


================================================================================
☐ファイル: lesson4\c4_4_8.py
================================================================================

animal = 'cat'

print('global:', globals())


================================================================================
☐ファイル: lesson4\c4_4_9.py
================================================================================

""""
Test Test ###########################
"""
animal = 'cat'

print('global:', globals())


================================================================================
☐ファイル: lesson4\c4_4_10.py
================================================================================

"""__name__や__doc__を出力する"""
animal = 'cat'

def f():
    """Test func doc"""
    print(f.__name__)
    print(f.__doc__)

f()
print('global:', __name__)



================================================================================
☐ファイル: lesson4\c4_5_1.py
================================================================================

"""IndexError"""
l = [1, 2, 3]
i = 5
l[i]


================================================================================
☐ファイル: lesson4\c4_5_2.py
================================================================================

"""エラーハンドリング"""
l = [1, 2, 3]
i = 5
try:
    l[i]
except:
    print("Don't worry")

print("last")


================================================================================
☐ファイル: lesson4\c4_5_3.py
================================================================================

"""特定のエラーの処理"""
l = [1, 2, 3]
i = 5
try:
    l[i]
except IndexError:
    print("Don't worry")


================================================================================
☐ファイル: lesson4\c4_5_4.py
================================================================================

"""エラーの内容を表示"""
l = [1, 2, 3]
i = 5
try:
    l[i]
except IndexError as ex:
    print("Don't worry: {}".format(ex))


================================================================================
☐ファイル: lesson4\c4_5_5.py
================================================================================

"""異なるエラーの発生"""
l = [1, 2, 3]
i = 5
del l
try:
    l[i]
except IndexError as ex:
    print("Don't worry: {}".format(ex))


================================================================================
☐ファイル: lesson4\c4_5_6.py
================================================================================

"""特定のエラーの処理"""
l = [1, 2, 3]
i = 5
del l
try:
    l[i]
except IndexError as ex:
    print("Don't worry: {}".format(ex))
except NameError as ex:
    print(ex)


================================================================================
☐ファイル: lesson4\c4_5_7.py
================================================================================

"""Exception"""
l = [1, 2, 3]
i = 5
try:
    () + l
except IndexError as ex:
    print("Don't worry: {}".format(ex))
except NameError as ex:
    print(ex)
except Exception as ex:
    print("other:{}".format(ex))


================================================================================
☐ファイル: lesson4\c4_5_8.py
================================================================================

"""finally"""
l = [1, 2, 3]
i = 5
del l
try:
    l[i]
except IndexError as ex:
    print("Don't worry: {}".format(ex))
except NameError as ex:
    print(ex)
finally:
    print("clean up")


================================================================================
☐ファイル: lesson4\c4_5_9.py
================================================================================

"""finally"""
l = [1, 2, 3]
i = 5
try:
    l[i]
finally:
    print("clean up")


================================================================================
☐ファイル: lesson4\c4_5_10.py
================================================================================

"""else"""
l = [1, 2, 3]
i = 5

try:
    l[0]
except IndexError as ex:
    print("Don't worry: {}".format(ex))
except NameError as ex:
    print(ex)
else:
    print("done")
finally:
    print("clean up")


================================================================================
☐ファイル: lesson4\c4_5_11.py
================================================================================

"""raise"""
raise IndexError('test error')


================================================================================
☐ファイル: lesson4\c4_5_12.py
================================================================================

"""独自例外を発生させる"""
class UppercaseError(Exception):
    pass

def check():
    words = ['APPLE', 'orange', 'banana']
    for word in words:
        if word.isupper():
            raise UppercaseError(word)

check()


================================================================================
☐ファイル: lesson4\c4_5_13.py
================================================================================

"""独自例外を発生させる"""
class UppercaseError(Exception):
    pass

def check():
    words = ['APPLE', 'orange', 'banana']
    for word in words:
        if word.isupper():
            raise UppercaseError(word)

try:
    check()
except UppercaseError as exc:
    print('This is my fault. Go next')


================================================================================
☐ファイル: lesson4\c4_5_14.py
================================================================================

"""既存の例外を発生させる"""
def check():
    words = ['APPLE', 'orange', 'banana']
    for word in words:
        if word.isupper():
            raise ValueError(word)

try:
    check()
except ValueError as exc:
    print('This is my fault. Go next')


################################################################################
### lesson5 ###
################################################################################


================================================================================
☐ファイル: lesson5\__init__.py
================================================================================

"""__init__.py - アスタリスクを使ったモジュールの読み込み"""
__all__ = ['animal']


================================================================================
☐ファイル: lesson5\__pycache__\config.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\c5_1_1.py
================================================================================

"""printの処理を記述"""
print('test')


================================================================================
☐ファイル: lesson5\c5_1_2.py
================================================================================

"""引数を表示する"""
import sys

print(sys.argv)


================================================================================
☐ファイル: lesson5\c5_1_3.py
================================================================================

"""スクリプトの処理"""
import sys

for i in sys.argv:
    print(i)


================================================================================
☐ファイル: lesson5\c5_1_4.py
================================================================================

"""インポートした関数の呼び出し"""
import lesson_package.utils

r = lesson_package.utils.say_twice('hello')
print(r)



================================================================================
☐ファイル: lesson5\c5_1_5.py
================================================================================

"""fromを使ったモジュールの読み込み"""
from lesson_package import utils

r = utils.say_twice('hello')
print(r)


================================================================================
☐ファイル: lesson5\c5_1_6.py
================================================================================

"""関数だけをインポートする"""
from lesson_package.utils import say_twice

r = say_twice('hello')
print(r)


================================================================================
☐ファイル: lesson5\c5_1_7.py
================================================================================

""""asを使って読み込む"""
from lesson_package import utils as u

r = u.say_twice('hello')
print(r)


================================================================================
☐ファイル: lesson5\c5_1_8.py
================================================================================

"""モジュールの読み込み"""
from lesson_package.talk import human

print(human.sing())


================================================================================
☐ファイル: lesson5\c5_1_9.py
================================================================================

"""関数の呼び出し"""
from lesson_package.talk import human

print(human.cry())


================================================================================
☐ファイル: lesson5\c5_1_10.py
================================================================================

"""アスタリスクを使ったモジュールの読み込み"""
from lesson_package.talk import *

print(animal.sing())
print(animal.cry())



================================================================================
☐ファイル: lesson5\c5_1_11.py
================================================================================

"""アスタリスクを使ったモジュールの読み込み"""
from lesson_package.talk import *

print(animal.sing())
print(animal.cry())
print(human.sing())
print(human.cry())


================================================================================
☐ファイル: lesson5\c5_1_12.py
================================================================================

"""モジュールの読み込み"""
from lesson_package.tools import utils


================================================================================
☐ファイル: lesson5\c5_1_13.py
================================================================================

"""モジュールの読み込み"""
from lesson_package import utils


================================================================================
☐ファイル: lesson5\c5_1_14.py
================================================================================

"""try-except文を使ったモジュールの読み込み"""
try:
    from lesson_package import utils
except ImportError:
    from lesson_package.tools import utils


================================================================================
☐ファイル: lesson5\c5_2_1.py
================================================================================

"""globals()"""

print(globals())


================================================================================
☐ファイル: lesson5\c5_2_2.py
================================================================================

"""辞書型のキーを表示する"""

ranking = {
    'A': 100,
    'B': 85,
    'C': 92
}

for key in ranking:
    print(key)


================================================================================
☐ファイル: lesson5\c5_2_3.py
================================================================================

"""キーの順番で辞書型を並べ替える"""

ranking = {
    'A': 100,
    'B': 85,
    'C': 92
}

print(sorted(ranking))



================================================================================
☐ファイル: lesson5\c5_2_4.py
================================================================================

"""バリューの順番で辞書型を並べ替える"""
ranking = {
    'A': 100,
    'B': 85,
    'C': 92
}

print(sorted(ranking, key=ranking.get))


================================================================================
☐ファイル: lesson5\c5_2_5.py
================================================================================

"""get"""
ranking = {
    'A': 100,
    'B': 85,
    'C': 92
}

print(ranking.get('A'))


================================================================================
☐ファイル: lesson5\c5_2_6.py
================================================================================

"""バリューが高い順に辞書型を並べ替える"""
ranking = {
    'A': 100,
    'B': 85,
    'C': 92
}

print(sorted(ranking, key=ranking.get, reverse=True))


================================================================================
☐ファイル: lesson5\c5_2_7.py
================================================================================

"""文字列に含まれるアルファベットを数える"""
s = "fdjsafiewafjdsaeiwfdafke"

d = {}
for c in s:
    d[c] += 1
print(d)


================================================================================
☐ファイル: lesson5\c5_2_8.py
================================================================================

"""文字列に含まれるアルファベットを数える"""
s = "fdjsafiewafjdsaeiwfdafke"

d = {}
for c in s:
    if c not in d:
        d[c] = 0
    d[c] += 1
print(d)


================================================================================
☐ファイル: lesson5\c5_2_9.py
================================================================================

"""setdefault"""
s = "fdjsafiewafjdsaeiwfdafke"

d = {}
for c in s:
    d.setdefault(c, 0)
    d[c] += 1
print(d)


================================================================================
☐ファイル: lesson5\c5_2_10.py
================================================================================

"""defaultdict"""
s = "fdjsafiewafjdsaeiwfdafke"

from collections import defaultdict
d = defaultdict(int)
for c in s:
    d[c] += 1
print(d)


================================================================================
☐ファイル: lesson5\c5_2_11.py
================================================================================

"""出力する文字の色を赤くする"""
from termcolor import colored

print(colored('test', 'red'))


================================================================================
☐ファイル: lesson5\c5_2_12.py
================================================================================

"""サードパーティライブラリの関数の使い方を確認する"""
from termcolor import colored

print(help(colored))


================================================================================
☐ファイル: lesson5\c5_2_13.py
================================================================================

"""複数のライブラリのインポート"""
import collections, sys, os


================================================================================
☐ファイル: lesson5\c5_2_14.py
================================================================================

"""複数のライブラリのインポート"""
import collections
import os
import sys


================================================================================
☐ファイル: lesson5\c5_2_15.py
================================================================================

"""複数のライブラリのインポート"""
import collections
import os
import sys

import termcolor


================================================================================
☐ファイル: lesson5\c5_2_16.py
================================================================================

"""複数のライブラリのインポート"""
import collections
import os
import sys

import termcolor

import lesson_package


================================================================================
☐ファイル: lesson5\c5_2_17.py
================================================================================

"""複数のライブラリのインポート"""
import collections
import os
import sys

import termcolor

import lesson_package

import config


================================================================================
☐ファイル: lesson5\c5_2_18.py
================================================================================

"""ライブラリの場所を出力する"""
import collections

import termcolor

import lesson_package

import config

print(collections.__file__)
print(termcolor.__file__)
print(lesson_package.__file__)
print(config.__file__)


================================================================================
☐ファイル: lesson5\c5_2_19.py
================================================================================

"""python側がパッケージを読み込む場所を表示"""
import sys

print(sys.path)


================================================================================
☐ファイル: lesson5\c5_2_20.py
================================================================================

"""__name__の表示"""
print(__name__)


================================================================================
☐ファイル: lesson5\c5_2_21.py
================================================================================

"""config.pyの読み込み"""
import config

print('lesson:', __name__)


================================================================================
☐ファイル: lesson5\c5_2_22.py
================================================================================

"""animal.pyの読み込み"""
import lesson_package.talk.animal

print('lesson:', __name__)


================================================================================
☐ファイル: lesson5\c5_2_23.py
================================================================================

"""main関数を使った書き方"""
import lesson_package.talk.animal

def main():
    lesson_package.talk.animal.sing()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson5\config.py
================================================================================

"""__name__の出力"""
print('config:', __name__)


================================================================================
☐ファイル: lesson5\lesson_package\__init__.py
================================================================================




================================================================================
☐ファイル: lesson5\lesson_package\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe5 in position 8: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\lesson_package\talk\__init__.py
================================================================================

"""__init__.py - アスタリスクを使ったモジュールの読み込み"""

__all__ = ['animal']

# """__init__.py - アスタリスクを使ったモジュールの読み込み"""
#
# __all__ = ['animal']


================================================================================
☐ファイル: lesson5\lesson_package\talk\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\lesson_package\talk\__pycache__\animal.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\lesson_package\talk\__pycache__\human.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\lesson_package\talk\animal.py
================================================================================

"""関数の作成"""
from lesson_package.tools import utils

def sing():
    return '##fjiafiewafdafie'

def cry():
    return utils.say_twice('fjdsiafjdaofejwa')

"""printの処理を記述"""
# print(sing())
# print('animal:', __name__)

"""__name__の出力"""
# if __name__ == '__main__':
#     print(sing())
#     print('animal:', __name__)


================================================================================
☐ファイル: lesson5\lesson_package\talk\human.py
================================================================================

"""モジュールの読み込みと呼び出し"""
from lesson_package.tools import utils
# from ..tools import utils

def sing():
    return 'sing'

def cry():
    return utils.say_twice('cry')
    # return 'cry'


================================================================================
☐ファイル: lesson5\lesson_package\tools\__init__.py
================================================================================




================================================================================
☐ファイル: lesson5\lesson_package\tools\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson5\lesson_package\utils.py
================================================================================

"""関数の作成"""
def say_twice(word):
    return (word + '!') * 2


================================================================================
☐ファイル: lesson5\main.py
================================================================================

# これはサンプルの Python スクリプトです。

# ⌃R を押して実行するか、ご自身のコードに置き換えてください。
# ⇧ を2回押す を押すと、クラス/ファイル/ツールウィンドウ/アクション/設定を検索します。


def print_hi(name):
    # スクリプトをデバッグするには以下のコード行でブレークポイントを使用してください。
    print(f'Hi, {name}')  # ⌘F8を押すとブレークポイントを切り替えます。


# ガター内の緑色のボタンを押すとスクリプトを実行します。
if __name__ == '__main__':
    print_hi('PyCharm')

# PyCharm のヘルプは https://www.jetbrains.com/help/pycharm/ を参照してください



================================================================================
☐ファイル: lesson5\setup.py
================================================================================

"""手動で作成"""

from distutils.core import setup

setup(
    name='python_programming',
    version='1.0.0',
    packages=['lesson_package', 'lesson_package.talk', 'lesson_package.tools'],
    url='',
    license='Free',
    author='jsakai',
    author_email='',
    description='Sample package'
)


################################################################################
### lesson6 ###
################################################################################


================================================================================
☐ファイル: lesson6\c6_1_1.py
================================================================================

"""文字列のクラスとメソッドの確認"""
s = 'fdsfsafiefa'
print(s.capitalize())


================================================================================
☐ファイル: lesson6\c6_1_2.py
================================================================================

"""メソッドの実行"""
class Person(object):
        def say_something(self):
            print('hello')
    
person = Person()
person.say_something()


================================================================================
☐ファイル: lesson6\c6_1_3.py
================================================================================

"""初期化処理"""
class Person(object):
    def __init__(self):
        print('First')
    
person = Person()


================================================================================
☐ファイル: lesson6\c6_1_4.py
================================================================================

"""初期化処理"""
class Person(object):
    def __init__(self, name):
        self.name = name
        print(self.name)
    
person = Person('Mike')


================================================================================
☐ファイル: lesson6\c6_1_5.py
================================================================================

"""初期化時に引数を渡す"""
class Person(object):
    def __init__(self, name):
        self.name = name
        print(self.name)
    
person = Person()


================================================================================
☐ファイル: lesson6\c6_1_6.py
================================================================================

"""初期化処理にデフォルト引数を設定する"""
class Person(object):
    def __init__(self, name='Default'):
        self.name = name
        print(self.name)
    
person = Person()


================================================================================
☐ファイル: lesson6\c6_1_7.py
================================================================================

"""オブジェクトの変数を呼び出す"""
class Person(object):
    def __init__(self, name):
        self.name = name

    def say_something(self):
        print('I am {}. hello'.format(self.name))
    
person = Person('Mike')
person.say_something()


================================================================================
☐ファイル: lesson6\c6_1_8.py
================================================================================

"""自分自身のメソッドを呼び出す"""
class Person(object):
    def __init__(self, name):
        self.name = name

    def say_something(self):
        print('I am {}. hello'.format(self.name))
        self.run(10)

    def run(self, num):
        print('run' * num)

person = Person('Mike')
person.say_something()


================================================================================
☐ファイル: lesson6\c6_1_9.py
================================================================================

"""デストラクタ"""
class Person(object):
    def __init__(self, name):
        self.name = name

    def __del__(self):
        print('good bye')

person = Person('Mike')
print('##########')


================================================================================
☐ファイル: lesson6\c6_1_10.py
================================================================================

"""明示的にデストラクタを呼び出す"""
class Person(object):
    def __init__(self, name):
        self.name = name

    def __del__(self):
        print('good bye')

person = Person('Mike')
del person
print('##########')


================================================================================
☐ファイル: lesson6\c6_1_11.py
================================================================================

"""クラスの継承"""
class Car(object):
    pass

class MyCar(Car):
    pass


================================================================================
☐ファイル: lesson6\c6_1_12.py
================================================================================

"""継承したメソッドの実行"""
class Car(object):
    def run(self):
        print('run')

class MyCar(Car):
    pass

car = Car()
car.run()
my_car = MyCar()
my_car.run()


================================================================================
☐ファイル: lesson6\c6_1_13.py
================================================================================

"""クラスの継承"""
class Car(object):
    def run(self):
        print('run')

class AdvancedCar(Car):
    def auto_run(self):
        print('auto run')

advanced_car = AdvancedCar()
advanced_car.run()
advanced_car.auto_run()


================================================================================
☐ファイル: lesson6\c6_1_14.py
================================================================================

"""メソッドのオーバーライド"""
class Car(object):
    def run(self):
        print('run')

class MyCar(Car):
    def run(self):
        print('fast')

class AdvancedCar(Car):
    def run(self):
        print('super fast')

car = Car()
car.run()
print('##########')
my_car = MyCar()
my_car.run()
print('##########')
advanced_car = AdvancedCar()
advanced_car.run()


================================================================================
☐ファイル: lesson6\c6_1_15.py
================================================================================

"""親クラスで__init__を定義する"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class MyCar(Car):
    pass

class AdvancedCar(Car):
    pass

my_car = MyCar('sedan')
print(my_car.model)
advanced_car = AdvancedCar('SUV')
print(advanced_car.model)


================================================================================
☐ファイル: lesson6\c6_1_16.py
================================================================================

"""_init__のオーバーライド"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class MyCar(Car):
    pass

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        self.model = model
        self.enable_auto_run = enable_auto_run

my_car = MyCar('sedan')
print(my_car.model)
advanced_car = AdvancedCar('SUV')
print(advanced_car.model)


================================================================================
☐ファイル: lesson6\c6_1_17.py
================================================================================

"""superを使った継承元クラスのメソッドの実行"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class MyCar(Car):
    pass

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self.enable_auto_run = enable_auto_run

my_car = MyCar('sedan')
print(my_car.model)
advanced_car = AdvancedCar('SUV')
print(advanced_car.model)


================================================================================
☐ファイル: lesson6\c6_2_1.py
================================================================================

"""オブジェクトの変数を書き換える"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self.enable_auto_run = enable_auto_run

advanced_car = AdvancedCar('SUV')
advanced_car.enable_auto_run = True
print(advanced_car.enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_2.py
================================================================================

"""オブジェクトの変数に_をつける"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run

advanced_car = AdvancedCar('SUV')
advanced_car._enable_auto_run = True
print(advanced_car._enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_3.py
================================================================================

"""@propertyを使う"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
         return self._enable_auto_run

advanced_car = AdvancedCar('SUV')
print(advanced_car.enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_4.py
================================================================================

"""プロパティに値を設定する"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
         return self._enable_auto_run

advanced_car = AdvancedCar('SUV')
advanced_car.enable_auto_run = True


================================================================================
☐ファイル: lesson6\c6_2_5.py
================================================================================

"""セッターの使用"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
         return self._enable_auto_run

    @enable_auto_run.setter
    def enable_auto_run(self, is_enable):
        self._enable_auto_run = is_enable

advanced_car = AdvancedCar('SUV')
advanced_car.enable_auto_run = True
print(advanced_car.enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_6.py
================================================================================

"""セッターの使い方"""

class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV',
                 enable_auto_run=False,
                 passwd='123'):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run
        self.passwd = passwd

    @property
    def enable_auto_run(self):
         return self._enable_auto_run

    @enable_auto_run.setter
    def enable_auto_run(self, is_enable):
        if self.passwd == '456':
            self._enable_auto_run = is_enable
        else:
            raise ValueError

advanced_car = AdvancedCar('SUV', passwd='456')
advanced_car.enable_auto_run = True
print(advanced_car.enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_7.py
================================================================================

"""_をつけた変数にアクセスする"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self._enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
        return self._enable_auto_run

advanced_car = AdvancedCar('SUV')
print(advanced_car._enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_8.py
================================================================================

"""__をつけた変数にアクセスする"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self.__enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
        return self.__enable_auto_run

advanced_car = AdvancedCar('SUV')
print(advanced_car.__enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_9.py
================================================================================

"""__をつけた変数にクラス内からアクセスする"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self.__enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
        return self.__enable_auto_run

    def run(self):
        print(self.__enable_auto_run)
        print('super fast')

advanced_car = AdvancedCar('SUV')
advanced_car.run()


================================================================================
☐ファイル: lesson6\c6_2_10.py
================================================================================

"""オブジェクトにあとから変数を追加する"""
class T(object):
    pass

t = T()
t.name = 'Mike'
t.age = 20
print(t.name, t.age)


================================================================================
☐ファイル: lesson6\c6_2_11.py
================================================================================

"""__をつけた変数に値を入れる"""
class Car(object):
    def __init__(self, model=None):
        self.model = model

class AdvancedCar(Car):
    def __init__(self, model='SUV', enable_auto_run=False):
        super().__init__(model)
        self.__enable_auto_run = enable_auto_run

    @property
    def enable_auto_run(self):
        return self.__enable_auto_run

advanced_car = AdvancedCar('SUV')
advanced_car.__enable_auto_run = 'XXXXXXXXXX'
print(advanced_car.__enable_auto_run)


================================================================================
☐ファイル: lesson6\c6_2_12.py
================================================================================

"""babyを渡したdriveメソッド"""
class Car(object):
    def ride(self, person):
        person.drive()

class Person(object):
    def __init__(self, age=1):
        self.age = age

    def drive(self):
        if self.age >= 18:
            print('ok')
        else:
            raise Exception('No drive')

class Baby(Person):
    def __init__(self, age=1):
        if age < 18:
            super().__init__(age)
        else:
            raise ValueError

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

baby = Baby()
car = Car()
car.ride(baby)


================================================================================
☐ファイル: lesson6\c6_2_13.py
================================================================================

"""adultを渡したdriveメソッド"""
class Car(object):
    def ride(self, person):
        person.drive()

class Person(object):
    def __init__(self, age=1):
        self.age = age

    def drive(self):
        if self.age >= 18:
            print('ok')
        else:
            raise Exception('No drive')

class Baby(Person):
    def __init__(self, age=1):
        if age < 18:
            super().__init__(age)
        else:
            raise ValueError

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

adult = Adult()
car = Car()
car.ride(adult)


================================================================================
☐ファイル: lesson6\c6_2_14.py
================================================================================

"""adultでdriveメソッドを実行"""
class Person(object):
    def __init__(self, age=1):
        self.age = age

class Baby(Person):
    def __init__(self, age=1):
        if age < 18:
            super().__init__(age)
        else:
            raise ValueError

    def drive(self):
        raise Exception('No drive')

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

    def drive(self):
        print('ok')

adult = Adult()
adult.drive()


================================================================================
☐ファイル: lesson6\c6_2_15.py
================================================================================

"""babyでdriveメソッドを実行"""
class Person(object):
    def __init__(self, age=1):
        self.age = age

class Baby(Person):
    def __init__(self, age=1):
        if age < 18:
            super().__init__(age)
        else:
            raise ValueError

    def drive(self):
        raise Exception('No drive')

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

    def drive(self):
        print('ok')

baby = Baby()
baby.drive()


================================================================================
☐ファイル: lesson6\c6_2_16.py
================================================================================

"""メソッドがないとエラーになる"""
class Person(object):
    def __init__(self, age=1):
        self.age = age

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

adult = Adult()
adult.drive()


================================================================================
☐ファイル: lesson6\c6_2_17.py
================================================================================

"""継承先のクラスで抽象メソッドをオーバーライドしないとエラー"""
import abc

class Person(metaclass=abc.ABCMeta):
    def __init__(self, age=1):
        self.age = age

    @abc.abstractmethod
    def drive(self):
        pass

class Adult(Person):
    def __init__(self, age=18):
        if age >= 18:
            super().__init__(age)
        else:
            raise ValueError

adult = Adult()



================================================================================
☐ファイル: lesson6\c6_2_18.py
================================================================================

"""多重継承"""
class Person(object):
    def talk(self):
        print('talk')

class Car(object):
    def run(self):
        print('run')

class PersonCarRobot(Person, Car):
    def fly(self):
        print('fly')

person_car_robot = PersonCarRobot()
person_car_robot.talk()
person_car_robot.run()
person_car_robot.fly()


================================================================================
☐ファイル: lesson6\c6_2_19.py
================================================================================

"""多重継承の順番"""
class Person(object):
    def talk(self):
        print('talk')

    def run(self):
        print('person run')

class Car(object):
    def run(self):
        print('car run')

class PersonCarRobot(Person, Car):
    def fly(self):
        print('fly')

person_car_robot = PersonCarRobot()
person_car_robot.run()


================================================================================
☐ファイル: lesson6\c6_2_20.py
================================================================================

"""多重継承の順番"""
class Person(object):
    def talk(self):
        print('talk')

    def run(self):
        print('person run')

class Car(object):
    def run(self):
        print('car run')

class PersonCarRobot(Car, Person):
    def fly(self):
        print('fly')

person_car_robot = PersonCarRobot()
person_car_robot.run()


================================================================================
☐ファイル: lesson6\c6_2_21.py
================================================================================

"""オブジェクト間で共通するインスタンス変数"""
class Person(object):
    def __init__(self, name):
        self.kind = 'human'
        self.name = name

    def who_are_you(self):
        print(self.name, self.kind)

a = Person('A')
a.who_are_you()
b = Person('B')
b.who_are_you()


================================================================================
☐ファイル: lesson6\c6_2_22.py
================================================================================

"""クラス変数"""
class Person(object):
    kind = 'human'
    def __init__(self, name):
        self.name = name

    def who_are_you(self):
        print(self.name, self.kind)

a = Person('A')
a.who_are_you()
b = Person('B')
b.who_are_you()


================================================================================
☐ファイル: lesson6\c6_2_23.py
================================================================================

"""リストのクラス変数"""
class T(object):
    words = []

    def add_word(self, word):
        self.words.append(word)

c = T()
c.add_word('add 1')
c.add_word('add 2')

d = T()
d.add_word('add 3')
d.add_word('add 4')

print(c.words)


================================================================================
☐ファイル: lesson6\c6_2_24.py
================================================================================

"""クラス変数の初期化"""

class T(object):
    words = []

    def __init__(self):
        self.words = []

    def add_word(self, word):
        self.words.append(word)

c = T()
c.add_word('add 1')
c.add_word('add 2')

print(c.words)

d = T()
d.add_word('add 3')
d.add_word('add 4')

print(d.words)


================================================================================
☐ファイル: lesson6\c6_2_25.py
================================================================================

"""クラスの定義と利用"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

a = Person()
print(a)
b = Person
print(b)


================================================================================
☐ファイル: lesson6\c6_2_26.py
================================================================================

"""インスタンス変数の呼び出し"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

a = Person()
print(a.x)


================================================================================
☐ファイル: lesson6\c6_2_27.py
================================================================================

"""インスタンス変数の呼び出し"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

b = Person
print(b.x)


================================================================================
☐ファイル: lesson6\c6_2_28.py
================================================================================

"""クラス変数の呼び出し"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

a = Person()
print(a.kind)
b = Person
print(b.kind)


================================================================================
☐ファイル: lesson6\c6_2_29.py
================================================================================

"""オブジェクトからメソッドを実行"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

    def what_is_your_kind(self):
        return self.kind

a = Person()
print(a.what_is_your_kind())


================================================================================
☐ファイル: lesson6\c6_2_30.py
================================================================================

"""クラスからメソッドを実行"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

    def what_is_your_kind(self):
        return self.kind

b = Person
print(b.what_is_your_kind())


================================================================================
☐ファイル: lesson6\c6_2_31.py
================================================================================

"""クラスメソッド"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

    @classmethod
    def what_is_your_kind(cls):
        return cls.kind

a = Person()
print(a.what_is_your_kind())

b = Person
print(b.what_is_your_kind())


================================================================================
☐ファイル: lesson6\c6_2_32.py
================================================================================

"""クラスメソッド"""
class Person(object):
    kind = 'human'

    def __init__(self):
        self.x = 100

    @classmethod
    def what_is_your_kind(cls):
        return cls.kind

print(Person.kind)
print(Person.what_is_your_kind())


================================================================================
☐ファイル: lesson6\c6_2_33.py
================================================================================

"""スタティックメソッド"""
class Person(object):

    @staticmethod
    def about():
        print('about human')

Person.about()



================================================================================
☐ファイル: lesson6\c6_2_34.py
================================================================================

"""引数を取るスタティックメソッド"""
class Person(object):

    @staticmethod
    def about(year):
        print('about human {}'.format(year))

Person.about(1999)


================================================================================
☐ファイル: lesson6\c6_2_35.py
================================================================================

"""関数として定義"""
def about(year):
    print('about human {}'.format(year))

class human(object):
    pass

about(1999)


================================================================================
☐ファイル: lesson6\c6_2_36.py
================================================================================

"""__str__"""
class Word(object):
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return 'word!!!!!!'

w = Word('test')
print(w)


================================================================================
☐ファイル: lesson6\c6_2_37.py
================================================================================

"""__len__"""
class Word(object):
    def __init__(self, text):
        self.text = text

    def __len__(self):
        return len(self.text)

w = Word('test')
print(len(w))


================================================================================
☐ファイル: lesson6\c6_2_38.py
================================================================================

"""__add__"""
class Word(object):
    def __init__(self, text):
        self.text = text

    def __add__(self, word):
        return self.text.lower() + word.text.lower()

w = Word('TEST')
w2 = Word('#############')
print(w + w2)


================================================================================
☐ファイル: lesson6\c6_2_39.py
================================================================================

"""オブジェクトの比較"""
class Word(object):
    def __init__(self, text):
        self.text = text

w = Word('test')
w2 = Word('test')
print(w == w2)
print(id(w))
print(id(w2))


================================================================================
☐ファイル: lesson6\c6_2_40.py
================================================================================

"""__eq__"""
class Word(object):
    def __init__(self, text):
        self.text = text

    def __eq__(self, word):
        return self.text.lower() == word.text.lower()

w = Word('test')
w2 = Word('test')
print(w == w2)


################################################################################
### lesson7 ###
################################################################################


================================================================================
☐ファイル: lesson7\c7_1_1.py
================================================================================

"""ファイルを作成して書き込む"""
f = open('test.txt', 'w')
f.write('test')
f.close()


================================================================================
☐ファイル: lesson7\c7_1_2.py
================================================================================

"""ファイルを作成して書き込む"""
f = open('test.txt', 'w')
f.write('Test')
f.close()


================================================================================
☐ファイル: lesson7\c7_1_3.py
================================================================================

"""ファイルを作成して書き込む"""
f = open('test.txt', 'a')
f.write('Test')
f.close()


================================================================================
☐ファイル: lesson7\c7_1_4.py
================================================================================

"""ファイルを作成して書き込む"""
f = open('test.txt', 'w')
f.write('Test\n')
print('I am print', file=f)
f.close()


================================================================================
☐ファイル: lesson7\c7_1_5.py
================================================================================

"""ファイルを作成して書き込む"""
f = open('test.txt', 'w')
f.write('Test\n')
print('My', 'name', 'is', 'Mike', sep='#', end='!', file=f)
f.close()


================================================================================
☐ファイル: lesson7\c7_1_6.py
================================================================================

"""with文でファイルをopenする"""
with open('test.txt', 'w') as f:
    f.write('Test')


================================================================================
☐ファイル: lesson7\c7_1_7.py
================================================================================

"""ファイルを用意する"""
s = """\
AAA
BBB
CCC
DDD
"""

with open('test.txt', 'w') as f:
    f.write(s)


================================================================================
☐ファイル: lesson7\c7_1_8.py
================================================================================

"""ファイルを読み込む"""
with open('test.txt', 'r') as f:
    print(f.read())


================================================================================
☐ファイル: lesson7\c7_1_9.py
================================================================================

"""ファイルを1行ずつ読み込む"""
with open('test.txt', 'r') as f:
    while True:
        line = f.readline()
        print(line)
        if not line:
            break


================================================================================
☐ファイル: lesson7\c7_1_10.py
================================================================================

"""ファイルを1行ずつ読み込む"""
with open('test.txt', 'r') as f:
    while True:
        line = f.readline()
        print(line, end='')
        if not line:
            break


================================================================================
☐ファイル: lesson7\c7_1_11.py
================================================================================

"""ファイルをチャンクごとに読み込む"""
with open('test.txt', 'r') as f:
    while True:
        chunk = 2
        line = f.read(chunk)
        print(line)
        if not line:
            break


================================================================================
☐ファイル: lesson7\c7_1_12.py
================================================================================

"""ファイルの現在位置を確認する"""
with open('test.txt', 'r') as f:
    print(f.tell())


================================================================================
☐ファイル: lesson7\c7_1_13.py
================================================================================

"""ファイルの現在位置を確認する"""
with open('test.txt', 'r') as f:
    print(f.tell())
    print(f.read(1))


================================================================================
☐ファイル: lesson7\c7_1_14.py
================================================================================

"""seek"""
with open('test.txt', 'r') as f:
    f.seek(5)
    print(f.read(1))


================================================================================
☐ファイル: lesson7\c7_1_15.py
================================================================================

"""seek"""
with open('test.txt', 'r') as f:
    f.seek(14)
    print(f.read(1))
    f.seek(15)
    print(f.read(1))
    f.seek(5)
    print(f.read(1))


================================================================================
☐ファイル: lesson7\c7_1_16.py
================================================================================

"""'w'でopenしたファイルを読み込む"""
s = """\
AAA
BBB
CCC
DDD
"""
with open('test.txt', 'w') as f:
    f.write(s)
    print(f.read())


================================================================================
☐ファイル: lesson7\c7_1_17.py
================================================================================

"""'w+'でopen"""
s = """\
AAA
BBB
CCC
DDD
"""
with open('test.txt', 'w+') as f:
    f.write(s)
    print(f.read())


================================================================================
☐ファイル: lesson7\c7_1_18.py
================================================================================

"""'w+'でopen"""
s = """\
AAA
BBB
CCC
DDD
"""
with open('test.txt', 'w+') as f:
    f.write(s)
    f.seek(0)
    print(f.read())


================================================================================
☐ファイル: lesson7\c7_1_19.py
================================================================================

"""'r+'でopen"""
s = """\
AAA
BBB
CCC
DDD
"""
with open('test.txt', 'r+') as f:
    print(f.read())
    f.seek(0)
    f.write(s)


================================================================================
☐ファイル: lesson7\c7_1_20.py
================================================================================

"""'r+'でopen"""
s = """\
AAA
BBB
CCC
DDD
"""
with open('test2.txt', 'r+') as f:
    print(f.read())
    f.seek(0)
    f.write(s)


================================================================================
☐ファイル: lesson7\c7_2_1.py
================================================================================

"""テンプレートを使って文章を作成"""
import string

s = """\
Hi $name.
$contents
Have a good day
"""

t = string.Template(s)
contents = t.substitute(name='Mike', contents='How are you?')
print(contents)


================================================================================
☐ファイル: lesson7\c7_2_2.py
================================================================================

"""テキストファイルをテンプレートとして読み込む"""
import string

with open('design/email_template.txt') as f:
    t = string.Template(f.read())

contents = t.substitute(name='Mike', contents='How are you?')
print(contents)


================================================================================
☐ファイル: lesson7\c7_2_3.py
================================================================================

"""CSVファイルを作成する"""
import csv

with open('test.csv', 'w') as csv_file:
    fieldnames = ['Name', 'Count']
    writer = csv.DictWriter(csv_file, fieldnames)
    writer.writeheader()


================================================================================
☐ファイル: lesson7\c7_2_4.py
================================================================================

"""CSVファイルを作成する"""
import csv

with open('test.csv', 'w') as csv_file:
    fieldnames = ['Name', 'Count']
    writer = csv.DictWriter(csv_file, fieldnames)
    writer.writeheader()
    writer.writerow({'Name': 'A', 'Count': '1'})
    writer.writerow({'Name': 'B', 'Count': '2'})


================================================================================
☐ファイル: lesson7\c7_2_5.py
================================================================================

"""CSVファイルを読み込む"""
import csv

with open('test.csv', 'w') as csv_file:
    fieldnames = ['Name', 'Count']
    writer = csv.DictWriter(csv_file, fieldnames)
    writer.writeheader()
    writer.writerow({'Name': 'A', 'Count': '1'})
    writer.writerow({'Name': 'B', 'Count': '2'})

with open('test.csv', 'r',) as csv_file:
    reader = csv.DictReader(csv_file)
    for row in reader:
        print(row['Name'], row['Count'])


================================================================================
☐ファイル: lesson7\c7_2_6.py
================================================================================

"""ファイルの存在を確認する"""
import os

print(os.path.exists('test.txt'))


================================================================================
☐ファイル: lesson7\c7_2_7.py
================================================================================

"""ファイルかどうかを確認する"""
import os
print(os.path.isfile('test.txt'))


================================================================================
☐ファイル: lesson7\c7_2_8.py
================================================================================

"""ディレクトリかどうかを確認する"""
import os
print(os.path.isdir('design'))


================================================================================
☐ファイル: lesson7\c7_2_9.py
================================================================================

"""ファイル名を変更する"""
import os
os.rename('test.txt', 'renamed.txt')


================================================================================
☐ファイル: lesson7\c7_2_10.py
================================================================================

"""シンボリックリンクを作成する"""
import os
os.symlink('renamed.txt', 'symlink.txt')


================================================================================
☐ファイル: lesson7\c7_2_11.py
================================================================================

"""ディレクトリを作成する"""
import os
os.mkdir('test_dir')


================================================================================
☐ファイル: lesson7\c7_2_12.py
================================================================================

"""ディレクトリを削除する"""
import os
os.rmdir('test_dir')


================================================================================
☐ファイル: lesson7\c7_2_13.py
================================================================================

"""中身が空のファイルを作成する"""
import pathlib

pathlib.Path('empty.txt').touch()


================================================================================
☐ファイル: lesson7\c7_2_14.py
================================================================================

"""ファイルを削除する"""
import os

os.remove('empty.txt')


================================================================================
☐ファイル: lesson7\c7_2_15.py
================================================================================

"""ディレクトリの中のディレクトリを調べる"""
import os

os.mkdir('test_dir')
os.mkdir('test_dir/test_dir2')
print(os.listdir('test_dir'))


================================================================================
☐ファイル: lesson7\c7_2_16.py
================================================================================

"""ディレクトリの中のファイルを調べる"""
import pathlib
import glob

pathlib.Path('test_dir/test_dir2/empty.txt').touch()
print(glob.glob('test_dir/test_dir2/*'))


================================================================================
☐ファイル: lesson7\c7_2_17.py
================================================================================

"""ファイルをコピー"""
import shutil
import glob

shutil.copy('test_dir/test_dir2/empty.txt', 'test_dir/test_dir2/empty2.txt')
print(glob.glob('test_dir/test_dir2/*'))


================================================================================
☐ファイル: lesson7\c7_2_18.py
================================================================================

"""ディレクトリの中身ごと削除"""
import shutil

shutil.rmtree('test_dir')


================================================================================
☐ファイル: lesson7\c7_3_1.py
================================================================================

"""tarファイルを作成"""
import tarfile

with tarfile.open('test.tar.gz', 'w:gz') as tr:
    tr.add('test_dir')


================================================================================
☐ファイル: lesson7\c7_3_2.py
================================================================================

"""tarファイルを展開"""
import tarfile

with tarfile.open('test.tar.gz', 'r:gz') as tr:
    tr.extractall('test_tar')


================================================================================
☐ファイル: lesson7\c7_3_3.py
================================================================================

"""tarファイルの中身を確認"""
import tarfile

with tarfile.open('test.tar.gz', 'r:gz') as tr:
    with tr.extractfile('test_dir/sub_dir/sub_test.txt') as f:
        print(f.read())


================================================================================
☐ファイル: lesson7\c7_3_4.py
================================================================================

"""zipファイルを作成"""
import zipfile

with zipfile.ZipFile('test.zip', 'w') as z:
    z.write('test_dir')
    z.write('test_dir/test.txt')


================================================================================
☐ファイル: lesson7\c7_3_5.py
================================================================================

"""zipファイルを作成"""
import zipfile
import glob

with zipfile.ZipFile('test.zip', 'w') as z:
    for f in glob.glob('test_dir/**', recursive=True):
        print(f)
        z.write(f)


================================================================================
☐ファイル: lesson7\c7_3_6.py
================================================================================

"""zipファイルを展開"""
import zipfile

with zipfile.ZipFile('test.zip', 'r') as z:
    z.extractall('zzz2')


================================================================================
☐ファイル: lesson7\c7_3_7.py
================================================================================

"""zipファイルの中身を確認"""
import zipfile

with zipfile.ZipFile('test.zip', 'r') as z:
    with z.open('test_dir/test.txt') as f:
        print(f.read())


================================================================================
☐ファイル: lesson7\c7_4_1.py
================================================================================

"""処理終了後に消去される一時ファイルを作成"""
import tempfile

with tempfile.TemporaryFile(mode='w+') as t:
    t.write('hello')
    t.seek(0)
    print(t.read())


================================================================================
☐ファイル: lesson7\c7_4_2.py
================================================================================

"""処理終了後も残る一時ファイルを作成"""
import tempfile

with tempfile.NamedTemporaryFile(delete=False) as t:
    print(t.name)
    with open(t.name, 'w+') as f:
        f.write('test\n')
        f.seek(0)
        print(f.read())


================================================================================
☐ファイル: lesson7\c7_4_3.py
================================================================================

"""処理終了後に消去される一時ディレクトリを作成"""
import tempfile

with tempfile.TemporaryDirectory() as td:
    print(td)


================================================================================
☐ファイル: lesson7\c7_4_4.py
================================================================================

"""処理終了後も残る一時ディレクトリを作成"""
import tempfile

with tempfile.TemporaryDirectory() as td:
    print(td)

temp_dir = tempfile.mkdtemp()
print(temp_dir)


================================================================================
☐ファイル: lesson7\c7_4_5.py
================================================================================

"""コマンドの実行"""
import subprocess

subprocess.run(['ls'])


================================================================================
☐ファイル: lesson7\c7_4_6.py
================================================================================

"""オプションを指定したコマンドの実行"""
import subprocess

subprocess.run(['ls', '-al'])


================================================================================
☐ファイル: lesson7\c7_4_7.py
================================================================================

"""osライブラリを使ったコマンドの実行"""
import os

os.system('ls')


================================================================================
☐ファイル: lesson7\c7_4_8.py
================================================================================

"""shell=Trueを用いたコマンドの実行"""
import subprocess

subprocess.run('ls -al', shell=True)


================================================================================
☐ファイル: lesson7\c7_4_9.py
================================================================================

"""パイプラインの実行"""
import subprocess

subprocess.run('ls -al | grep test', shell=True)


================================================================================
☐ファイル: lesson7\c7_4_10.py
================================================================================

"""コマンド実行時のエラー"""
import subprocess

subprocess.run('lsa', shell=True)
print('###')


================================================================================
☐ファイル: lesson7\c7_4_11.py
================================================================================

"""コマンド実行時のエラー"""
import subprocess

r = subprocess.run('lsa', shell=True)
print(r.returncode)


================================================================================
☐ファイル: lesson7\c7_4_12.py
================================================================================

"""コマンド実行時のエラー"""
import subprocess

subprocess.run('lsa', shell=True, check=True)


================================================================================
☐ファイル: lesson7\c7_4_13.py
================================================================================

"""コマンド実行時のエラー"""
import subprocess

subprocess.run(['lsa'])


================================================================================
☐ファイル: lesson7\c7_4_14.py
================================================================================

"""Popenを使ったパイプラインの実行"""
import subprocess

p1 = subprocess.Popen(['ls', '-al'], stdout=subprocess.PIPE)
p2 = subprocess.Popen(['grep', 'test'], stdin=p1.stdout, stdout=subprocess.PIPE)
p1.stdout.close()
output = p2.communicate()[0]
print(output)


================================================================================
☐ファイル: lesson7\c7_4_15.py
================================================================================

"""時間の表示"""
import datetime

now = datetime.datetime.now()
print(now)
print(now.isoformat())


================================================================================
☐ファイル: lesson7\c7_4_16.py
================================================================================

"""時間の表示"""
import datetime

now = datetime.datetime.now()
print(now.strftime('%d/%m/%y-%H%M%S%f'))


================================================================================
☐ファイル: lesson7\c7_4_17.py
================================================================================

"""年月日の表示"""
import datetime

today = datetime.date.today()
print(today)
print(today.isoformat())
print(today.strftime('%d/%m/%y'))


================================================================================
☐ファイル: lesson7\c7_4_18.py
================================================================================

"""任意の時刻の表示"""
import datetime

t = datetime.time(hour=1, minute=10, second=5, microsecond=100)
print(t)
print(t.isoformat())
print(t.strftime('%H%M%S%f'))


================================================================================
☐ファイル: lesson7\c7_4_19.py
================================================================================

"""時間の計算"""
import datetime

now = datetime.datetime.now()
print(now)
d = datetime.timedelta(weeks=-1)
print(now + d)


================================================================================
☐ファイル: lesson7\c7_4_20.py
================================================================================

"""時間の計算"""
import datetime

now = datetime.datetime.now()
print(now)
d = datetime.timedelta(weeks=1)
print(now - d)


================================================================================
☐ファイル: lesson7\c7_4_21.py
================================================================================

"""時間の計算"""
import datetime

now = datetime.datetime.now()
print(now)
d = datetime.timedelta(days=365)
print(now - d)


================================================================================
☐ファイル: lesson7\c7_4_22.py
================================================================================

"""sleep"""
import time

print('#####')
time.sleep(2)
print('#####')


================================================================================
☐ファイル: lesson7\c7_4_23.py
================================================================================

"""エポックタイム"""
import time

print(time.time())


================================================================================
☐ファイル: lesson7\c7_4_24.py
================================================================================

"""時間をファイル名に含んだバックアップファイルの作成"""
import os
import shutil
import datetime

now = datetime.datetime.now()

file_name = 'test.txt'

if os.path.exists(file_name):
    shutil.copy(file_name, "{}.{}".format(
        file_name, now.strftime('%Y_%m_%d_%H_%M_%S')))

with open(file_name, 'w') as f:
    f.write('test')


================================================================================
☐ファイル: lesson7\design\email_template.txt
================================================================================

Hi $name.
$contents
Have a good day


================================================================================
☐ファイル: lesson7\renamed.txt
================================================================================

AAA
BBB
CCC
DDD



================================================================================
☐ファイル: lesson7\symlink.txt
================================================================================

renamed.txt


================================================================================
☐ファイル: lesson7\test.csv
================================================================================

Name,Count
A,1
B,2



================================================================================
☐ファイル: lesson7\test.tar.gz
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0x8b in position 1: illegal multibyte sequence]


================================================================================
☐ファイル: lesson7\test.zip
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0x82 in position 101: illegal multibyte sequence]


================================================================================
☐ファイル: lesson7\test_dir\sub_dir\sub_test.txt
================================================================================

sub


================================================================================
☐ファイル: lesson7\test_dir\test.txt
================================================================================

test


================================================================================
☐ファイル: lesson7\test_tar\test_dir\sub_dir\sub_test.txt
================================================================================

sub


================================================================================
☐ファイル: lesson7\test_tar\test_dir\text.txt
================================================================================

test


================================================================================
☐ファイル: lesson7\zzz2\test_dir\sub_dir\sub_test.txt
================================================================================

sub


================================================================================
☐ファイル: lesson7\zzz2\test_dir\test.txt
================================================================================

test


################################################################################
### lesson8 ###
################################################################################


================================================================================
☐ファイル: lesson8\__init__.py
================================================================================




================================================================================
☐ファイル: lesson8\main.py
================================================================================

import roboter.controller.conversation
roboter.controller.conversation.talk_about_restaurant()



================================================================================
☐ファイル: lesson8\PKG-INFO
================================================================================

Metadata-Version: 1.0
Name: python_programming_demo_app
Version: 0.0.1
Summary: UNKNOWN
Home-page: http://sakaijunsoccer.appspot.com
Author: jsakai
Author-email: example@example.com
License: MIT
Description-Content-Type: UNKNOWN
Description: Roboter
        ====
        
        ## Install
        
        1. 以下のようにパーケージをインストールするか、もしくはroboterフォルダーを実行するディレクトリへ置いてください。
        $ python setup.py develop
        
        or
        
        $ ls
        roboter
        
        
        ## Requirement
        pip install termcolor==1.1.0
        
        
        ## Usage
        
        1. 以下のようにtalk_about_restaurant関数を呼び出すと実行可能です。
        
        # vim main.py
        import roboter.controller.conversation
        roboter.controller.conversation.talk_about_restaurant()
        
        2. 実行して下さい。
        $ python main.py
        
        (オプション: 保存するCSVやテンプレート先を変更する場合は、settings.pyに以下の値を入れる。)
        # vim settings.py
        CSV_FILE_PATH = '/tmp/test.csv'
        TEMPLATE_PATH = '/tmp/templates/'
        
        # settings.pyファイルを作成した場合は、変更しない場合のDefaultは以下に設定する
        CSV_FILE_PATH = None
        TEMPLATE_PATH = None
        
        
Platform: UNKNOWN



================================================================================
☐ファイル: lesson8\ranking.csv
================================================================================

NAME,COUNT
Japanese Apple,1
American Orange,1



================================================================================
☐ファイル: lesson8\README.txt
================================================================================

﻿Roboter
====

## Install

1. 以下のようにパーケージをインストールするか、もしくはroboterフォルダーを実行するディレクトリへ置いてください。
$ python setup.py develop

or

$ ls
roboter


## Requirement
pip install termcolor==1.1.0


## Usage

1. 以下のようにtalk_about_restaurant関数を呼び出すと実行可能です。

# vim main.py
import roboter.controller.conversation
roboter.controller.conversation.talk_about_restaurant()

2. 実行して下さい。
$ python main.py

オプション: 保存するCSVやテンプレート先を変更する場合は、settings.pyに以下の値を入れる
# vim settings.py
CSV_FILE_PATH = '/tmp/test.csv'
TEMPLATE_PATH = '/tmp/templates/'

# settings.pyファイルを作成した場合は、変更しない場合のDefaultは以下に設定する
CSV_FILE_PATH = None
TEMPLATE_PATH = None




================================================================================
☐ファイル: lesson8\roboter\__init__.py
================================================================================




================================================================================
☐ファイル: lesson8\roboter\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\controller\__init__.py
================================================================================




================================================================================
☐ファイル: lesson8\roboter\controller\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\controller\__pycache__\conversation.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\controller\conversation.py
================================================================================

"""Controller for speaking with robot"""
from roboter.models import robot


def talk_about_restaurant():
    """Function to speak with robot"""
    restaurant_robot = robot.RestaurantRobot()
    restaurant_robot.hello()
    restaurant_robot.recommend_restaurant()
    restaurant_robot.ask_user_favorite()
    restaurant_robot.thank_you()




================================================================================
☐ファイル: lesson8\roboter\models\__init__.py
================================================================================




================================================================================
☐ファイル: lesson8\roboter\models\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\models\__pycache__\ranking.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\models\__pycache__\robot.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\models\ranking.py
================================================================================

"""Generates ranking model to write to CSV

TODO (jsakai) Rewrite to DB instead of CSV
"""
import collections
import csv
import os
import pathlib


RANKING_COLUMN_NAME = 'NAME'
RANKING_COLUMN_COUNT = 'COUNT'
RANKING_CSV_FILE_PATH = 'ranking.csv'


class CsvModel(object):
    """Base csv model."""
    def __init__(self, csv_file):
        self.csv_file = csv_file
        if not os.path.exists(csv_file):
            pathlib.Path(csv_file).touch()


class RankingModel(CsvModel):
    """Definition of class that generates ranking model to write to CSV"""
    def __init__(self, csv_file=None, *args, **kwargs):
        if not csv_file:
            csv_file = self.get_csv_file_path()
        super().__init__(csv_file, *args, **kwargs)
        self.column = [RANKING_COLUMN_NAME, RANKING_COLUMN_COUNT]
        self.data = collections.defaultdict(int)
        self.load_data()

    def get_csv_file_path(self):
        """Set csv file path.

        Use csv path if set in settings, otherwise use default
        """
        csv_file_path = None
        try:
            import settings
            if settings.CSV_FILE_PATH:
                csv_file_path = settings.CSV_FILE_PATH
        except ImportError:
            pass

        if not csv_file_path:
            csv_file_path = RANKING_CSV_FILE_PATH
        return csv_file_path

    def load_data(self):
        """Load csv data.

        Returns:
            dict: Returns ranking data of dict type.
        """
        with open(self.csv_file, 'r+') as csv_file:
            reader = csv.DictReader(csv_file)
            for row in reader:
                self.data[row[RANKING_COLUMN_NAME]] = int(
                    row[RANKING_COLUMN_COUNT])
        return self.data

    def save(self):
        """Save data to csv file."""
        # TODO (jsakai) Use locking mechanism for avoiding dead lock issue
        with open(self.csv_file, 'w+') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=self.column)
            writer.writeheader()

            for name, count in self.data.items():
                writer.writerow({
                    RANKING_COLUMN_NAME: name,
                    RANKING_COLUMN_COUNT: count
                })

    def get_most_popular(self, not_list=None):
        """Fetch the data of the top ranking.

        Args:
            not_list (list): Excludes the name on the list.

        Returns:
            str: Returns the data of the top ranking
        """
        if not_list is None:
            not_list = []

        if not self.data:
            return None

        sorted_data = sorted(self.data, key=self.data.get, reverse=True)
        for name in sorted_data:
            if name in not_list:
                continue
            return name

    def increment(self, name):
        """Increase rank for the give name."""
        self.data[name.title()] += 1
        self.save()



================================================================================
☐ファイル: lesson8\roboter\models\robot.py
================================================================================

"""Defined a robot model """
from roboter.models import ranking
from roboter.views import console


DEFAULT_ROBOT_NAME = 'Roboko'


class Robot(object):
    """Base model for Robot."""

    def __init__(self, name=DEFAULT_ROBOT_NAME, user_name='',
                 speak_color='green'):
        self.name = name
        self.user_name = user_name
        self.speak_color = speak_color

    def hello(self):
        """Returns words to the user that the robot speaks at the beginning."""
        while True:
            template = console.get_template('hello.txt', self.speak_color)
            user_name = input(template.substitute({
                'robot_name': self.name}))

            if user_name:
                self.user_name = user_name.title()
                break


class RestaurantRobot(Robot):
    """Handle data model on restaurant."""

    def __init__(self, name=DEFAULT_ROBOT_NAME):
        super().__init__(name=name)
        self.ranking_model = ranking.RankingModel()

    def _hello_decorator(func):
        """Decorator to say a greeting if you are not greeting the user."""
        def wrapper(self):
            if not self.user_name:
                self.hello()
            return func(self)
        return wrapper

    @_hello_decorator
    def recommend_restaurant(self):
        """Show restaurant recommended restaurant to the user."""
        new_recommend_restaurant = self.ranking_model.get_most_popular()
        if not new_recommend_restaurant:
            return None

        will_recommend_restaurants = [new_recommend_restaurant]
        while True:
            template = console.get_template('greeting.txt', self.speak_color)
            is_yes = input(template.substitute({
                'robot_name': self.name,
                'user_name': self.user_name,
                'restaurant': new_recommend_restaurant
            }))

            if is_yes.lower() == 'y' or is_yes.lower() == 'yes':
                break

            if is_yes.lower() == 'n' or is_yes.lower() == 'no':
                new_recommend_restaurant = self.ranking_model.get_most_popular(
                    not_list=will_recommend_restaurants)
                if not new_recommend_restaurant:
                    break
                will_recommend_restaurants.append(new_recommend_restaurant)

    @_hello_decorator
    def ask_user_favorite(self):
        """Collect favorite restaurant information from users."""
        while True:
            template = console.get_template(
                'which_restaurant.txt', self.speak_color)
            restaurant = input(template.substitute({
                'robot_name': self.name,
                'user_name': self.user_name,
            }))
            if restaurant:
                self.ranking_model.increment(restaurant)
                break

    @_hello_decorator
    def thank_you(self):
        """Show words of appreciation to users."""
        template = console.get_template('good_by.txt', self.speak_color)
        print(template.substitute({
            'robot_name': self.name,
            'user_name': self.user_name,
        }))



================================================================================
☐ファイル: lesson8\roboter\ranking.csv
================================================================================

NAME,COUNT
Japanese Apple,1
American Orange,1



================================================================================
☐ファイル: lesson8\roboter\templates\good_by.txt
================================================================================

$robot_name: $user_nameさん。ありがとうございました。
$robot_name: Thank you so much, $user_name!

良い一日を！さようなら。
Have a good day!



================================================================================
☐ファイル: lesson8\roboter\templates\greeting.txt
================================================================================

私のオススメのレストランは、$restaurantです。
I recommend $restaurant restaurant.

このレストランは好きですか？ [Yes/No]
Do you like it? [y/n]



================================================================================
☐ファイル: lesson8\roboter\templates\hello.txt
================================================================================

こんにちは！私は$robot_nameです。あなたの名前は何ですか？
Hello, I am $robot_name. What is your name?



================================================================================
☐ファイル: lesson8\roboter\templates\which_restaurant.txt
================================================================================

$user_nameさん。どこのレストランが好きですか？
$user_name, which restaurants do you like?



================================================================================
☐ファイル: lesson8\roboter\views\__init__.py
================================================================================




================================================================================
☐ファイル: lesson8\roboter\views\__pycache__\__init__.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\views\__pycache__\console.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson8\roboter\views\console.py
================================================================================

"""Utils to display to be returned to the user on the console."""
import os
import string

import termcolor


def get_template_dir_path():
    """Return the path of the template's directory.

    Returns:
        str: The template dir path.
    """
    template_dir_path = None
    try:
        import settings
        if settings.TEMPLATE_PATH:
            template_dir_path = settings.TEMPLATE_PATH
    except ImportError:
        pass

    if not template_dir_path:
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        template_dir_path = os.path.join(base_dir, 'templates')

    return template_dir_path


class NoTemplateError(Exception):
    """No Template Error"""


def find_template(temp_file):
    """Find for template file in the given location.

    Returns:
        str: The template file path

    Raises:
        NoTemplateError: If the file does not exist.
    """
    template_dir_path = get_template_dir_path()
    temp_file_path = os.path.join(template_dir_path, temp_file)
    if not os.path.exists(temp_file_path):
        raise NoTemplateError('Could not find {}'.format(temp_file))
    return temp_file_path


def get_template(template_file_path, color=None):
    """Return the path of the template.

    Args:
        template_file_path (str): The template file path
        color: (str): Color formatting for output in terminal
            See in more details: https://pypi.python.org/pypi/termcolor

    Returns:
        string.Template: Return templates with characters in templates.
    """
    template = find_template(template_file_path)
    with open(template, 'r', encoding='utf-8') as template_file:
        contents = template_file.read()
        contents = contents.rstrip(os.linesep)
        contents = '{splitter}{sep}{contents}{sep}{splitter}{sep}'.format(
            contents=contents, splitter="=" * 60, sep=os.linesep)
        contents = termcolor.colored(contents, color)
        return string.Template(contents)



================================================================================
☐ファイル: lesson8\setup.cfg
================================================================================

[egg_info]
tag_build = 
tag_date = 0




================================================================================
☐ファイル: lesson8\setup.py
================================================================================

try:
    from setuptools import setup, find_packages
except ImportError:
    from distutils.core import setup


setup(
    name='python_programming_demo_app',
    version='0.0.1',
    packages=['roboter', 'roboter.models', 'roboter.controller', 'roboter.views'],
    # You could use find_packages if setuptools is installed. 
    # packages=find_packages(),
    package_data={ 'roboter': ['templates/*.txt'] },
    url='http://sakaijunsoccer.appspot.com',
    license='MIT',
    author='jsakai',
    author_email='example@example.com',
    # You can specify install_requires if setuptools is installed
    # install_requires=['termcolor==1.1.0'],
    long_description=open('README.txt').read(),
)



################################################################################
### lesson10 ###
################################################################################


================================================================================
☐ファイル: lesson10\__pycache__\logtest.cpython-39.pyc
================================================================================

[読み込みエラー: 'shift_jis' codec can't decode byte 0xe3 in position 16: illegal multibyte sequence]


================================================================================
☐ファイル: lesson10\c10_1_1.py
================================================================================

"""configparserで書き込む"""
import configparser

config = configparser.ConfigParser()
config['DEFAULT'] = {
    'debug': True
}
config['web_server'] = {
    'host': '127.0.0.1',
    'port': 80
}
config['db_server'] = {
    'host': '127.0.0.1',
    'port': 3306
}
with open('config.ini', 'w') as config_file:
    config.write(config_file)


================================================================================
☐ファイル: lesson10\c10_1_2.py
================================================================================

"""configparserで読み込む"""
import configparser

config = configparser.ConfigParser()
config.read('config.ini')
print(config['web_server'])
print(config['web_server']['host'])
print(config['web_server']['port'])

print(config['DEFAULT']['debug'])


================================================================================
☐ファイル: lesson10\c10_1_3.py
================================================================================

"""yamlファイルに書き込む"""
import yaml

with open('config.yml', 'w') as yaml_file:
    yaml.dump({
        'web_server': {
            'host': '127.0.0.1',
            'port': 80
        },
        'db_server': {
            'host': '127.0.0.1',
            'port': 3306
        }
    }, yaml_file)


================================================================================
☐ファイル: lesson10\c10_1_4.py
================================================================================

"""yamlファイルを読み込む"""
import yaml

with open('config.yml', 'r') as yaml_file:
    data = yaml.load(yaml_file, Loader=yaml.FullLoader)
    print(data)
    print(type(data))
    print(data['web_server']['host'])
    print(data['web_server']['port'])
    print(data['db_server']['host'])
    print(data['db_server']['port'])


================================================================================
☐ファイル: lesson10\c10_1_5.py
================================================================================

"""ブロックスタイルでyamlファイルに書き込む"""
import yaml

with open('config2.yml', 'w') as yaml_file:
    yaml.dump({
        'web_server': {
            'host': '127.0.0.1',
            'port': 80
        },
        'db_server': {
            'host': '127.0.0.1',
            'port': 3306
        }
    }, yaml_file, default_flow_style=False)


================================================================================
☐ファイル: lesson10\c10_2_1.py
================================================================================

"""ロギング"""
import logging

logging.critical('critical')
logging.error('error')
logging.warning('warning')
logging.info('info')
logging.debug('debug')


================================================================================
☐ファイル: lesson10\c10_2_2.py
================================================================================

"""ログレベルの変更"""
import logging

logging.basicConfig(level=logging.DEBUG)

logging.critical('critical')
logging.error('error')
logging.warning('warning')
logging.info('info')
logging.debug('debug')


================================================================================
☐ファイル: lesson10\c10_2_3.py
================================================================================

"""formatを使ったログの書き方"""
import logging

logging.basicConfig(level=logging.INFO)

logging.info('info {}'.format('test'))


================================================================================
☐ファイル: lesson10\c10_2_4.py
================================================================================

"""%を使ったログの書き方"""
import logging

logging.basicConfig(level=logging.INFO)

logging.info('info %s' % ('test'))
logging.info('info %s %s' % ('test', 'test2'))


================================================================================
☐ファイル: lesson10\c10_2_5.py
================================================================================

"""%を使ったログの書き方"""
import logging

logging.basicConfig(level=logging.INFO)

logging.info('info %s %s', 'test', 'test2')


================================================================================
☐ファイル: lesson10\c10_2_6.py
================================================================================

"""ファイルにログを出力"""
import logging

logging.basicConfig(filename='test.log', level=logging.INFO)

logging.info('info %s %s', 'test', 'test2')


================================================================================
☐ファイル: lesson10\c10_2_7.py
================================================================================

"""ログを出力"""
import logging

logging.basicConfig(level=logging.INFO)

logging.info('info %s %s', 'test', 'test2')


================================================================================
☐ファイル: lesson10\c10_2_8.py
================================================================================

"""ログのフォーマットを変更"""
import logging

formatter = '%(levelname)s:%(message)s'
logging.basicConfig(level=logging.INFO, format=formatter)

logging.info('info %s %s', 'test', 'test2')


================================================================================
☐ファイル: lesson10\c10_2_9.py
================================================================================

"""ログのフォーマットを変更"""
import logging

formatter = '%(asctime)s:%(message)s'
logging.basicConfig(level=logging.INFO, format=formatter)

logging.info('info %s %s', 'test', 'test2')


================================================================================
☐ファイル: lesson10\c10_2_10.py
================================================================================

"""ロガーの作成"""
import logging

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.debug('debug')


================================================================================
☐ファイル: lesson10\c10_2_11.py
================================================================================

"""ロガーの名前を変更する"""
import logging

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger('main')
logger.setLevel(logging.DEBUG)
logger.debug('debug')


================================================================================
☐ファイル: lesson10\c10_2_12.py
================================================================================

"""インポートしたモジュールのロガー"""
import logging

import logtest

logging.basicConfig(level=logging.INFO)
logging.info('info')
logtest.do_something()


================================================================================
☐ファイル: lesson10\c10_2_13.py
================================================================================

"""ロガーの作成"""
import logging

import logtest

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger(__name__)
logger.info('from main')

logtest.do_something()


================================================================================
☐ファイル: lesson10\c10_2_14.py
================================================================================

"""logtest.pyのdo_somethingを実行"""
import logging

import logtest

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info('from main')
logtest.do_something()


================================================================================
☐ファイル: lesson10\c10_2_15.py
================================================================================

"""フィルタを適用したロガーでログ出力"""
import logging

logging.basicConfig(level=logging.INFO)


class NoPassFilter(logging.Filter):
    def filter(self, record):
        log_message = record.getMessage()
        return 'password' not in log_message


logger = logging.getLogger(__name__)
logger.addFilter(NoPassFilter())
logger.info('from main')
logger.info('from main password = "test"')


================================================================================
☐ファイル: lesson10\c10_2_16.py
================================================================================

"""ログの設定ファイルを読み込んで使用する"""
import logging.config

logging.config.fileConfig('logging.ini')
logger = logging.getLogger(__name__)


logger.debug('debug message')
logger.info('info message')
logger.warning('warning message')
logger.error('error message')
logger.critical('critical message')


================================================================================
☐ファイル: lesson10\c10_2_17.py
================================================================================

"""ロガーの名前をsimpleExampleにして作成"""
import logging.config

logging.config.fileConfig('logging.ini')
logger = logging.getLogger('simpleExample')

logger.debug('debug message')
logger.info('info message')
logger.warning('warning message')
logger.error('error message')
logger.critical('critical message')


================================================================================
☐ファイル: lesson10\c10_2_18.py
================================================================================

"""ログの設定を辞書型で行う"""
import logging.config

logging.config.dictConfig({
    'version': 1,
    'formatters': {
        'sampleFormatter': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'sampleHandlers': {
            'class': 'logging.StreamHandler',
            'formatter': 'sampleFormatter',
            'level': logging.DEBUG
        }
    },
    'root': {
        'handlers': ['sampleHandlers'],
        'level': logging.WARNING
    },
    'loggers': {
        'simpleExample': {
            'handlers': ['sampleHandlers'],
            'level': logging.DEBUG,
            'propagate': 0
        }
    }
})
logger = logging.getLogger('simpleExample')

logger.debug('debug message')
logger.info('info message')
logger.warning('warning message')
logger.error('error message')
logger.critical('critical message')


================================================================================
☐ファイル: lesson10\c10_2_19.py
================================================================================

"""ログを辞書型で出力する"""
import logging

logger = logging.getLogger(__name__)

logger.error('Api call is failed')

logger.error({
    'action': 'create',
    'status': 'fail',
    'message': 'Api call is failed'
})


================================================================================
☐ファイル: lesson10\c10_3_1.py
================================================================================

'''メールを送信する'''
from email import message
import smtplib


smtp_host = 'smtp-mail.outlook.com'
smtp_port = 587

from_email = 'test@example.com'
to_email = 'test@example.com'
username = 'test@example.com'
password = 'feiwafjdafjeiwaf'

msg = message.EmailMessage()
msg.set_content('Test email')
msg['Subject'] = 'Test email sub'
msg['From'] = from_email
msg['To'] = to_email

server = smtplib.SMTP(smtp_host, smtp_port)
server.ehlo()
server.starttls()
server.ehlo()
server.login(username, password)
server.send_message(msg)
server.quit()


================================================================================
☐ファイル: lesson10\c10_3_2.py
================================================================================

'''ファイルを添付したメールを送信する'''
from email import message
from email.mime import multipart
from email.mime import text
import smtplib


smtp_host = 'smtp-mail.outlook.com'
smtp_port = 587

from_email = 'test@example.com'
to_email = 'test@example.com'
username = 'test@example.com'
password = 'feiwafjdafjeiwaf'

msg = multipart.MIMEMultipart()
msg['Subject'] = 'Test email sub'
msg['From'] = from_email
msg['To'] = to_email
msg.attach(text.MIMEText('Test email', 'plain'))

with open('lesson.py', 'r') as f:
    attachment = text.MIMEText(f.read(), 'plain')
    attachment.add_header(
        'Content-Disposition', 'attachment',
        filename='lesson.txt'
    )
    msg.attach(attachment)

server = smtplib.SMTP(smtp_host, smtp_port)
server.ehlo()
server.starttls()
server.ehlo()
server.login(username, password)
server.send_message(msg)
server.quit()


================================================================================
☐ファイル: lesson10\c10_3_3.py
================================================================================

'''ログをメールで送信する'''
import logging
import logging.handlers


smtp_host = 'smtp-mail.outlook.com'
smtp_port = 587

from_email = 'test@example.com'
to_email = 'test@example.com'
username = 'test@example.com'
password = 'feiwafjdafjeiwaf'

logger = logging.getLogger('email')
logger.setLevel(logging.CRITICAL)

logger.addHandler(logging.handlers.SMTPHandler(
    (smtp_host, smtp_port), from_email, to_email,
    subject='Admin test log',
    credentials=(username, password),
    secure=(None, None, None),
    timeout=20
))

logger.info('test')
logger.critical('critical')


================================================================================
☐ファイル: lesson10\c10_4_1.py
================================================================================

print 'test'


================================================================================
☐ファイル: lesson10\config2.yml
================================================================================

db_server: {host: 127.0.0.1, port: 3306}
web_server: {host: 127.0.0.1, port: 80}


================================================================================
☐ファイル: lesson10\config.ini
================================================================================

[DEFAULT]
debug = True

[web_server]
host = 127.0.0.1
port = 80

[db_server]
host = 127.0.0.1
port = 3306




================================================================================
☐ファイル: lesson10\config.yml
================================================================================

db_server:
  host: 127.0.0.1
  port: 3306
web_server:
  host: 127.0.0.1
  port: 80



================================================================================
☐ファイル: lesson10\console.py
================================================================================

"""Utils to display to be returned to the user on the console."""
import logging
import os
import string

import termcolor

logger = logging.getLogger(__name__)


def get_template_dir_path():
    """Return the path of the template's directory.

    Returns:
        str: The template dir path.
    """
    template_dir_path = None
    try:
        import settings
        if settings.TEMPLATE_PATH:
            template_dir_path = settings.TEMPLATE_PATH
    except ImportError:
        pass

    if not template_dir_path:
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        template_dir_path = os.path.join(base_dir, 'templates')

    return template_dir_path


class NoTemplateError(Exception):
    """No Template Error"""


def find_template(temp_file):
    """Find for template file in the given location.

    Returns:
        str: The template file path

    Raises:
        NoTemplateError: If the file does not exists.
    """
    template_dir_path = get_template_dir_path()
    temp_file_path = os.path.join(template_dir_path, temp_file)
    if not os.path.exists(temp_file_path):
        logger.critical({
            'action': 'read',
            'status': 'fail',
            'message': 'temp file does not exist'
            })
        raise NoTemplateError('Could not find {}'.format(temp_file))
    return temp_file_path


def get_template(template_file_path, color=None):
    """Return the path of the template.

    Args:
        template_file_path (str): The template file path
        color: (str): Color formatting for output in terminal
            See in more details: https://pypi.python.org/pypi/termcolor

    Returns:
        string.Template: Return templates with characters in templates.
    """
    template = find_template(template_file_path)
    with open(template, 'r', encoding='utf-8') as template_file:
        contents = template_file.read()
        contents = contents.rstrip(os.linesep)
        contents = '{splitter}{sep}{contents}{sep}{splitter}{sep}'.format(
            contents=contents, splitter="=" * 60, sep=os.linesep)
        contents = termcolor.colored(contents, color)
        return string.Template(contents)



================================================================================
☐ファイル: lesson10\logging.ini
================================================================================

[loggers]
keys=root,simpleExample

[handlers]
keys=streamHandler

[formatters]
keys=formatter

[logger_root]
level=WARNING
handlers=streamHandler

[logger_simpleExample]
level=DEBUG
handlers=streamHandler
qualname=simpleExample
propagate=0

[handler_streamHandler]
class=StreamHandler
level=DEBUG
formatter=formatter
args=(sys.stderr,)

[formatter_formatter]
format=%(asctime)s %(name)-12s %(levelname)-8s %(message)s


================================================================================
☐ファイル: lesson10\logtest.log
================================================================================

from logtest
from logtest debug



================================================================================
☐ファイル: lesson10\logtest.py
================================================================================

"""
モジュール内のロガー
モジュール内で異なるログレベルの出力
モジュール内で異なるログレベルの設定
ハンドラーでログの出力先をファイルに設定
"""
import logging

logger = logging.getLogger(__name__)
# logger.setLevel(logging.DEBUG)

# h = logging.FileHandler('logtest.log')
# logger.addHandler(h)

def do_something():
    # logging.info('from logtest info')
    logger.info('from logtest')
    # logger.debug('from logtest debug')




================================================================================
☐ファイル: lesson10\ranking.py
================================================================================

"""Generates ranking model to write to CSV

TODO (jsakai) Rewrite to DB instead of CSV
"""
import collections
import csv
import logging
import os
import pathlib

logger = logging.getLogger(__name__)


RANKING_COLUMN_NAME = 'NAME'
RANKING_COLUMN_COUNT = 'COUNT'
RANKING_CSV_FILE_PATH = 'ranking.csv'


class CsvModel(object):
    """Base csv model."""
    def __init__(self, csv_file):
        self.csv_file = csv_file
        if not os.path.exists(csv_file):
            pathlib.Path(csv_file).touch()


class RankingModel(CsvModel):
    """Definition of class that generates ranking model to write to CSV"""
    def __init__(self, csv_file=None, *args, **kwargs):
        if not csv_file:
            csv_file = self.get_csv_file_path()
        super().__init__(csv_file, *args, **kwargs)
        self.column = [RANKING_COLUMN_NAME, RANKING_COLUMN_COUNT]
        self.data = collections.defaultdict(int)
        self.load_data()

    def get_csv_file_path(self):
        """Set csv file path.

        Use csv path if set in settings, otherwise use default
        """
        csv_file_path = None
        try:
            import settings
            if settings.CSV_FILE_PATH:
                csv_file_path = settings.CSV_FILE_PATH
        except ImportError:
            pass

        if not csv_file_path:
            csv_file_path = RANKING_CSV_FILE_PATH
        return csv_file_path

    def load_data(self):
        """Load csv data.

        Returns:
            dict: Returns ranking data of dict type.
        """
        with open(self.csv_file, 'r+') as csv_file:
            reader = csv.DictReader(csv_file)
            for row in reader:
                self.data[row[RANKING_COLUMN_NAME]] = int(
                    row[RANKING_COLUMN_COUNT])
        return self.data

    def save(self, force=True):
        """Save data to csv file."""
        # TODO (jsakai) Use locking mechanism for avoiding dead lock issue

        logger.info({
            'action': 'save',
            'csv_file': self.csv_file,
            'force': force,
            'status': 'run'
        })
        with open(self.csv_file, 'w+') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=self.column)
            writer.writeheader()

            for name, count in self.data.items():
                writer.writerow({
                    RANKING_COLUMN_NAME: name,
                    RANKING_COLUMN_COUNT: count
                })
        logger.info({
            'action': 'save',
            'csv_file': self.csv_file,
            'force': force,
            'status': 'success'
        })

    def get_most_popular(self, not_list=None):
        """Fetch the data of the top most ranking.

        Args:
            not_list (list): Excludes the name on the list.

        Returns:
            str: Returns the data of the top most ranking
        """
        if not_list is None:
            not_list = []

        if not self.data:
            return None

        sorted_data = sorted(self.data, key=self.data.get, reverse=True)
        for name in sorted_data:
            if name in not_list:
                continue
            return name

    def increment(self, name):
        """Increase rank for the give name."""
        self.data[name.title()] += 1
        self.save()



================================================================================
☐ファイル: lesson10\test.log
================================================================================

INFO:root:info test test2
INFO:root:info test test2
INFO:root:info test test2



################################################################################
### lesson11 ###
################################################################################


================================================================================
☐ファイル: lesson11\c11_1_1.py
================================================================================

"""辞書型とJSON形式の比較"""
import json

j = {
    "employee":
        [
            {"id": 111, "name": "Mike"},
            {"id": 222, "name": "Nancy"}
        ]
}

print(j)
print("#############")
print(json.dumps(j))


================================================================================
☐ファイル: lesson11\c11_1_2.py
================================================================================

"""JSONファイルの書き込み"""
import json

j = {
    "employee":
        [
            {"id": 111, "name": "Mike"},
            {"id": 222, "name": "Nancy"}
        ]
}

with open('test.json', 'w') as f:
    json.dump(j, f)


================================================================================
☐ファイル: lesson11\c11_1_3.py
================================================================================

"""JSONファイルの読み込み"""
import json

j = {
    "employee":
        [
            {"id": 111, "name": "Mike"},
            {"id": 222, "name": "Nancy"}
        ]
}

with open('test.json', 'w') as f:
    json.dump(j, f)

with open('test.json', 'r') as f:
    print(json.load(f))


================================================================================
☐ファイル: lesson11\c11_1_4.py
================================================================================

"""JSON形式を辞書型に変換"""
import json

j = {
    "employee":
        [
            {"id": 111, "name": "Mike"},
            {"id": 222, "name": "Nancy"}
        ]
}

a = json.dumps(j)
print(a)
print("@@@@@@@@@@@@@")
print(json.loads(a))


================================================================================
☐ファイル: lesson11\c11_2_1.py
================================================================================

"""GETでアクセス"""
import urllib.request
import json

url = 'http://httpbin.org/get'

with urllib.request.urlopen(url) as f:
    print(f.read())


================================================================================
☐ファイル: lesson11\c11_2_2.py
================================================================================

"""GETで取得したデータをデコード"""
import urllib.request
import json

url = 'http://httpbin.org/get'

with urllib.request.urlopen(url) as f:
    print(f.read().decode('utf-8'))


================================================================================
☐ファイル: lesson11\c11_2_3.py
================================================================================

"""GETで取得したデータを辞書型で読み込む"""
import urllib.request
import json

url = 'http://httpbin.org/get'

with urllib.request.urlopen(url) as f:
    r = json.loads(f.read().decode('utf-8'))
    print(r)
    print(type(r))


================================================================================
☐ファイル: lesson11\c11_2_4.py
================================================================================

"""GETでパラメーターを付加してアクセスするときのURL"""
import urllib.request

payload = {"key1": "value1", "key2": "value2"}
url = 'http://httpbin.org/get' + '?' + urllib.parse.urlencode(payload)
print(url)


================================================================================
☐ファイル: lesson11\c11_2_5.py
================================================================================

"""POSTでアクセス"""
import urllib.request
import json

payload = {"key1": "value1", "key2": "value2"}
payload = json.dumps(payload).encode('utf-8')
req = urllib.request.Request(
    'http://httpbin.org/post', data=payload, method='POST')

with urllib.request.urlopen(req) as f:
    print(json.loads(f.read().decode('utf-8')))


================================================================================
☐ファイル: lesson11\c11_2_6.py
================================================================================

"""PUTでアクセス"""
import urllib.request
import json

payload = {"key1": "value1", "key2": "value2"}
payload = json.dumps(payload).encode('utf-8')
req = urllib.request.Request(
    'http://httpbin.org/put', data=payload, method='PUT')
with urllib.request.urlopen(req) as f:
    print(json.loads(f.read().decode('utf-8')))


================================================================================
☐ファイル: lesson11\c11_2_7.py
================================================================================

"""DELETEでアクセス"""
import urllib.request
import json

payload = {"key1": "value1", "key2": "value2"}
payload = json.dumps(payload).encode('utf-8')
req = urllib.request.Request(
    'http://httpbin.org/delete', data=payload, method='DELETE')
with urllib.request.urlopen(req) as f:
    print(json.loads(f.read().decode('utf-8')))


================================================================================
☐ファイル: lesson11\c11_2_8.py
================================================================================

"""requestsによるGETでのアクセス"""
import requests

payload = {'key1': 'value1', 'key2': 'value2'}

r = requests.get('http://httpbin.org/get', params=payload)

print(r.status_code)
print(r.text)
print(r.json())


================================================================================
☐ファイル: lesson11\c11_2_9.py
================================================================================

"""requestsによるPOSTでのアクセス"""
import requests

payload = {'key1': 'value1', 'key2': 'value2'}

r = requests.post('http://httpbin.org/post', data=payload)

print(r.status_code)
print(r.text)
print(r.json())


================================================================================
☐ファイル: lesson11\c11_2_10.py
================================================================================

"""requestsによるPUTでのアクセス"""
import requests

payload = {'key1': 'value1', 'key2': 'value2'}

r = requests.put('http://httpbin.org/put', data=payload)

print(r.status_code)
print(r.text)
print(r.json())


================================================================================
☐ファイル: lesson11\c11_2_11.py
================================================================================

"""requestsによるDELETEでのアクセス"""
import requests

payload = {'key1': 'value1', 'key2': 'value2'}

r = requests.delete('http://httpbin.org/delete', data=payload)

print(r.status_code)
print(r.text)
print(r.json())


================================================================================
☐ファイル: lesson11\c11_2_12.py
================================================================================

"""timeoutを指定"""
import requests

payload = {'key1': 'value1', 'key2': 'value2'}

r = requests.get('http://httpbin.org/get', params=payload, timeout=0.001)


================================================================================
☐ファイル: lesson11\c11_3_1.py
================================================================================

"""Flaskの実行"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'hello world'

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_2.py
================================================================================

"""Flaskのhello_world関数"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'hello world!'

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_3.py
================================================================================

"""Flaskの処理の作成"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
def hello_world2():
    return 'hello world!'

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_4.py
================================================================================

"""Flaskの処理の作成"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello/<username>')
def hello_world2(username):
    return 'hello world! {}'.format(username)

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_5.py
================================================================================

"""Flaskの処理の作成"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return 'hello world! {}'.format(username)

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_6.py
================================================================================

"""テンプレートの利用"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return render_template('hello.html', username=username)

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_7.py
================================================================================

"""HTTPメソッドを使用した処理の作成"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return render_template('hello.html', username=username)

@app.route('/post', methods=['POST', 'PUT', 'DELETE'])
def show_post():
    return str(request.values)

def main():
    app.debug = True
    app.run(host='127.0.0.1', port=5000)

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_8.py
================================================================================

"""返り値として値のみを返す"""
from flask import Flask
from flask import g
from flask import render_template
from flask import request
from flask import Response

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return render_template('hello.html', username=username)

@app.route('/post', methods=['POST', 'PUT', 'DELETE'])
def show_post():
    return str(request.values['username'])

def main():
    app.debug = True
    app.run(host='127.0.0.1', port=5000)

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_9.py
================================================================================

"""データベースを利用する関数の準備"""
import sqlite3
from flask import Flask
from flask import render_template
from flask import g
from flask import request

app = Flask(__name__)

"""データベースに接続する処理"""
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('test_sqlite.db')
    return db

"""データベースへの接続を閉じる処理"""
@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

@app.route('/employee', methods=['POST', 'PUT', 'DELETE'])
@app.route('/employee/<name>', methods=['GET'])
def employee(name=None):

    if request.method == 'GET':
        return name

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return render_template('hello.html', username=username)

@app.route('/post', methods=['POST', 'PUT', 'DELETE'])
def show_post():
    return str(request.values['username'])

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_3_10.py
================================================================================

"""データベースを利用する処理"""
import sqlite3
from flask import Flask
from flask import render_template
from flask import g
from flask import request

app = Flask(__name__)

"""データベースに接続する処理"""
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('test_sqlite.db')
    return db

"""データベースへの接続を閉じる処理"""
@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

@app.route('/employee', methods=['POST', 'PUT', 'DELETE'])
@app.route('/employee/<name>', methods=['GET'])
def employee(name=None):
    """データベースへの接続とテーブルの作成"""
    db = get_db()
    curs = db.cursor()
    curs.execute(
        'CREATE TABLE IF NOT EXISTS persons( '
        'id INTEGER PRIMARY KEY AUTOINCREMENT, name STRING)'
    )
    db.commit()

    name = request.values.get('name', name)

    """GET時の処理"""
    if request.method == 'GET':
        curs.execute(f'SELECT * FROM persons WHERE name = "{name}"')
        person = curs.fetchone()
        if not person:
            return "No", 404
        user_id, name = person
        return f'{user_id}:{name}', 200

    """POST時の処理"""
    if request.method == 'POST':
        curs.execute(f'INSERT INTO persons(name) values("{name}")')
        db.commit()
        return f'created {name}', 201

    """PUT時の処理"""
    if request.method == 'PUT':
        new_name = request.values['new_name']
        curs.execute(f'UPDATE persons set name = "{new_name}" '
                     f'WHERE name = "{name}"')
        db.commit()
        return f'updated {name}: {new_name}', 200

    """DELETE時の処理"""
    if request.method == 'DELETE':
        curs.execute(f'DELETE from persons WHERE name = "{name}"')
        db.commit()
        return f'deleted {name}', 200

    curs.close()

@app.route('/')
def hello_world():
    return 'top'

@app.route('/hello')
@app.route('/hello/<username>')
def hello_world2(username=None):
    return render_template('hello.html', username=username)

@app.route('/post', methods=['POST', 'PUT', 'DELETE'])
def show_post():
    return str(request.values['username'])

def main():
    app.debug = True
    app.run()

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson11\c11_4_1.py
================================================================================

"""HTMLの取得"""
from bs4 import BeautifulSoup
import requests

html = requests.get('https://www.python.org')
soup = BeautifulSoup(html.text)


================================================================================
☐ファイル: lesson11\c11_4_2.py
================================================================================

"""titleタグの要素の取得"""
from bs4 import BeautifulSoup
import requests

html = requests.get('https://www.python.org')
soup = BeautifulSoup(html.text, 'lxml')
headers = soup.find_all('h2')
print(headers)


================================================================================
☐ファイル: lesson11\c11_4_3.py
================================================================================

"""h2タグの要素の取得"""
from bs4 import BeautifulSoup
import requests

html = requests.get('https://www.python.org')
soup = BeautifulSoup(html.text, 'lxml')
headers = soup.find_all('h2')

print(headers[0].text)


================================================================================
☐ファイル: lesson11\c11_4_4.py
================================================================================

"""divタグのintroductionクラス要素の取得"""
from bs4 import BeautifulSoup
import requests

html = requests.get('https://www.python.org')
soup = BeautifulSoup(html.text, 'lxml')

intro = soup.find_all('div', {'class': 'introduction'})
print(intro)


================================================================================
☐ファイル: lesson11\c11_4_5.py
================================================================================

"""divタグのintroductionクラス要素の取得"""
from bs4 import BeautifulSoup
import requests

html = requests.get('https://www.python.org')
soup = BeautifulSoup(html.text, 'lxml')

intro = soup.find_all('div', {'class': 'introduction'})
print(intro[0].text)


================================================================================
☐ファイル: lesson11\templates\hello.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello</title>
</head>
<body>

{% if username %}
Hello {{ username }}
{% else %}
Hello
{% endif %}

</body>
</html>


================================================================================
☐ファイル: lesson11\test.json
================================================================================

{"employee": [{"id": 111, "name": "Mike"}, {"id": 222, "name": "Nancy"}]}


================================================================================
☐ファイル: lesson11\test_flask.py
================================================================================

import requests

"""POSTでアクセス"""
r = requests.post(
    'http://127.0.0.1:5000/post', data={'username': 'mike'})
print(r.text)

"""PUTでアクセス"""
# r = requests.put(
#     'http://127.0.0.1:5000/post', data={'username': 'mike'})
# print(r.text)

"""DELETEでアクセス"""
# r = requests.delete(
#     'http://127.0.0.1:5000/post', data={'username': 'mike'})
# print(r.text)

"""GETでアクセス"""
# r = requests.get(
#     'http://127.0.0.1:5000/post', data={'username': 'mike'})
# print(r.text)

"""さまざまなメソッドで呼び出し"""
# r = requests.get('http://127.0.0.1:5000/employee/jun')
# print(r.text)
# r = requests.post('http://127.0.0.1:5000/employee', data={'name': 'jun'})
# print(r.text)
# r = requests.put('http://127.0.0.1:5000/employee', data={'name': 'jun', 'new_name': 'sakai'})
# print(r.text)
# r = requests.delete('http://127.0.0.1:5000/employee', data={'name': 'sakai'})
# print(r.text)


================================================================================
☐ファイル: lesson11\test_sqlite.db
================================================================================

SQLite format 3   @                                                                     .[2
   I  ++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)c  tablepersonspersonsCREATE TABLE persons( id INTEGER PRIMARY KEY AUTOINCREMENT, name STRING)
    
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
     


################################################################################
### lesson12 ###
################################################################################


================================================================================
☐ファイル: lesson12\c12_1_1.py
================================================================================

"""スレッドの作成"""
import threading

def worker1():
    print(threading.current_thread().name, 'start')
    print(threading.current_thread().name, 'end')

def worker2():
    print(threading.current_thread().name, 'start')
    print(threading.current_thread().name, 'end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_2.py
================================================================================

"""スレッドで実行する処理の作成"""
import threading
import time

def worker1():
    print(threading.current_thread().name, 'start')
    time.sleep(5)
    print(threading.current_thread().name, 'end')

def worker2():
    print(threading.current_thread().name, 'start')
    time.sleep(5)
    print(threading.current_thread().name, 'end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')




================================================================================
☐ファイル: lesson12\c12_1_3.py
================================================================================

"""スレッド名をロギングする"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_4.py
================================================================================

"""スレッドの名前を変更"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(name='rename_worker1', target=worker1)
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_5.py
================================================================================

"""スレッドに引数を渡す"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2(x, y=1):
    logging.debug('start')
    logging.debug(x)
    logging.debug(y)
    time.sleep(5)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(name='rename_worker1', target=worker1)
    t2 = threading.Thread(target=worker2,
                          args=(100,), kwargs={'y': 200})
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_6.py
================================================================================

"""スレッドの実行"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_7.py
================================================================================

"""デーモンスレッドの実行"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t1.daemon = True
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')


================================================================================
☐ファイル: lesson12\c12_1_8.py
================================================================================

"""デーモンスレッドのjoin"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    t1 = threading.Thread(target=worker1)
    t1.daemon = True
    t2 = threading.Thread(target=worker2)
    t1.start()
    t2.start()
    print('started')
    t1.join()


================================================================================
☐ファイル: lesson12\c12_1_9.py
================================================================================

"""スレッドをまとめてjoinする"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    threads = []
    for _ in range(5):
        t = threading.Thread(target=worker1)
        t.daemon = True
        t.start()
        threads.append(t)
    for thread in threads:
        thread.join()


================================================================================
☐ファイル: lesson12\c12_1_10.py
================================================================================

"""threading.enumerateを使う"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    for _ in range(5):
        t = threading.Thread(target=worker1)
        t.daemon = True
        t.start()
    for thread in threading.enumerate():
        if thread is threading.current_thread():
            print(thread)
            continue
        thread.join()


================================================================================
☐ファイル: lesson12\c12_1_11.py
================================================================================

"""threading.enumerateの結果を表示する"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

def worker2():
    logging.debug('start')
    time.sleep(2)
    logging.debug('end')

if __name__ == '__main__':
    for _ in range(5):
        t = threading.Thread(target=worker1)
        t.daemon = True
        t.start()
    print(threading.enumerate())
    for thread in threading.enumerate():
        if thread is threading.current_thread():
            continue
        thread.join()


================================================================================
☐ファイル: lesson12\c12_1_12.py
================================================================================

"""Timerを設定する"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1():
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')

if __name__ == '__main__':
    t = threading.Timer(3, worker1)
    t.start()


================================================================================
☐ファイル: lesson12\c12_1_13.py
================================================================================

"""Timerに引数を渡す"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(x, y=1):
    logging.debug('start')
    logging.debug(x)
    logging.debug(y)
    time.sleep(5)
    logging.debug('end')

if __name__ == '__main__':
    t = threading.Timer(3, worker1, args=(100,), kwargs={'y': 200})
    t.start()


================================================================================
☐ファイル: lesson12\c12_1_14.py
================================================================================

"""辞書型を並列に更新する"""
import logging
import threading

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d):
    logging.debug('start')
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    logging.debug('end')

def worker2(d):
    logging.debug('start')
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    t1 = threading.Thread(target=worker1, args=(d, ))
    t2 = threading.Thread(target=worker2, args=(d, ))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_15.py
================================================================================

"""辞書型を並列に更新する"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d):
    logging.debug('start')
    i = d['x']
    time.sleep(5)
    d['x'] = i + 1
    logging.debug(d)
    logging.debug('end')

def worker2(d):
    logging.debug('start')
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    t1 = threading.Thread(target=worker1, args=(d, ))
    t2 = threading.Thread(target=worker2, args=(d, ))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_16.py
================================================================================

"""ロック"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d, lock):
    logging.debug('start')
    lock.acquire()
    i = d['x']
    time.sleep(5)
    d['x'] = i + 1
    logging.debug(d)
    lock.release()
    logging.debug('end')

def worker2(d, lock):
    logging.debug('start')
    lock.acquire()
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    lock.release()
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    lock = threading.Lock()
    t1 = threading.Thread(target=worker1, args=(d, lock))
    t2 = threading.Thread(target=worker2, args=(d, lock))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_17.py
================================================================================

"""with文を使ったロック"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d, lock):
    logging.debug('start')
    with lock:
        i = d['x']
        time.sleep(5)
        d['x'] = i + 1
        logging.debug(d)
    logging.debug('end')

def worker2(d, lock):
    logging.debug('start')
    lock.acquire()
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    lock.release()
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    lock = threading.Lock()
    t1 = threading.Thread(target=worker1, args=(d, lock))
    t2 = threading.Thread(target=worker2, args=(d, lock))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_18.py
================================================================================

"""ロックの中のロック"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d, lock):
    logging.debug('start')
    with lock:
        i = d['x']
        time.sleep(5)
        d['x'] = i + 1
        logging.debug(d)
        with lock:
            d['x'] = i + 1
    logging.debug('end')

def worker2(d, lock):
    logging.debug('start')
    lock.acquire()
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    lock.release()
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    lock = threading.Lock()
    t1 = threading.Thread(target=worker1, args=(d, lock))
    t2 = threading.Thread(target=worker2, args=(d, lock))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_19.py
================================================================================

"""RLock"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d, lock):
    logging.debug('start')
    with lock:
        i = d['x']
        time.sleep(5)
        d['x'] = i + 1
        logging.debug(d)
        with lock:
            d['x'] = i + 1
    logging.debug('end')

def worker2(d, lock):
    logging.debug('start')
    lock.acquire()
    i = d['x']
    d['x'] = i + 1
    logging.debug(d)
    lock.release()
    logging.debug('end')

if __name__ == '__main__':
    d = {'x': 0}
    lock = threading.RLock()
    t1 = threading.Thread(target=worker1, args=(d, lock))
    t2 = threading.Thread(target=worker2, args=(d, lock))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_1_20.py
================================================================================

"""ロック"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(lock):
    with lock:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

def worker2(lock):
    with lock:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

def worker3(lock):
    with lock:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

if __name__ == '__main__':
    lock = threading.Lock()
    t1 = threading.Thread(target=worker1, args=(lock, ))
    t2 = threading.Thread(target=worker2, args=(lock, ))
    t3 = threading.Thread(target=worker3, args=(lock, ))
    t1.start()
    t2.start()
    t3.start()


================================================================================
☐ファイル: lesson12\c12_1_21.py
================================================================================

"""セマフォ"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(semaphore):
    with semaphore:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

def worker2(semaphore):
    with semaphore:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

def worker3(semaphore):
    with semaphore:
        logging.debug('start')
        time.sleep(5)
        logging.debug('end')

if __name__ == '__main__':
    semaphore = threading.Semaphore(2)
    t1 = threading.Thread(target=worker1, args=(semaphore, ))
    t2 = threading.Thread(target=worker2, args=(semaphore, ))
    t3 = threading.Thread(target=worker3, args=(semaphore, ))
    t1.start()
    t2.start()
    t3.start()


================================================================================
☐ファイル: lesson12\c12_2_1.py
================================================================================

"""スレッドの処理の例"""
import logging
import threading

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

def worker2(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

if __name__ == '__main__':
    i = 10
    t1 = threading.Thread(target=worker1, args=(i,))
    t2 = threading.Thread(name='renamed worker2', target=worker2, args=(i,))
    t1.start()
    t2.start()


================================================================================
☐ファイル: lesson12\c12_2_2.py
================================================================================

"""プロセスの作成"""
import logging
import multiprocessing

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

def worker2(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

if __name__ == '__main__':
    i = 10
    p1 = multiprocessing.Process(target=worker1, args=(i,))
    p2 = multiprocessing.Process(name='renamed worker2', target=worker2, args=(i,))
    p1.start()
    p2.start()


================================================================================
☐ファイル: lesson12\c12_2_3.py
================================================================================

"""プロセスのデーモン化"""
import logging
import multiprocessing

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

def worker2(i):
    logging.debug('start')
    logging.debug(i)
    logging.debug('end')

if __name__ == '__main__':
    i = 10
    p1 = multiprocessing.Process(target=worker1, args=(i,))
    p1.daemon = True
    p2 = multiprocessing.Process(name='renamed worker2', target=worker2, args=(i,))
    p1.start()
    p2.start()
    p1.join()


================================================================================
☐ファイル: lesson12\c12_2_4.py
================================================================================

"""プロセスのプールを作成"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(5) as p:
        p1 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get())


================================================================================
☐ファイル: lesson12\c12_2_5.py
================================================================================

"""プロセスのプールを作成"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(5) as p:
        p1 = p.apply_async(worker1, (100,))
        p2 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get())
        logging.debug(p2.get())


================================================================================
☐ファイル: lesson12\c12_2_6.py
================================================================================

"""プロセスの数を制限する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(1) as p:
        p1 = p.apply_async(worker1, (100,))
        p2 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get())
        logging.debug(p2.get())


================================================================================
☐ファイル: lesson12\c12_2_7.py
================================================================================

"""タイムアウトを設定する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(5) as p:
        p1 = p.apply_async(worker1, (100,))
        p2 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get(timeout=1))
        logging.debug(p2.get())


================================================================================
☐ファイル: lesson12\c12_2_8.py
================================================================================

"""並列化せずに実行する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        logging.debug(p.apply(worker1, (200,)))
        logging.debug('executed apply')
        p1 = p.apply_async(worker1, (100,))
        p2 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get())
        logging.debug(p2.get())


================================================================================
☐ファイル: lesson12\c12_2_9.py
================================================================================

"""apply_asyncで1つずつ実行する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        p1 = p.apply_async(worker1, (100,))
        p2 = p.apply_async(worker1, (100,))
        logging.debug('executed')
        logging.debug(p1.get())
        logging.debug(p2.get())


================================================================================
☐ファイル: lesson12\c12_2_10.py
================================================================================

"""マップでプロセスを実行する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.map(worker1, [100, 200])
        logging.debug('executed')
        logging.debug(r)


================================================================================
☐ファイル: lesson12\c12_2_11.py
================================================================================

"""マップで非同期にプロセスを実行する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.map_async(worker1, [100, 200])
        logging.debug('executed')
        logging.debug(r.get())


================================================================================
☐ファイル: lesson12\c12_2_12.py
================================================================================

"""マップでの実行にtimeoutを設定する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.map_async(worker1, [100, 200])
        logging.debug('executed')
        logging.debug(r.get(timeout=1))


================================================================================
☐ファイル: lesson12\c12_2_13.py
================================================================================

"""imap"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.imap(worker1, [100, 200])
        logging.debug('executed')
        logging.debug(r)


================================================================================
☐ファイル: lesson12\c12_2_14.py
================================================================================

"""imap"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.imap(worker1, [100, 200])
        logging.debug('executed')
        logging.debug([i for i in r])


================================================================================
☐ファイル: lesson12\c12_2_15.py
================================================================================

"""imap"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(i):
    logging.debug('start')
    time.sleep(5)
    logging.debug('end')
    return i

if __name__ == '__main__':
    with multiprocessing.Pool(3) as p:
        r = p.imap(worker1, [100, 200])
        logging.debug('executed')
        for i in r:
            logging.debug(i)


================================================================================
☐ファイル: lesson12\c12_2_16.py
================================================================================

"""マルチスレッドでメモリを参照する"""
import logging
import threading
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(threadName)s: %(message)s')

def worker1(d, lock):
    with lock:
        i = d['x']
        time.sleep(2)
        d['x'] = i + 1
    logging.debug(d)

def worker2(d, lock):
    with lock:
        i = d['x']
        d['x'] = i + 1
    logging.debug(d)

if __name__ == '__main__':
    d = {'x': 0}
    lock = threading.Lock()
    t1 = threading.Thread(target=worker1, args=(d, lock))
    t2 = threading.Thread(target=worker2, args=(d, lock))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    logging.debug(d)


================================================================================
☐ファイル: lesson12\c12_2_17.py
================================================================================

"""マルチプロセスでメモリを参照する"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker1(d, lock):
    with lock:
        i = d['x']
        time.sleep(2)
        d['x'] = i + 1
    logging.debug(d)

def worker2(d, lock):
    with lock:
        i = d['x']
        d['x'] = i + 1
    logging.debug(d)

if __name__ == '__main__':
    d = {'x': 0}
    lock = multiprocessing.Lock()
    p1 = multiprocessing.Process(target=worker1, args=(d, lock))
    p2 = multiprocessing.Process(target=worker2, args=(d, lock))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
    logging.debug(d)


================================================================================
☐ファイル: lesson12\c12_2_18.py
================================================================================

"""パイプでデータを受け取る"""
import logging
import multiprocessing

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def f(conn):
    conn.send(['test'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = multiprocessing.Pipe()
    p = multiprocessing.Process(target=f, args=(parent_conn,))
    p.start()
    logging.debug(child_conn.recv())


================================================================================
☐ファイル: lesson12\c12_2_19.py
================================================================================

"""パイプでデータを受信するタイミング"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def f(conn):
    conn.send(['test'])
    time.sleep(5)
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = multiprocessing.Pipe()
    p = multiprocessing.Process(target=f, args=(parent_conn,))
    p.start()
    logging.debug(child_conn.recv())


================================================================================
☐ファイル: lesson12\c12_2_20.py
================================================================================

"""パイプでデータを受信するタイミング"""
import logging
import multiprocessing
import time

logging.basicConfig(
    level=logging.DEBUG, format='%(processName)s: %(message)s')

def f(conn):
    conn.send(['test'])
    time.sleep(5)
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = multiprocessing.Pipe()
    p = multiprocessing.Process(target=f, args=(parent_conn,))
    p.start()
    p.join()
    logging.debug(child_conn.recv())




================================================================================
☐ファイル: lesson12\c12_3_1.py
================================================================================

"""ThreadPoolExecutorでスレッドの作成"""
import concurrent.futures
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(threadName)s: %(message)s')

def main():
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        f1 = executor.submit(worker, 2, 5)
        f2 = executor.submit(worker, 2, 5)
        logging.debug(f1.result())
        logging.debug(f2.result())

def worker(x, y):
    logging.debug('start')
    time.sleep(3)
    r = x * y
    logging.debug(r)
    logging.debug('end')
    return r

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson12\c12_3_2.py
================================================================================

"""max_workersを変更する"""
import concurrent.futures
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(threadName)s: %(message)s')

def main():
    with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
        f1 = executor.submit(worker, 2, 5)
        f2 = executor.submit(worker, 2, 5)
        logging.debug(f1.result())
        logging.debug(f2.result())

def worker(x, y):
    logging.debug('start')
    time.sleep(3)
    r = x * y
    logging.debug(r)
    logging.debug('end')
    return r

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson12\c12_3_3.py
================================================================================

"""mapで実行"""
import concurrent.futures
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(threadName)s: %(message)s')

def main():
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        args = [[2, 2], [5, 5]]
        r = executor.map(worker, *args)
        logging.debug(r)
        logging.debug([i for i in r])

def worker(x, y):
    logging.debug('start')
    time.sleep(3)
    r = x * y
    logging.debug(r)
    logging.debug('end')
    return r

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson12\c12_3_4.py
================================================================================

"""ProcessPoolExecutorでマルチプロセスの処理を実行"""
import concurrent.futures
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker(x, y):
    logging.debug('start')
    time.sleep(3)
    r = x * y
    logging.debug(r)
    logging.debug('end')
    return r

def main():
    with concurrent.futures.ProcessPoolExecutor(max_workers=5) as executor:
        f1 = executor.submit(worker, 2, 5)
        f2 = executor.submit(worker, 2, 5)
        logging.debug(f1.result())
        logging.debug(f2.result())

if __name__ == '__main__':
    main()


================================================================================
☐ファイル: lesson12\c12_3_5.py
================================================================================

"""マルチプロセスの処理をmapで実行"""
import concurrent.futures
import logging
import time

logging.basicConfig(level=logging.DEBUG, format='%(processName)s: %(message)s')

def worker(x, y):
    logging.debug('start')
    time.sleep(3)
    r = x * y
    logging.debug(r)
    logging.debug('end')
    return r

def main():
    with concurrent.futures.ProcessPoolExecutor(max_workers=5) as executor:
        args = [[2, 2], [5, 5]]
        r = executor.map(worker, *args)
        logging.debug(r)
        logging.debug([i for i in r])

if __name__ == '__main__':
    main()


################################################################################
### lesson13 ###
################################################################################


================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_2_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fdfdf4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"numpyで配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([1, 2, 3])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81a84238",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_2_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1868a879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"2次元配列を作る\"\"\"\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3657383",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_2_20-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e8e71d7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10 20 30 40 50] [1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"2つの配列a、bを作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "b = np.arange(1, 6)\n",
    "print(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e4a49cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_3_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9582e552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.215556</td>\n",
       "      <td>0.466304</td>\n",
       "      <td>0.892664</td>\n",
       "      <td>-0.696464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.879427</td>\n",
       "      <td>-0.743755</td>\n",
       "      <td>-1.124335</td>\n",
       "      <td>-0.485873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.261433</td>\n",
       "      <td>0.256433</td>\n",
       "      <td>1.872438</td>\n",
       "      <td>-0.521721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.258935</td>\n",
       "      <td>0.710878</td>\n",
       "      <td>0.921548</td>\n",
       "      <td>1.106660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.650061</td>\n",
       "      <td>2.180435</td>\n",
       "      <td>-0.115508</td>\n",
       "      <td>-0.552536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.281590</td>\n",
       "      <td>-0.161249</td>\n",
       "      <td>-0.107559</td>\n",
       "      <td>1.182990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.215556  0.466304  0.892664 -0.696464\n",
       "1 -0.879427 -0.743755 -1.124335 -0.485873\n",
       "2  0.261433  0.256433  1.872438 -0.521721\n",
       "3 -1.258935  0.710878  0.921548  1.106660\n",
       "4  1.650061  2.180435 -0.115508 -0.552536\n",
       "5 -0.281590 -0.161249 -0.107559  1.182990"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "330478bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3da0774",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.375584</td>\n",
       "      <td>1.606972</td>\n",
       "      <td>0.638107</td>\n",
       "      <td>1.873148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.157367</td>\n",
       "      <td>0.298782</td>\n",
       "      <td>-0.018310</td>\n",
       "      <td>1.451382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-3.326988</td>\n",
       "      <td>1.624916</td>\n",
       "      <td>-2.007742</td>\n",
       "      <td>-1.571658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.733927</td>\n",
       "      <td>0.935743</td>\n",
       "      <td>-0.197613</td>\n",
       "      <td>0.041296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.378603</td>\n",
       "      <td>0.188894</td>\n",
       "      <td>0.775921</td>\n",
       "      <td>-0.488025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-1.258432</td>\n",
       "      <td>0.493147</td>\n",
       "      <td>-0.722320</td>\n",
       "      <td>-0.333808</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.375584  1.606972  0.638107  1.873148\n",
       "1 -0.157367  0.298782 -0.018310  1.451382\n",
       "2 -3.326988  1.624916 -2.007742 -1.571658\n",
       "3  2.733927  0.935743 -0.197613  0.041296\n",
       "4  0.378603  0.188894  0.775921 -0.488025\n",
       "5 -1.258432  0.493147 -0.722320 -0.333808"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f00b4f92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.859235</td>\n",
       "      <td>0.389768</td>\n",
       "      <td>-0.343699</td>\n",
       "      <td>-0.451630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.962005</td>\n",
       "      <td>1.058630</td>\n",
       "      <td>0.651522</td>\n",
       "      <td>-0.177453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.062077</td>\n",
       "      <td>-0.292533</td>\n",
       "      <td>0.977810</td>\n",
       "      <td>-2.574572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.192287</td>\n",
       "      <td>-0.927189</td>\n",
       "      <td>-1.178958</td>\n",
       "      <td>-0.051155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.280363</td>\n",
       "      <td>0.853515</td>\n",
       "      <td>-1.416556</td>\n",
       "      <td>-2.129826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.258515</td>\n",
       "      <td>-0.470549</td>\n",
       "      <td>0.565674</td>\n",
       "      <td>1.500886</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0 -1.859235  0.389768 -0.343699 -0.451630\n",
       "1  0.962005  1.058630  0.651522 -0.177453\n",
       "2 -1.062077 -0.292533  0.977810 -2.574572\n",
       "3  0.192287 -0.927189 -1.178958 -0.051155\n",
       "4 -1.280363  0.853515 -1.416556 -2.129826\n",
       "5  0.258515 -0.470549  0.565674  1.500886"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7b5d6870",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.569782</td>\n",
       "      <td>-0.194874</td>\n",
       "      <td>0.374738</td>\n",
       "      <td>0.636758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.401920</td>\n",
       "      <td>0.792907</td>\n",
       "      <td>1.230235</td>\n",
       "      <td>1.355535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.553732</td>\n",
       "      <td>-1.100715</td>\n",
       "      <td>-0.503204</td>\n",
       "      <td>-0.023102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.628557</td>\n",
       "      <td>-1.151980</td>\n",
       "      <td>0.653295</td>\n",
       "      <td>-1.253095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.654151</td>\n",
       "      <td>0.044438</td>\n",
       "      <td>-0.959697</td>\n",
       "      <td>0.251291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.094062</td>\n",
       "      <td>-0.393615</td>\n",
       "      <td>0.040610</td>\n",
       "      <td>-0.801531</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.569782 -0.194874  0.374738  0.636758\n",
       "1 -1.401920  0.792907  1.230235  1.355535\n",
       "2 -0.553732 -1.100715 -0.503204 -0.023102\n",
       "3  0.628557 -1.151980  0.653295 -1.253095\n",
       "4  0.654151  0.044438 -0.959697  0.251291\n",
       "5  0.094062 -0.393615  0.040610 -0.801531"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "991c7ba0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.666442</td>\n",
       "      <td>1.108970</td>\n",
       "      <td>0.970880</td>\n",
       "      <td>-0.804977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.436721</td>\n",
       "      <td>-0.143077</td>\n",
       "      <td>0.684100</td>\n",
       "      <td>0.138567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.273786</td>\n",
       "      <td>0.446780</td>\n",
       "      <td>1.369016</td>\n",
       "      <td>0.172193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.458321</td>\n",
       "      <td>-0.313473</td>\n",
       "      <td>0.797748</td>\n",
       "      <td>0.736714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.452495</td>\n",
       "      <td>-0.262204</td>\n",
       "      <td>-0.492533</td>\n",
       "      <td>1.712673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-1.213220</td>\n",
       "      <td>-0.017775</td>\n",
       "      <td>-0.905214</td>\n",
       "      <td>0.542420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.666442  1.108970  0.970880 -0.804977\n",
       "1  0.436721 -0.143077  0.684100  0.138567\n",
       "2 -0.273786  0.446780  1.369016  0.172193\n",
       "3  0.458321 -0.313473  0.797748  0.736714\n",
       "4 -1.452495 -0.262204 -0.492533  1.712673\n",
       "5 -1.213220 -0.017775 -0.905214  0.542420"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54cbde29",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_3_9-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "189669ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n",
       "               '2022-01-05', '2022-01-06'],\n",
       "              dtype='datetime64[ns]', freq='D')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"index属性\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfe597e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_3_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e72bbd63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.16262742e+00, -8.41231952e-01, -1.02328403e+00,\n",
       "        -3.23203568e-01],\n",
       "       [ 9.22218283e-01, -1.33686620e+00, -2.01120376e-01,\n",
       "        -6.12413128e-01],\n",
       "       [ 1.18161179e+00, -2.00008023e+00,  1.56355923e-03,\n",
       "         1.75105280e+00],\n",
       "       [-7.04659073e-01, -1.75730896e-01, -5.89260074e-02,\n",
       "        -1.50366817e+00],\n",
       "       [-5.08056420e-01, -6.98401746e-01, -2.55232458e-01,\n",
       "        -2.07782165e-01],\n",
       "       [ 1.15118024e+00,  5.88995442e-01,  1.16390906e+00,\n",
       "        -2.95046818e-01]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"columns属性\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c37751fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_4_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5433a4dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"散布図を作成\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "plt.scatter(x, y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e32a2bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14eb4882",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0318c15f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_4_8-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b38db5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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pRtxtnIXrGoZjIoPwjxHo6vPZBgEBx8TkXM5VIyEhITAYDA06gXJyclp1PtRJyIiosn2RqMRwcHBTe6zcOFCLFiwoP7r4uJidOvWzZGoROQAg+KBHn7XoYffdXpHIaJOyKF+V7PZjNjYWCQlJTXYnpSUhPHjxze5z7hx4xq137hxI+Li4mAyNX1HS4vFAj8/vwYPIiIick8OXwResGAB3nzzTbz11ls4ePAgHnzwQaSlpWHevHkAans1Zs+eXd9+3rx5OHXqFBYsWICDBw/irbfewsqVK/HQQw+133dBRERELsvhMSMzZ85EXl4elixZgqysLAwePBiJiYno0aMHACArK6vBmiPR0dFITEzEgw8+iFdffRVdunTBSy+9hJtuuqn9vgsiIiJyWQ6vM6IHrjNCRETkepyyzggRERFRe2MxQkRERLpiMUJERES6atOiZ1qrG9bClViJiIhcR915u7XhqS5RjJSUlAAAFz4jIiJyQSUlJfD392/2eZeYTaOqKjIzM+Hr69visvOOqlvZNT09nbN0nIzHWls83trhsdYOj7W22uN4SylRUlKCLl26QFGaHxniEj0jiqIgKirKaf8+V3nVDo+1tni8tcNjrR0ea21d7PFuqUekDgewEhERka5YjBAREZGuOnUxYrFY8MQTT8Bisegdxe3xWGuLx1s7PNba4bHWlpbH2yUGsBIREZH76tQ9I0RERKQ/FiNERESkKxYjREREpCsWI0RERKQrty9Gli9fjujoaHh4eCA2NhZbtmxpsf2mTZsQGxsLDw8P9OrVC6+99ppGSV2fI8f6s88+w+TJkxEaGgo/Pz+MGzcOGzZs0DCta3P057rOtm3bYDQaMXz4cOcGdDOOHu+qqiosWrQIPXr0gMViQe/evfHWW29plNa1OXqsV61ahWHDhsHLywuRkZG44447kJeXp1Fa17V582Zce+216NKlC4QQ+Pzzz1vdx6nnR+nGPvroI2kymeR//vMfeeDAAfnAAw9Ib29veerUqSbbHz9+XHp5eckHHnhAHjhwQP7nP/+RJpNJfvLJJxondz2OHusHHnhAPv300/Lnn3+WR44ckQsXLpQmk0nu3r1b4+Sux9FjXaewsFD26tVLJiQkyGHDhmkT1g205Xhfd911csyYMTIpKUmeOHFC/vTTT3Lbtm0apnZNjh7rLVu2SEVR5L///W95/PhxuWXLFhkTEyOnT5+ucXLXk5iYKBctWiQ//fRTCUCuW7euxfbOPj+6dTEyevRoOW/evAbbBgwYIB977LEm2z/yyCNywIABDbbdc889cuzYsU7L6C4cPdZNGTRokFy8eHF7R3M7bT3WM2fOlH//+9/lE088wWLEAY4e72+++Ub6+/vLvLw8LeK5FUeP9bJly2SvXr0abHvppZdkVFSU0zK6I3uKEWefH932Mk11dTWSk5ORkJDQYHtCQgK2b9/e5D47duxo1H7KlCnYtWsXampqnJbV1bXlWF9IVVWUlJQgKCjIGRHdRluP9dtvv43U1FQ88cQTzo7oVtpyvL/88kvExcXhmWeeQdeuXdGvXz889NBDqKio0CKyy2rLsR4/fjxOnz6NxMRESClx5swZfPLJJ5g2bZoWkTsVZ58fXeJGeW2Rm5sLm82G8PDwBtvDw8ORnZ3d5D7Z2dlNtrdarcjNzUVkZKTT8rqythzrCz333HMoKyvDjBkznBHRbbTlWB89ehSPPfYYtmzZAqPRbX/lnaItx/v48ePYunUrPDw8sG7dOuTm5uK+++5Dfn4+x420oC3Hevz48Vi1ahVmzpyJyspKWK1WXHfddXj55Ze1iNypOPv86LY9I3WEEA2+llI22tZa+6a2U2OOHus6q1evxpNPPok1a9YgLCzMWfHcir3H2mazYdasWVi8eDH69eunVTy348jPtqqqEEJg1apVGD16NK6++mo8//zzeOedd9g7YgdHjvWBAwdw//334/HHH0dycjLWr1+PEydOYN68eVpE7XSceX50249JISEhMBgMjSrqnJycRtVdnYiIiCbbG41GBAcHOy2rq2vLsa6zZs0a3HnnnVi7di2uvPJKZ8Z0C44e65KSEuzatQspKSn485//DKD2ZCmlhNFoxMaNGzFp0iRNsruitvxsR0ZGomvXrg1umz5w4EBIKXH69Gn07dvXqZldVVuO9dKlSzFhwgQ8/PDDAIChQ4fC29sb8fHxeOqpp9ib3Y6cfX50254Rs9mM2NhYJCUlNdielJSE8ePHN7nPuHHjGrXfuHEj4uLiYDKZnJbV1bXlWAO1PSJz587Fhx9+yGu8dnL0WPv5+WHfvn3Ys2dP/WPevHno378/9uzZgzFjxmgV3SW15Wd7woQJyMzMRGlpaf22I0eOQFEUREVFOTWvK2vLsS4vL4eiNDyNGQwGAL99aqf24fTzY7sMg+2g6qaJrVy5Uh44cEDOnz9fent7y5MnT0oppXzsscfk7bffXt++burSgw8+KA8cOCBXrlzJqb12cvRYf/jhh9JoNMpXX31VZmVl1T8KCwv1+hZchqPH+kKcTeMYR493SUmJjIqKkjfffLPcv3+/3LRpk+zbt6/84x//qNe34DIcPdZvv/22NBqNcvny5TI1NVVu3bpVxsXFydGjR+v1LbiMkpISmZKSIlNSUiQA+fzzz8uUlJT6adRanx/duhiRUspXX31V9ujRQ5rNZjly5Ei5adOm+ufmzJkjL7300gbtf/jhBzlixAhpNptlz5495YoVKzRO7LocOdaXXnqpBNDoMWfOHO2DuyBHf67Px2LEcY4e74MHD8orr7xSenp6yqioKLlgwQJZXl6ucWrX5Oixfumll+SgQYOkp6enjIyMlLfddps8ffq0xqldz/fff9/ie7DW50chJfuyiIiISD9uO2aEiIiIXAOLESIiItIVixEiIiLSFYsRIiIi0hWLESIiItIVixEiIiLSFYsRIiIi0hWLESIiItIVixEiIiLSFYsRIiIi0hWLESIiItIVixEiIiLS1f8HmspPNlA6zP4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"散布図の点のサイズ、色を設定\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "sizes = np.random.rand(50) * 100\n",
    "colors = np.random.rand(50)\n",
    "plt.scatter(x, y, s=sizes, c=colors)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba05b588",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa2229ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-05-31</th>\n",
       "      <td>150.660004</td>\n",
       "      <td>146.839996</td>\n",
       "      <td>149.070007</td>\n",
       "      <td>148.839996</td>\n",
       "      <td>103718400.0</td>\n",
       "      <td>148.839996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-01</th>\n",
       "      <td>151.740005</td>\n",
       "      <td>147.679993</td>\n",
       "      <td>149.899994</td>\n",
       "      <td>148.710007</td>\n",
       "      <td>74286600.0</td>\n",
       "      <td>148.710007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-02</th>\n",
       "      <td>151.270004</td>\n",
       "      <td>146.860001</td>\n",
       "      <td>147.830002</td>\n",
       "      <td>151.210007</td>\n",
       "      <td>72232000.0</td>\n",
       "      <td>151.210007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close       Volume  \\\n",
       "Date                                                                      \n",
       "2022-05-31  150.660004  146.839996  149.070007  148.839996  103718400.0   \n",
       "2022-06-01  151.740005  147.679993  149.899994  148.710007   74286600.0   \n",
       "2022-06-02  151.270004  146.860001  147.830002  151.210007   72232000.0   \n",
       "\n",
       "             Adj Close  \n",
       "Date                    \n",
       "2022-05-31  148.839996  \n",
       "2022-06-01  148.710007  \n",
       "2022-06-02  151.210007  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"株価のデータを取得\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.DataReader('FB', 'yahoo', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.DataReader('GLD', 'yahoo', '2020-01-01')\n",
    "df_aapl.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d442b42d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3392a755",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/watarukoshimizu/opt/anaconda3/lib/python3.8/site-packages/scipy/__init__.py:138: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.1)\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion} is required for this version of \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "\n",
      "1 Failed download:\n",
      "- AAPL: ValueError(\"time data 'yahoo' does not match format '%Y-%m-%d'\")\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"株価と単純移動平均をグラフ化\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', 'yahoo', '2020-01-01')\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_aapl['SMA'].plot(figsize=(15,6), color='green')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4591a3b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ce89fd23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"Apple社とMeta社の株価を比較\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_meta['Close'].plot(figsize=(15,6), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88ebcf62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b91680b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>changing</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-06-02</th>\n",
       "      <td>151.27</td>\n",
       "      <td>146.86</td>\n",
       "      <td>147.83</td>\n",
       "      <td>151.21</td>\n",
       "      <td>72348100.0</td>\n",
       "      <td>151.21</td>\n",
       "      <td>2.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-03</th>\n",
       "      <td>147.97</td>\n",
       "      <td>144.46</td>\n",
       "      <td>146.90</td>\n",
       "      <td>145.38</td>\n",
       "      <td>88471400.0</td>\n",
       "      <td>145.38</td>\n",
       "      <td>-1.03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              High     Low    Open   Close      Volume  Adj Close  changing\n",
       "Date                                                                       \n",
       "2022-06-02  151.27  146.86  147.83  151.21  72348100.0     151.21      2.29\n",
       "2022-06-03  147.97  144.46  146.90  145.38  88471400.0     145.38     -1.03"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"株価の変化率を求める\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.get_data_yahoo('GLD', '2020-01-01')\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_meta['changing'] = (((df_meta['Close'] - df_meta['Open'])) / (df_meta['Open']) * 100)\n",
    "df_gold['changing'] = (((df_gold['Close'] - df_gold['Open'])) / (df_gold['Open']) * 100)\n",
    "df_aapl.tail(2).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87ebe90c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_5-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9d2c5ae9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandas_datareader'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-9a2920b244d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pandas_datareader'"
     ]
    }
   ],
   "source": [
    "\"\"\"3つの株価の変化率をグラフにする\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.DataReader('FB', 'yahoo', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.DataReader('GLD', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_meta['changing'] = (((df_meta['Close'] - df_meta['Open'])) / (df_meta['Open']) * 100)\n",
    "df_gold['changing'] = (((df_gold['Close'] - df_gold['Open'])) / (df_gold['Open']) * 100)\n",
    "df_aapl.tail(2).round(2)\n",
    "\n",
    "df_aapl['changing'].tail(100).plot(grid=True, figsize=(15,6), color='red')\n",
    "df_meta['changing'].tail(100).plot(grid=True, figsize=(15,6), color='blue')\n",
    "df_gold['changing'].tail(100).plot(grid=True, figsize=(15,6), color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acb40906",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_6-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f806c0ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>changing</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-11</th>\n",
       "      <td>175.179993</td>\n",
       "      <td>170.820007</td>\n",
       "      <td>172.320007</td>\n",
       "      <td>175.080002</td>\n",
       "      <td>76138300.0</td>\n",
       "      <td>174.600693</td>\n",
       "      <td>1.601668</td>\n",
       "      <td>162.740005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-12</th>\n",
       "      <td>177.179993</td>\n",
       "      <td>174.820007</td>\n",
       "      <td>176.119995</td>\n",
       "      <td>175.529999</td>\n",
       "      <td>74805200.0</td>\n",
       "      <td>175.049454</td>\n",
       "      <td>-0.334997</td>\n",
       "      <td>164.850006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-13</th>\n",
       "      <td>176.619995</td>\n",
       "      <td>171.789993</td>\n",
       "      <td>175.779999</td>\n",
       "      <td>172.190002</td>\n",
       "      <td>84505800.0</td>\n",
       "      <td>171.718597</td>\n",
       "      <td>-2.042324</td>\n",
       "      <td>165.119995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-14</th>\n",
       "      <td>173.779999</td>\n",
       "      <td>171.089996</td>\n",
       "      <td>171.339996</td>\n",
       "      <td>173.070007</td>\n",
       "      <td>80440800.0</td>\n",
       "      <td>172.596207</td>\n",
       "      <td>1.009695</td>\n",
       "      <td>163.199997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-18</th>\n",
       "      <td>172.539993</td>\n",
       "      <td>169.410004</td>\n",
       "      <td>171.509995</td>\n",
       "      <td>169.800003</td>\n",
       "      <td>90956700.0</td>\n",
       "      <td>169.335144</td>\n",
       "      <td>-0.997021</td>\n",
       "      <td>166.559998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-19</th>\n",
       "      <td>171.080002</td>\n",
       "      <td>165.940002</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>166.229996</td>\n",
       "      <td>94815000.0</td>\n",
       "      <td>165.774918</td>\n",
       "      <td>-2.217650</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-20</th>\n",
       "      <td>169.679993</td>\n",
       "      <td>164.179993</td>\n",
       "      <td>166.979996</td>\n",
       "      <td>164.509995</td>\n",
       "      <td>91420500.0</td>\n",
       "      <td>164.059616</td>\n",
       "      <td>-1.479220</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-21</th>\n",
       "      <td>166.330002</td>\n",
       "      <td>162.300003</td>\n",
       "      <td>164.419998</td>\n",
       "      <td>162.410004</td>\n",
       "      <td>122848900.0</td>\n",
       "      <td>161.965378</td>\n",
       "      <td>-1.222476</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-24</th>\n",
       "      <td>162.300003</td>\n",
       "      <td>154.699997</td>\n",
       "      <td>160.020004</td>\n",
       "      <td>161.619995</td>\n",
       "      <td>162294600.0</td>\n",
       "      <td>161.177521</td>\n",
       "      <td>0.999869</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-25</th>\n",
       "      <td>162.759995</td>\n",
       "      <td>157.020004</td>\n",
       "      <td>158.979996</td>\n",
       "      <td>159.779999</td>\n",
       "      <td>115798400.0</td>\n",
       "      <td>159.342575</td>\n",
       "      <td>0.503210</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-26</th>\n",
       "      <td>164.389999</td>\n",
       "      <td>157.820007</td>\n",
       "      <td>163.500000</td>\n",
       "      <td>159.690002</td>\n",
       "      <td>108275300.0</td>\n",
       "      <td>159.252823</td>\n",
       "      <td>-2.330274</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-27</th>\n",
       "      <td>163.839996</td>\n",
       "      <td>158.279999</td>\n",
       "      <td>162.449997</td>\n",
       "      <td>159.220001</td>\n",
       "      <td>121954600.0</td>\n",
       "      <td>158.784119</td>\n",
       "      <td>-1.988302</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-28</th>\n",
       "      <td>170.350006</td>\n",
       "      <td>162.800003</td>\n",
       "      <td>165.710007</td>\n",
       "      <td>170.330002</td>\n",
       "      <td>179935700.0</td>\n",
       "      <td>169.863693</td>\n",
       "      <td>2.788000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-31</th>\n",
       "      <td>175.000000</td>\n",
       "      <td>169.509995</td>\n",
       "      <td>170.160004</td>\n",
       "      <td>174.779999</td>\n",
       "      <td>115541600.0</td>\n",
       "      <td>174.301514</td>\n",
       "      <td>2.715089</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-01</th>\n",
       "      <td>174.839996</td>\n",
       "      <td>172.309998</td>\n",
       "      <td>174.009995</td>\n",
       "      <td>174.610001</td>\n",
       "      <td>86213900.0</td>\n",
       "      <td>174.131973</td>\n",
       "      <td>0.344811</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-02</th>\n",
       "      <td>175.880005</td>\n",
       "      <td>173.330002</td>\n",
       "      <td>174.750000</td>\n",
       "      <td>175.839996</td>\n",
       "      <td>84914300.0</td>\n",
       "      <td>175.358612</td>\n",
       "      <td>0.623746</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-03</th>\n",
       "      <td>176.240005</td>\n",
       "      <td>172.119995</td>\n",
       "      <td>174.479996</td>\n",
       "      <td>172.899994</td>\n",
       "      <td>89418100.0</td>\n",
       "      <td>172.426651</td>\n",
       "      <td>-0.905549</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-04</th>\n",
       "      <td>174.100006</td>\n",
       "      <td>170.679993</td>\n",
       "      <td>171.679993</td>\n",
       "      <td>172.389999</td>\n",
       "      <td>82465400.0</td>\n",
       "      <td>172.137085</td>\n",
       "      <td>0.413564</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-07</th>\n",
       "      <td>173.949997</td>\n",
       "      <td>170.949997</td>\n",
       "      <td>172.860001</td>\n",
       "      <td>171.660004</td>\n",
       "      <td>77251200.0</td>\n",
       "      <td>171.408157</td>\n",
       "      <td>-0.694202</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-08</th>\n",
       "      <td>175.350006</td>\n",
       "      <td>171.429993</td>\n",
       "      <td>171.729996</td>\n",
       "      <td>174.830002</td>\n",
       "      <td>74829200.0</td>\n",
       "      <td>174.573502</td>\n",
       "      <td>1.805163</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-09</th>\n",
       "      <td>176.649994</td>\n",
       "      <td>174.899994</td>\n",
       "      <td>176.050003</td>\n",
       "      <td>176.279999</td>\n",
       "      <td>71285000.0</td>\n",
       "      <td>176.021378</td>\n",
       "      <td>0.130642</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-10</th>\n",
       "      <td>175.479996</td>\n",
       "      <td>171.550003</td>\n",
       "      <td>174.139999</td>\n",
       "      <td>172.119995</td>\n",
       "      <td>90865900.0</td>\n",
       "      <td>171.867477</td>\n",
       "      <td>-1.159989</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-11</th>\n",
       "      <td>173.080002</td>\n",
       "      <td>168.039993</td>\n",
       "      <td>172.330002</td>\n",
       "      <td>168.639999</td>\n",
       "      <td>98670700.0</td>\n",
       "      <td>168.392593</td>\n",
       "      <td>-2.141242</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14</th>\n",
       "      <td>169.580002</td>\n",
       "      <td>166.559998</td>\n",
       "      <td>167.369995</td>\n",
       "      <td>168.880005</td>\n",
       "      <td>86185500.0</td>\n",
       "      <td>168.632233</td>\n",
       "      <td>0.902199</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15</th>\n",
       "      <td>172.949997</td>\n",
       "      <td>170.250000</td>\n",
       "      <td>170.970001</td>\n",
       "      <td>172.789993</td>\n",
       "      <td>62527400.0</td>\n",
       "      <td>172.536499</td>\n",
       "      <td>1.064510</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-16</th>\n",
       "      <td>173.339996</td>\n",
       "      <td>170.050003</td>\n",
       "      <td>171.850006</td>\n",
       "      <td>172.550003</td>\n",
       "      <td>61177400.0</td>\n",
       "      <td>172.296860</td>\n",
       "      <td>0.407330</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-17</th>\n",
       "      <td>171.910004</td>\n",
       "      <td>168.470001</td>\n",
       "      <td>171.029999</td>\n",
       "      <td>168.880005</td>\n",
       "      <td>69589300.0</td>\n",
       "      <td>168.632233</td>\n",
       "      <td>-1.257086</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-18</th>\n",
       "      <td>170.539993</td>\n",
       "      <td>166.190002</td>\n",
       "      <td>169.820007</td>\n",
       "      <td>167.300003</td>\n",
       "      <td>82772700.0</td>\n",
       "      <td>167.054550</td>\n",
       "      <td>-1.483927</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-22</th>\n",
       "      <td>166.690002</td>\n",
       "      <td>162.149994</td>\n",
       "      <td>164.979996</td>\n",
       "      <td>164.320007</td>\n",
       "      <td>91162800.0</td>\n",
       "      <td>164.078934</td>\n",
       "      <td>-0.400041</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-23</th>\n",
       "      <td>166.149994</td>\n",
       "      <td>159.750000</td>\n",
       "      <td>165.539993</td>\n",
       "      <td>160.070007</td>\n",
       "      <td>90009200.0</td>\n",
       "      <td>159.835175</td>\n",
       "      <td>-3.304329</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-24</th>\n",
       "      <td>162.850006</td>\n",
       "      <td>152.000000</td>\n",
       "      <td>152.580002</td>\n",
       "      <td>162.740005</td>\n",
       "      <td>141147500.0</td>\n",
       "      <td>162.501251</td>\n",
       "      <td>6.658804</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-25</th>\n",
       "      <td>165.119995</td>\n",
       "      <td>160.869995</td>\n",
       "      <td>163.839996</td>\n",
       "      <td>164.850006</td>\n",
       "      <td>91974200.0</td>\n",
       "      <td>164.608154</td>\n",
       "      <td>0.616461</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-28</th>\n",
       "      <td>165.419998</td>\n",
       "      <td>162.429993</td>\n",
       "      <td>163.059998</td>\n",
       "      <td>165.119995</td>\n",
       "      <td>95056600.0</td>\n",
       "      <td>164.877747</td>\n",
       "      <td>1.263337</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-01</th>\n",
       "      <td>166.600006</td>\n",
       "      <td>161.970001</td>\n",
       "      <td>164.699997</td>\n",
       "      <td>163.199997</td>\n",
       "      <td>83474400.0</td>\n",
       "      <td>162.960571</td>\n",
       "      <td>-0.910747</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-02</th>\n",
       "      <td>167.360001</td>\n",
       "      <td>162.949997</td>\n",
       "      <td>164.389999</td>\n",
       "      <td>166.559998</td>\n",
       "      <td>79724800.0</td>\n",
       "      <td>166.315643</td>\n",
       "      <td>1.320031</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close       Volume  \\\n",
       "Date                                                                      \n",
       "2022-01-11  175.179993  170.820007  172.320007  175.080002   76138300.0   \n",
       "2022-01-12  177.179993  174.820007  176.119995  175.529999   74805200.0   \n",
       "2022-01-13  176.619995  171.789993  175.779999  172.190002   84505800.0   \n",
       "2022-01-14  173.779999  171.089996  171.339996  173.070007   80440800.0   \n",
       "2022-01-18  172.539993  169.410004  171.509995  169.800003   90956700.0   \n",
       "2022-01-19  171.080002  165.940002  170.000000  166.229996   94815000.0   \n",
       "2022-01-20  169.679993  164.179993  166.979996  164.509995   91420500.0   \n",
       "2022-01-21  166.330002  162.300003  164.419998  162.410004  122848900.0   \n",
       "2022-01-24  162.300003  154.699997  160.020004  161.619995  162294600.0   \n",
       "2022-01-25  162.759995  157.020004  158.979996  159.779999  115798400.0   \n",
       "2022-01-26  164.389999  157.820007  163.500000  159.690002  108275300.0   \n",
       "2022-01-27  163.839996  158.279999  162.449997  159.220001  121954600.0   \n",
       "2022-01-28  170.350006  162.800003  165.710007  170.330002  179935700.0   \n",
       "2022-01-31  175.000000  169.509995  170.160004  174.779999  115541600.0   \n",
       "2022-02-01  174.839996  172.309998  174.009995  174.610001   86213900.0   \n",
       "2022-02-02  175.880005  173.330002  174.750000  175.839996   84914300.0   \n",
       "2022-02-03  176.240005  172.119995  174.479996  172.899994   89418100.0   \n",
       "2022-02-04  174.100006  170.679993  171.679993  172.389999   82465400.0   \n",
       "2022-02-07  173.949997  170.949997  172.860001  171.660004   77251200.0   \n",
       "2022-02-08  175.350006  171.429993  171.729996  174.830002   74829200.0   \n",
       "2022-02-09  176.649994  174.899994  176.050003  176.279999   71285000.0   \n",
       "2022-02-10  175.479996  171.550003  174.139999  172.119995   90865900.0   \n",
       "2022-02-11  173.080002  168.039993  172.330002  168.639999   98670700.0   \n",
       "2022-02-14  169.580002  166.559998  167.369995  168.880005   86185500.0   \n",
       "2022-02-15  172.949997  170.250000  170.970001  172.789993   62527400.0   \n",
       "2022-02-16  173.339996  170.050003  171.850006  172.550003   61177400.0   \n",
       "2022-02-17  171.910004  168.470001  171.029999  168.880005   69589300.0   \n",
       "2022-02-18  170.539993  166.190002  169.820007  167.300003   82772700.0   \n",
       "2022-02-22  166.690002  162.149994  164.979996  164.320007   91162800.0   \n",
       "2022-02-23  166.149994  159.750000  165.539993  160.070007   90009200.0   \n",
       "2022-02-24  162.850006  152.000000  152.580002  162.740005  141147500.0   \n",
       "2022-02-25  165.119995  160.869995  163.839996  164.850006   91974200.0   \n",
       "2022-02-28  165.419998  162.429993  163.059998  165.119995   95056600.0   \n",
       "2022-03-01  166.600006  161.970001  164.699997  163.199997   83474400.0   \n",
       "2022-03-02  167.360001  162.949997  164.389999  166.559998   79724800.0   \n",
       "\n",
       "             Adj Close  changing       label  \n",
       "Date                                          \n",
       "2022-01-11  174.600693  1.601668  162.740005  \n",
       "2022-01-12  175.049454 -0.334997  164.850006  \n",
       "2022-01-13  171.718597 -2.042324  165.119995  \n",
       "2022-01-14  172.596207  1.009695  163.199997  \n",
       "2022-01-18  169.335144 -0.997021  166.559998  \n",
       "2022-01-19  165.774918 -2.217650         NaN  \n",
       "2022-01-20  164.059616 -1.479220         NaN  \n",
       "2022-01-21  161.965378 -1.222476         NaN  \n",
       "2022-01-24  161.177521  0.999869         NaN  \n",
       "2022-01-25  159.342575  0.503210         NaN  \n",
       "2022-01-26  159.252823 -2.330274         NaN  \n",
       "2022-01-27  158.784119 -1.988302         NaN  \n",
       "2022-01-28  169.863693  2.788000         NaN  \n",
       "2022-01-31  174.301514  2.715089         NaN  \n",
       "2022-02-01  174.131973  0.344811         NaN  \n",
       "2022-02-02  175.358612  0.623746         NaN  \n",
       "2022-02-03  172.426651 -0.905549         NaN  \n",
       "2022-02-04  172.137085  0.413564         NaN  \n",
       "2022-02-07  171.408157 -0.694202         NaN  \n",
       "2022-02-08  174.573502  1.805163         NaN  \n",
       "2022-02-09  176.021378  0.130642         NaN  \n",
       "2022-02-10  171.867477 -1.159989         NaN  \n",
       "2022-02-11  168.392593 -2.141242         NaN  \n",
       "2022-02-14  168.632233  0.902199         NaN  \n",
       "2022-02-15  172.536499  1.064510         NaN  \n",
       "2022-02-16  172.296860  0.407330         NaN  \n",
       "2022-02-17  168.632233 -1.257086         NaN  \n",
       "2022-02-18  167.054550 -1.483927         NaN  \n",
       "2022-02-22  164.078934 -0.400041         NaN  \n",
       "2022-02-23  159.835175 -3.304329         NaN  \n",
       "2022-02-24  162.501251  6.658804         NaN  \n",
       "2022-02-25  164.608154  0.616461         NaN  \n",
       "2022-02-28  164.877747  1.263337         NaN  \n",
       "2022-03-01  162.960571 -0.910747         NaN  \n",
       "2022-03-02  166.315643  1.320031         NaN  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"終値を格納する\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c6a9ade",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8fb02dda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.67979531, -1.64395313, -1.67230516, -1.64795121, -0.30619473,\n",
       "        -1.64839194],\n",
       "       [-1.62615236, -1.59921311, -1.62302167, -1.59554645,  0.28308639,\n",
       "        -1.59731941],\n",
       "       [-1.62630755, -1.5888764 , -1.61591419, -1.6183856 ,  0.46734763,\n",
       "        -1.6195772 ],\n",
       "       ...,\n",
       "       [ 0.23584352,  0.22013118,  0.2142924 ,  0.18128486,  0.05751321,\n",
       "         0.20526089],\n",
       "       [ 0.19522386,  0.22139347,  0.2224155 ,  0.20881655, -0.57846881,\n",
       "         0.23256576],\n",
       "       [ 0.30219939,  0.24285625,  0.25865531,  0.2923511 , -0.4668421 ,\n",
       "         0.31541215]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"学習させるデータをXに格納\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "X = sklearn.preprocessing.scale(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ff0a025",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b813d416c36fb0bd22d28e8500bf7131554964114722910e55b20ab4a08edb2e"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_8-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23113868",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"正解のデータをyに格納\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)\n",
    "\n",
    "y = np.array(df_aapl['label'])\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6813ace",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_9-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6dc48576",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7443885776870891"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"機械学習オブジェクトを作成して学習させる\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "accuracy = lr.score(X_test, y_test)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c63fec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_10-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d18082f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([145.89457466, 151.08429702, 151.46790487, 151.32164895,\n",
       "       150.04356983, 142.19276883, 136.85235097, 140.95639718,\n",
       "       141.6444782 , 140.10682579, 144.58289355, 148.66421737,\n",
       "       150.28318469, 150.7603316 , 150.10132241, 151.53651589,\n",
       "       151.30832094, 150.6963459 , 151.6180574 , 153.10018648,\n",
       "       151.49859625, 147.76045702, 144.28910999, 147.29541139,\n",
       "       149.20902314, 149.47644569, 151.41531689, 146.73907945,\n",
       "       144.9647762 , 145.7859464 ])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"過去30日間から未来の30日間を予測\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "predicted_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6a57a37",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3ad20a60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"未来の株価の予測をグラフにする\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "\n",
    "df_aapl['Predict'] = np.nan\n",
    "\n",
    "last_date = df_aapl.iloc[-1].name\n",
    "one_day = 86400\n",
    "next_day = last_date.timestamp() + one_day\n",
    "\n",
    "for data in predicted_data:\n",
    "    next_date = datetime.datetime.fromtimestamp(next_day)\n",
    "    df_aapl.loc[next_date] = np.append([np.nan] * (len(df_aapl.columns)-1), data)\n",
    "    next_day += one_day\n",
    "\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='green')\n",
    "df_aapl['Predict'].plot(figsize=(15,6), color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "888994ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\c13_6_12-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ab3744d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "Buy Now.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"株を買うべきか売るべきか判断する\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "\n",
    "df_aapl['Predict'] = np.nan\n",
    "\n",
    "last_date = df_aapl.iloc[-1].name\n",
    "one_day = 86400\n",
    "next_day = last_date.timestamp() + one_day\n",
    "\n",
    "for data in predicted_data:\n",
    "    next_date = datetime.datetime.fromtimestamp(next_day)\n",
    "    df_aapl.loc[next_date] = np.append([np.nan] * (len(df_aapl.columns)-1), data)\n",
    "    next_day += one_day\n",
    "\n",
    "stock_after_a_month = df_aapl['Predict'][-1]\n",
    "stock_today = df_aapl['Close'][-31]\n",
    "if stock_after_a_month > stock_today:\n",
    "    print('Buy Now.')\n",
    "else:\n",
    "    print('Sell Now.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "920b3737",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4fdfdf4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"numpyで配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([1, 2, 3])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81a84238",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1868a879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"2次元配列を作る\"\"\"\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3657383",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7bd21801",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "\"\"\"配列のshapeプロパティ\"\"\"\n",
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cec7f6dd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1f1a983",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "\"\"\"ndimプロパティ\"\"\"\n",
    "a.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1adbe9e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_5-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b3b6605",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "\"\"\"dtypeプロパティ\"\"\"\n",
    "a.dtype"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_6-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e20d07c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "\"\"\"sizeプロパティ\"\"\"\n",
    "a.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2cf64c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7607bd68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  5, 10, 15, 20, 25])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"arange関数\"\"\"\n",
    "np.arange(0, 30, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4742c808",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_8-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53a53b91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"arange関数で浮動小数点数の配列を作る\"\"\"\n",
    "np.arange(0, 2, 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6ee3ecf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_9-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6eeeb1db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"zeros関数で2次元配列を作る\"\"\"\n",
    "np.zeros((3, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d28936c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_10-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2ef9f78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0],\n",
       "       [0, 0, 0, 0],\n",
       "       [0, 0, 0, 0]], dtype=int16)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"zeros関数でデータ型を指定\"\"\"\n",
    "np.zeros((3, 4), dtype=np.int16)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45097c5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 1, 1, 1],\n",
       "       [1, 1, 1, 1],\n",
       "       [1, 1, 1, 1]], dtype=int16)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"ones関数で2次元配列を作る\"\"\"\n",
    "np.ones((3, 4), dtype=np.int16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddc5aa32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_12-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8baa383f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"linspace関数で2次元配列を作る\"\"\"\n",
    "np.linspace(0, 2, 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "093858a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_13-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1206a5b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [3, 4, 5]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"reshapeメソッドで2次元配列を作る\"\"\"\n",
    "a = np.arange(6).reshape(2, 3)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "523507da",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_14-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d6487db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 3],\n",
       "       [1, 4],\n",
       "       [2, 5]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"reshapeメソッドで2次元配列を作る\"\"\"\n",
    "a = np.arange(6).reshape(2, 3)\n",
    "a.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d78e354c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_15-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a54bf161",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\"\"\"reshapeメソッドで3次元配列を作る\"\"\"\n",
    "a = np.arange(24).reshape(2, 3, 4)\n",
    "a"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_16-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "286621c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\"\"\"3つの配列x、y、zを作る\"\"\"\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "print(x, y, z)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_17-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66810c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "\"\"\"append関数で1つの配列にまとめる\"\"\"\n",
    "np.append(x, y)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_18-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b1ec5043",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  2,  4,  6,  8],\n",
       "       [ 0,  1,  2,  3,  4],\n",
       "       [ 0, 20, 40, 60, 80]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "\"\"\"vstack関数で配列を縦に積み上げる\"\"\"\n",
    "np.vstack([x,y,z])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46229dec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_19-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d60d1f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "\"\"\"hstack関数で配列を横に連結する\"\"\"\n",
    "np.hstack([x,y,z])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_20-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e8e71d7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10 20 30 40 50] [1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"2つの配列a、bを作る\"\"\"\n",
    "a = np.arange(10, 51, 10)\n",
    "b = np.arange(1, 6)\n",
    "print(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e4a49cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_21-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04d4b734",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9, 18, 27, 36, 45])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "b = np.arange(1, 6)\n",
    "\"\"\"配列同士の引き算\"\"\"\n",
    "a - b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af565995",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_22-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "935251c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "\"\"\"配列を比較演算子で演算\"\"\"\n",
    "a  < 30"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_23-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "46fb9a8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.0729105 , 0.72651893, 0.92830202],\n",
       "       [0.51838171, 0.83911518, 0.4072436 ]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"ランダムな数値からなる2次元配列\"\"\"\n",
    "a = np.random.random((2, 3))\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1026a520",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_24-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db771d03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"1から10までの数値の合計を求める\"\"\"\n",
    "a = np.arange(1, 11)\n",
    "a.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a84089e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_25-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e478eace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(1, 11)\n",
    "\"\"\"配列の平均値を得る\"\"\"\n",
    "a.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2c48104",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_26-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e4f4b6e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(1, 11)\n",
    "\"\"\"配列の最大値、最小値を得る\"\"\"\n",
    "print(a.max(), a.min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61408f05",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_27-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03b92164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"1から10までの数値の2次元配列を作る\"\"\"\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f19e7c0d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_28-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4c830d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7,  9, 11, 13, 15])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "\"\"\"2次元配列の縦の列の合計を得る\"\"\"\n",
    "a.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25ba942a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_29-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db895287",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15, 40])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "\"\"\"2次元配列の横の行の合計を得る\"\"\"\n",
    "a.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d8188f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_30-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d4cfa8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,    1,    2, ..., 9997, 9998, 9999])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"要素数10,000の配列を作る\"\"\"\n",
    "a = np.arange(10000)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac46e3d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_2_31-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e2264708",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,\n",
       "         11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,\n",
       "         22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,\n",
       "         33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,\n",
       "         44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n",
       "         55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,\n",
       "         66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,\n",
       "         77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,\n",
       "         88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,\n",
       "         99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,\n",
       "        110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,\n",
       "        121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,\n",
       "        132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,\n",
       "        143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,\n",
       "        154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,\n",
       "        165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,\n",
       "        176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,\n",
       "        187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,\n",
       "        198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,\n",
       "        209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,\n",
       "        220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,\n",
       "        231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,\n",
       "        242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,\n",
       "        253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,\n",
       "        264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,\n",
       "        275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,\n",
       "        286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,\n",
       "        297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,\n",
       "        308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,\n",
       "        319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,\n",
       "        330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,\n",
       "        341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,\n",
       "        352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,\n",
       "        363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,\n",
       "        374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,\n",
       "        385,  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,\n",
       "        396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,\n",
       "        407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,\n",
       "        418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,\n",
       "        429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,\n",
       "        440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,\n",
       "        451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,\n",
       "        462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,\n",
       "        473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,\n",
       "        484,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,\n",
       "        495,  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,\n",
       "        506,  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,\n",
       "        517,  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,\n",
       "        528,  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,\n",
       "        539,  540,  541,  542,  543,  544,  545,  546,  547,  548,  549,\n",
       "        550,  551,  552,  553,  554,  555,  556,  557,  558,  559,  560,\n",
       "        561,  562,  563,  564,  565,  566,  567,  568,  569,  570,  571,\n",
       "        572,  573,  574,  575,  576,  577,  578,  579,  580,  581,  582,\n",
       "        583,  584,  585,  586,  587,  588,  589,  590,  591,  592,  593,\n",
       "        594,  595,  596,  597,  598,  599,  600,  601,  602,  603,  604,\n",
       "        605,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,\n",
       "        616,  617,  618,  619,  620,  621,  622,  623,  624,  625,  626,\n",
       "        627,  628,  629,  630,  631,  632,  633,  634,  635,  636,  637,\n",
       "        638,  639,  640,  641,  642,  643,  644,  645,  646,  647,  648,\n",
       "        649,  650,  651,  652,  653,  654,  655,  656,  657,  658,  659,\n",
       "        660,  661,  662,  663,  664,  665,  666,  667,  668,  669,  670,\n",
       "        671,  672,  673,  674,  675,  676,  677,  678,  679,  680,  681,\n",
       "        682,  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,\n",
       "        693,  694,  695,  696,  697,  698,  699,  700,  701,  702,  703,\n",
       "        704,  705,  706,  707,  708,  709,  710,  711,  712,  713,  714,\n",
       "        715,  716,  717,  718,  719,  720,  721,  722,  723,  724,  725,\n",
       "        726,  727,  728,  729,  730,  731,  732,  733,  734,  735,  736,\n",
       "        737,  738,  739,  740,  741,  742,  743,  744,  745,  746,  747,\n",
       "        748,  749,  750,  751,  752,  753,  754,  755,  756,  757,  758,\n",
       "        759,  760,  761,  762,  763,  764,  765,  766,  767,  768,  769,\n",
       "        770,  771,  772,  773,  774,  775,  776,  777,  778,  779,  780,\n",
       "        781,  782,  783,  784,  785,  786,  787,  788,  789,  790,  791,\n",
       "        792,  793,  794,  795,  796,  797,  798,  799,  800,  801,  802,\n",
       "        803,  804,  805,  806,  807,  808,  809,  810,  811,  812,  813,\n",
       "        814,  815,  816,  817,  818,  819,  820,  821,  822,  823,  824,\n",
       "        825,  826,  827,  828,  829,  830,  831,  832,  833,  834,  835,\n",
       "        836,  837,  838,  839,  840,  841,  842,  843,  844,  845,  846,\n",
       "        847,  848,  849,  850,  851,  852,  853,  854,  855,  856,  857,\n",
       "        858,  859,  860,  861,  862,  863,  864,  865,  866,  867,  868,\n",
       "        869,  870,  871,  872,  873,  874,  875,  876,  877,  878,  879,\n",
       "        880,  881,  882,  883,  884,  885,  886,  887,  888,  889,  890,\n",
       "        891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,\n",
       "        902,  903,  904,  905,  906,  907,  908,  909,  910,  911,  912,\n",
       "        913,  914,  915,  916,  917,  918,  919,  920,  921,  922,  923,\n",
       "        924,  925,  926,  927,  928,  929,  930,  931,  932,  933,  934,\n",
       "        935,  936,  937,  938,  939,  940,  941,  942,  943,  944,  945,\n",
       "        946,  947,  948,  949,  950,  951,  952,  953,  954,  955,  956,\n",
       "        957,  958,  959,  960,  961,  962,  963,  964,  965,  966,  967,\n",
       "        968,  969,  970,  971,  972,  973,  974,  975,  976,  977,  978,\n",
       "        979,  980,  981,  982,  983,  984,  985,  986,  987,  988,  989,\n",
       "        990,  991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,\n",
       "       1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,\n",
       "       1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,\n",
       "       1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,\n",
       "       1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,\n",
       "       1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,\n",
       "       1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,\n",
       "       1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,\n",
       "       1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,\n",
       "       1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,\n",
       "       1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,\n",
       "       1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,\n",
       "       1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,\n",
       "       1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,\n",
       "       1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,\n",
       "       1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,\n",
       "       1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,\n",
       "       1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,\n",
       "       1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,\n",
       "       1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,\n",
       "       1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,\n",
       "       1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,\n",
       "       1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,\n",
       "       1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,\n",
       "       1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,\n",
       "       1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,\n",
       "       1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,\n",
       "       1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,\n",
       "       1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,\n",
       "       1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,\n",
       "       1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,\n",
       "       1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,\n",
       "       1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,\n",
       "       1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,\n",
       "       1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,\n",
       "       1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,\n",
       "       1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,\n",
       "       1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,\n",
       "       1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,\n",
       "       1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,\n",
       "       1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,\n",
       "       1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,\n",
       "       1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,\n",
       "       1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,\n",
       "       1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,\n",
       "       1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,\n",
       "       1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,\n",
       "       1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,\n",
       "       1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,\n",
       "       1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,\n",
       "       1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,\n",
       "       1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,\n",
       "       1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,\n",
       "       1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,\n",
       "       1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,\n",
       "       1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,\n",
       "       1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,\n",
       "       1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,\n",
       "       1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,\n",
       "       1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,\n",
       "       1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,\n",
       "       1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,\n",
       "       1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,\n",
       "       1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,\n",
       "       1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,\n",
       "       1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,\n",
       "       1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,\n",
       "       1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,\n",
       "       1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,\n",
       "       1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,\n",
       "       1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,\n",
       "       1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,\n",
       "       1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,\n",
       "       1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,\n",
       "       1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,\n",
       "       1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,\n",
       "       1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,\n",
       "       1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,\n",
       "       1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,\n",
       "       1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,\n",
       "       1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,\n",
       "       1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,\n",
       "       1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,\n",
       "       1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,\n",
       "       1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,\n",
       "       1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,\n",
       "       1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,\n",
       "       1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,\n",
       "       1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,\n",
       "       1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,\n",
       "       1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,\n",
       "       1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n",
       "       2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\n",
       "       2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,\n",
       "       2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,\n",
       "       2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,\n",
       "       2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,\n",
       "       2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,\n",
       "       2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,\n",
       "       2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,\n",
       "       2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,\n",
       "       2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,\n",
       "       2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,\n",
       "       2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,\n",
       "       2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,\n",
       "       2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,\n",
       "       2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,\n",
       "       2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,\n",
       "       2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,\n",
       "       2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,\n",
       "       2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,\n",
       "       2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,\n",
       "       2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,\n",
       "       2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,\n",
       "       2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,\n",
       "       2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265,\n",
       "       2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,\n",
       "       2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,\n",
       "       2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,\n",
       "       2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,\n",
       "       2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320,\n",
       "       2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331,\n",
       "       2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,\n",
       "       2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353,\n",
       "       2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364,\n",
       "       2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375,\n",
       "       2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386,\n",
       "       2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,\n",
       "       2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408,\n",
       "       2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,\n",
       "       2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,\n",
       "       2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441,\n",
       "       2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452,\n",
       "       2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463,\n",
       "       2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,\n",
       "       2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485,\n",
       "       2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496,\n",
       "       2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,\n",
       "       2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518,\n",
       "       2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,\n",
       "       2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540,\n",
       "       2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,\n",
       "       2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562,\n",
       "       2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573,\n",
       "       2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584,\n",
       "       2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595,\n",
       "       2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606,\n",
       "       2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617,\n",
       "       2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628,\n",
       "       2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,\n",
       "       2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650,\n",
       "       2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661,\n",
       "       2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672,\n",
       "       2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,\n",
       "       2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694,\n",
       "       2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705,\n",
       "       2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716,\n",
       "       2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,\n",
       "       2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738,\n",
       "       2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,\n",
       "       2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,\n",
       "       2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,\n",
       "       2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782,\n",
       "       2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793,\n",
       "       2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804,\n",
       "       2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815,\n",
       "       2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826,\n",
       "       2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837,\n",
       "       2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848,\n",
       "       2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859,\n",
       "       2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,\n",
       "       2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,\n",
       "       2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892,\n",
       "       2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903,\n",
       "       2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914,\n",
       "       2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925,\n",
       "       2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936,\n",
       "       2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947,\n",
       "       2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958,\n",
       "       2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,\n",
       "       2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980,\n",
       "       2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991,\n",
       "       2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002,\n",
       "       3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013,\n",
       "       3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024,\n",
       "       3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035,\n",
       "       3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046,\n",
       "       3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057,\n",
       "       3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068,\n",
       "       3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,\n",
       "       3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090,\n",
       "       3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101,\n",
       "       3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112,\n",
       "       3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123,\n",
       "       3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134,\n",
       "       3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145,\n",
       "       3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156,\n",
       "       3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167,\n",
       "       3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178,\n",
       "       3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189,\n",
       "       3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200,\n",
       "       3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,\n",
       "       3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222,\n",
       "       3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233,\n",
       "       3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244,\n",
       "       3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,\n",
       "       3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266,\n",
       "       3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277,\n",
       "       3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288,\n",
       "       3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299,\n",
       "       3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310,\n",
       "       3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321,\n",
       "       3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332,\n",
       "       3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343,\n",
       "       3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354,\n",
       "       3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365,\n",
       "       3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376,\n",
       "       3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387,\n",
       "       3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398,\n",
       "       3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409,\n",
       "       3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420,\n",
       "       3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431,\n",
       "       3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442,\n",
       "       3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453,\n",
       "       3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464,\n",
       "       3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475,\n",
       "       3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486,\n",
       "       3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497,\n",
       "       3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508,\n",
       "       3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519,\n",
       "       3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530,\n",
       "       3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541,\n",
       "       3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552,\n",
       "       3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563,\n",
       "       3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574,\n",
       "       3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585,\n",
       "       3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596,\n",
       "       3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607,\n",
       "       3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618,\n",
       "       3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629,\n",
       "       3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640,\n",
       "       3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651,\n",
       "       3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662,\n",
       "       3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673,\n",
       "       3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684,\n",
       "       3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695,\n",
       "       3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706,\n",
       "       3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717,\n",
       "       3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728,\n",
       "       3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739,\n",
       "       3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750,\n",
       "       3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761,\n",
       "       3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772,\n",
       "       3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783,\n",
       "       3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794,\n",
       "       3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805,\n",
       "       3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816,\n",
       "       3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827,\n",
       "       3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838,\n",
       "       3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849,\n",
       "       3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860,\n",
       "       3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871,\n",
       "       3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882,\n",
       "       3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893,\n",
       "       3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904,\n",
       "       3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915,\n",
       "       3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926,\n",
       "       3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937,\n",
       "       3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948,\n",
       "       3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959,\n",
       "       3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970,\n",
       "       3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981,\n",
       "       3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992,\n",
       "       3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003,\n",
       "       4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014,\n",
       "       4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025,\n",
       "       4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036,\n",
       "       4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047,\n",
       "       4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058,\n",
       "       4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069,\n",
       "       4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080,\n",
       "       4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091,\n",
       "       4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102,\n",
       "       4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113,\n",
       "       4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124,\n",
       "       4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135,\n",
       "       4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146,\n",
       "       4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157,\n",
       "       4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168,\n",
       "       4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179,\n",
       "       4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190,\n",
       "       4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201,\n",
       "       4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212,\n",
       "       4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223,\n",
       "       4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234,\n",
       "       4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245,\n",
       "       4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256,\n",
       "       4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267,\n",
       "       4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278,\n",
       "       4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289,\n",
       "       4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300,\n",
       "       4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311,\n",
       "       4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,\n",
       "       4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333,\n",
       "       4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344,\n",
       "       4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355,\n",
       "       4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366,\n",
       "       4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377,\n",
       "       4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388,\n",
       "       4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399,\n",
       "       4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410,\n",
       "       4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421,\n",
       "       4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432,\n",
       "       4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443,\n",
       "       4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454,\n",
       "       4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465,\n",
       "       4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476,\n",
       "       4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487,\n",
       "       4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498,\n",
       "       4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509,\n",
       "       4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520,\n",
       "       4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531,\n",
       "       4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542,\n",
       "       4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553,\n",
       "       4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564,\n",
       "       4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575,\n",
       "       4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586,\n",
       "       4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597,\n",
       "       4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608,\n",
       "       4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619,\n",
       "       4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630,\n",
       "       4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641,\n",
       "       4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652,\n",
       "       4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663,\n",
       "       4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674,\n",
       "       4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685,\n",
       "       4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696,\n",
       "       4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707,\n",
       "       4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718,\n",
       "       4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729,\n",
       "       4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740,\n",
       "       4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751,\n",
       "       4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762,\n",
       "       4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773,\n",
       "       4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784,\n",
       "       4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795,\n",
       "       4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806,\n",
       "       4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817,\n",
       "       4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828,\n",
       "       4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839,\n",
       "       4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850,\n",
       "       4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861,\n",
       "       4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872,\n",
       "       4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883,\n",
       "       4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894,\n",
       "       4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905,\n",
       "       4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916,\n",
       "       4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927,\n",
       "       4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938,\n",
       "       4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949,\n",
       "       4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960,\n",
       "       4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971,\n",
       "       4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982,\n",
       "       4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993,\n",
       "       4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004,\n",
       "       5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015,\n",
       "       5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026,\n",
       "       5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037,\n",
       "       5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048,\n",
       "       5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059,\n",
       "       5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070,\n",
       "       5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081,\n",
       "       5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092,\n",
       "       5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103,\n",
       "       5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114,\n",
       "       5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125,\n",
       "       5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136,\n",
       "       5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147,\n",
       "       5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158,\n",
       "       5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169,\n",
       "       5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180,\n",
       "       5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191,\n",
       "       5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202,\n",
       "       5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213,\n",
       "       5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224,\n",
       "       5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235,\n",
       "       5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246,\n",
       "       5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257,\n",
       "       5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268,\n",
       "       5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279,\n",
       "       5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290,\n",
       "       5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301,\n",
       "       5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312,\n",
       "       5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323,\n",
       "       5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334,\n",
       "       5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345,\n",
       "       5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356,\n",
       "       5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367,\n",
       "       5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378,\n",
       "       5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389,\n",
       "       5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400,\n",
       "       5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411,\n",
       "       5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422,\n",
       "       5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433,\n",
       "       5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444,\n",
       "       5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455,\n",
       "       5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466,\n",
       "       5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477,\n",
       "       5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488,\n",
       "       5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499,\n",
       "       5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510,\n",
       "       5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521,\n",
       "       5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532,\n",
       "       5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543,\n",
       "       5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554,\n",
       "       5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565,\n",
       "       5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576,\n",
       "       5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587,\n",
       "       5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598,\n",
       "       5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609,\n",
       "       5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620,\n",
       "       5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631,\n",
       "       5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642,\n",
       "       5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653,\n",
       "       5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664,\n",
       "       5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675,\n",
       "       5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686,\n",
       "       5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697,\n",
       "       5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708,\n",
       "       5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719,\n",
       "       5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730,\n",
       "       5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741,\n",
       "       5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752,\n",
       "       5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763,\n",
       "       5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774,\n",
       "       5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785,\n",
       "       5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796,\n",
       "       5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807,\n",
       "       5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818,\n",
       "       5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829,\n",
       "       5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840,\n",
       "       5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851,\n",
       "       5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862,\n",
       "       5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873,\n",
       "       5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884,\n",
       "       5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895,\n",
       "       5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906,\n",
       "       5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917,\n",
       "       5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928,\n",
       "       5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939,\n",
       "       5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950,\n",
       "       5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961,\n",
       "       5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972,\n",
       "       5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983,\n",
       "       5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994,\n",
       "       5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005,\n",
       "       6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016,\n",
       "       6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027,\n",
       "       6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038,\n",
       "       6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049,\n",
       "       6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060,\n",
       "       6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071,\n",
       "       6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082,\n",
       "       6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093,\n",
       "       6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104,\n",
       "       6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115,\n",
       "       6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126,\n",
       "       6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137,\n",
       "       6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148,\n",
       "       6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159,\n",
       "       6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170,\n",
       "       6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181,\n",
       "       6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192,\n",
       "       6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203,\n",
       "       6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214,\n",
       "       6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225,\n",
       "       6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236,\n",
       "       6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247,\n",
       "       6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258,\n",
       "       6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269,\n",
       "       6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280,\n",
       "       6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291,\n",
       "       6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302,\n",
       "       6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313,\n",
       "       6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324,\n",
       "       6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335,\n",
       "       6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346,\n",
       "       6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357,\n",
       "       6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368,\n",
       "       6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379,\n",
       "       6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390,\n",
       "       6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401,\n",
       "       6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412,\n",
       "       6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423,\n",
       "       6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434,\n",
       "       6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445,\n",
       "       6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456,\n",
       "       6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467,\n",
       "       6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478,\n",
       "       6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489,\n",
       "       6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500,\n",
       "       6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511,\n",
       "       6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522,\n",
       "       6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533,\n",
       "       6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544,\n",
       "       6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555,\n",
       "       6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566,\n",
       "       6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577,\n",
       "       6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588,\n",
       "       6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599,\n",
       "       6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610,\n",
       "       6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621,\n",
       "       6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632,\n",
       "       6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643,\n",
       "       6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654,\n",
       "       6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665,\n",
       "       6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676,\n",
       "       6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687,\n",
       "       6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698,\n",
       "       6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709,\n",
       "       6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720,\n",
       "       6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731,\n",
       "       6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742,\n",
       "       6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753,\n",
       "       6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764,\n",
       "       6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775,\n",
       "       6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786,\n",
       "       6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797,\n",
       "       6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808,\n",
       "       6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819,\n",
       "       6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830,\n",
       "       6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841,\n",
       "       6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852,\n",
       "       6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863,\n",
       "       6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874,\n",
       "       6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885,\n",
       "       6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896,\n",
       "       6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907,\n",
       "       6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918,\n",
       "       6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929,\n",
       "       6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940,\n",
       "       6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951,\n",
       "       6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962,\n",
       "       6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973,\n",
       "       6974, 6975, 6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984,\n",
       "       6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995,\n",
       "       6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006,\n",
       "       7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017,\n",
       "       7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028,\n",
       "       7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039,\n",
       "       7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050,\n",
       "       7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061,\n",
       "       7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069, 7070, 7071, 7072,\n",
       "       7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083,\n",
       "       7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094,\n",
       "       7095, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105,\n",
       "       7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116,\n",
       "       7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127,\n",
       "       7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137, 7138,\n",
       "       7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149,\n",
       "       7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 7159, 7160,\n",
       "       7161, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171,\n",
       "       7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182,\n",
       "       7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191, 7192, 7193,\n",
       "       7194, 7195, 7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204,\n",
       "       7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215,\n",
       "       7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226,\n",
       "       7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237,\n",
       "       7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248,\n",
       "       7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259,\n",
       "       7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270,\n",
       "       7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281,\n",
       "       7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292,\n",
       "       7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303,\n",
       "       7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314,\n",
       "       7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325,\n",
       "       7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336,\n",
       "       7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347,\n",
       "       7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358,\n",
       "       7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369,\n",
       "       7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380,\n",
       "       7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391,\n",
       "       7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402,\n",
       "       7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413,\n",
       "       7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424,\n",
       "       7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435,\n",
       "       7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446,\n",
       "       7447, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457,\n",
       "       7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468,\n",
       "       7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479,\n",
       "       7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490,\n",
       "       7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501,\n",
       "       7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512,\n",
       "       7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523,\n",
       "       7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534,\n",
       "       7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545,\n",
       "       7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556,\n",
       "       7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567,\n",
       "       7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578,\n",
       "       7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589,\n",
       "       7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600,\n",
       "       7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611,\n",
       "       7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622,\n",
       "       7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633,\n",
       "       7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644,\n",
       "       7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655,\n",
       "       7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666,\n",
       "       7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677,\n",
       "       7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688,\n",
       "       7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699,\n",
       "       7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710,\n",
       "       7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721,\n",
       "       7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732,\n",
       "       7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741, 7742, 7743,\n",
       "       7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754,\n",
       "       7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765,\n",
       "       7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 7775, 7776,\n",
       "       7777, 7778, 7779, 7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787,\n",
       "       7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798,\n",
       "       7799, 7800, 7801, 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809,\n",
       "       7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819, 7820,\n",
       "       7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831,\n",
       "       7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839, 7840, 7841, 7842,\n",
       "       7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853,\n",
       "       7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864,\n",
       "       7865, 7866, 7867, 7868, 7869, 7870, 7871, 7872, 7873, 7874, 7875,\n",
       "       7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886,\n",
       "       7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897,\n",
       "       7898, 7899, 7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908,\n",
       "       7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919,\n",
       "       7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929, 7930,\n",
       "       7931, 7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941,\n",
       "       7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952,\n",
       "       7953, 7954, 7955, 7956, 7957, 7958, 7959, 7960, 7961, 7962, 7963,\n",
       "       7964, 7965, 7966, 7967, 7968, 7969, 7970, 7971, 7972, 7973, 7974,\n",
       "       7975, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7985,\n",
       "       7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993, 7994, 7995, 7996,\n",
       "       7997, 7998, 7999, 8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007,\n",
       "       8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018,\n",
       "       8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029,\n",
       "       8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040,\n",
       "       8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051,\n",
       "       8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062,\n",
       "       8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073,\n",
       "       8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084,\n",
       "       8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095,\n",
       "       8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106,\n",
       "       8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117,\n",
       "       8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128,\n",
       "       8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139,\n",
       "       8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150,\n",
       "       8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161,\n",
       "       8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172,\n",
       "       8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183,\n",
       "       8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194,\n",
       "       8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205,\n",
       "       8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216,\n",
       "       8217, 8218, 8219, 8220, 8221, 8222, 8223, 8224, 8225, 8226, 8227,\n",
       "       8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236, 8237, 8238,\n",
       "       8239, 8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249,\n",
       "       8250, 8251, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260,\n",
       "       8261, 8262, 8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271,\n",
       "       8272, 8273, 8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282,\n",
       "       8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290, 8291, 8292, 8293,\n",
       "       8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304,\n",
       "       8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315,\n",
       "       8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326,\n",
       "       8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337,\n",
       "       8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346, 8347, 8348,\n",
       "       8349, 8350, 8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,\n",
       "       8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8370,\n",
       "       8371, 8372, 8373, 8374, 8375, 8376, 8377, 8378, 8379, 8380, 8381,\n",
       "       8382, 8383, 8384, 8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392,\n",
       "       8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403,\n",
       "       8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414,\n",
       "       8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425,\n",
       "       8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436,\n",
       "       8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8446, 8447,\n",
       "       8448, 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458,\n",
       "       8459, 8460, 8461, 8462, 8463, 8464, 8465, 8466, 8467, 8468, 8469,\n",
       "       8470, 8471, 8472, 8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480,\n",
       "       8481, 8482, 8483, 8484, 8485, 8486, 8487, 8488, 8489, 8490, 8491,\n",
       "       8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502,\n",
       "       8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513,\n",
       "       8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524,\n",
       "       8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533, 8534, 8535,\n",
       "       8536, 8537, 8538, 8539, 8540, 8541, 8542, 8543, 8544, 8545, 8546,\n",
       "       8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, 8556, 8557,\n",
       "       8558, 8559, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568,\n",
       "       8569, 8570, 8571, 8572, 8573, 8574, 8575, 8576, 8577, 8578, 8579,\n",
       "       8580, 8581, 8582, 8583, 8584, 8585, 8586, 8587, 8588, 8589, 8590,\n",
       "       8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598, 8599, 8600, 8601,\n",
       "       8602, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612,\n",
       "       8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623,\n",
       "       8624, 8625, 8626, 8627, 8628, 8629, 8630, 8631, 8632, 8633, 8634,\n",
       "       8635, 8636, 8637, 8638, 8639, 8640, 8641, 8642, 8643, 8644, 8645,\n",
       "       8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654, 8655, 8656,\n",
       "       8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8667,\n",
       "       8668, 8669, 8670, 8671, 8672, 8673, 8674, 8675, 8676, 8677, 8678,\n",
       "       8679, 8680, 8681, 8682, 8683, 8684, 8685, 8686, 8687, 8688, 8689,\n",
       "       8690, 8691, 8692, 8693, 8694, 8695, 8696, 8697, 8698, 8699, 8700,\n",
       "       8701, 8702, 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711,\n",
       "       8712, 8713, 8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722,\n",
       "       8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732, 8733,\n",
       "       8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742, 8743, 8744,\n",
       "       8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8753, 8754, 8755,\n",
       "       8756, 8757, 8758, 8759, 8760, 8761, 8762, 8763, 8764, 8765, 8766,\n",
       "       8767, 8768, 8769, 8770, 8771, 8772, 8773, 8774, 8775, 8776, 8777,\n",
       "       8778, 8779, 8780, 8781, 8782, 8783, 8784, 8785, 8786, 8787, 8788,\n",
       "       8789, 8790, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799,\n",
       "       8800, 8801, 8802, 8803, 8804, 8805, 8806, 8807, 8808, 8809, 8810,\n",
       "       8811, 8812, 8813, 8814, 8815, 8816, 8817, 8818, 8819, 8820, 8821,\n",
       "       8822, 8823, 8824, 8825, 8826, 8827, 8828, 8829, 8830, 8831, 8832,\n",
       "       8833, 8834, 8835, 8836, 8837, 8838, 8839, 8840, 8841, 8842, 8843,\n",
       "       8844, 8845, 8846, 8847, 8848, 8849, 8850, 8851, 8852, 8853, 8854,\n",
       "       8855, 8856, 8857, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8865,\n",
       "       8866, 8867, 8868, 8869, 8870, 8871, 8872, 8873, 8874, 8875, 8876,\n",
       "       8877, 8878, 8879, 8880, 8881, 8882, 8883, 8884, 8885, 8886, 8887,\n",
       "       8888, 8889, 8890, 8891, 8892, 8893, 8894, 8895, 8896, 8897, 8898,\n",
       "       8899, 8900, 8901, 8902, 8903, 8904, 8905, 8906, 8907, 8908, 8909,\n",
       "       8910, 8911, 8912, 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920,\n",
       "       8921, 8922, 8923, 8924, 8925, 8926, 8927, 8928, 8929, 8930, 8931,\n",
       "       8932, 8933, 8934, 8935, 8936, 8937, 8938, 8939, 8940, 8941, 8942,\n",
       "       8943, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8952, 8953,\n",
       "       8954, 8955, 8956, 8957, 8958, 8959, 8960, 8961, 8962, 8963, 8964,\n",
       "       8965, 8966, 8967, 8968, 8969, 8970, 8971, 8972, 8973, 8974, 8975,\n",
       "       8976, 8977, 8978, 8979, 8980, 8981, 8982, 8983, 8984, 8985, 8986,\n",
       "       8987, 8988, 8989, 8990, 8991, 8992, 8993, 8994, 8995, 8996, 8997,\n",
       "       8998, 8999, 9000, 9001, 9002, 9003, 9004, 9005, 9006, 9007, 9008,\n",
       "       9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019,\n",
       "       9020, 9021, 9022, 9023, 9024, 9025, 9026, 9027, 9028, 9029, 9030,\n",
       "       9031, 9032, 9033, 9034, 9035, 9036, 9037, 9038, 9039, 9040, 9041,\n",
       "       9042, 9043, 9044, 9045, 9046, 9047, 9048, 9049, 9050, 9051, 9052,\n",
       "       9053, 9054, 9055, 9056, 9057, 9058, 9059, 9060, 9061, 9062, 9063,\n",
       "       9064, 9065, 9066, 9067, 9068, 9069, 9070, 9071, 9072, 9073, 9074,\n",
       "       9075, 9076, 9077, 9078, 9079, 9080, 9081, 9082, 9083, 9084, 9085,\n",
       "       9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093, 9094, 9095, 9096,\n",
       "       9097, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107,\n",
       "       9108, 9109, 9110, 9111, 9112, 9113, 9114, 9115, 9116, 9117, 9118,\n",
       "       9119, 9120, 9121, 9122, 9123, 9124, 9125, 9126, 9127, 9128, 9129,\n",
       "       9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9139, 9140,\n",
       "       9141, 9142, 9143, 9144, 9145, 9146, 9147, 9148, 9149, 9150, 9151,\n",
       "       9152, 9153, 9154, 9155, 9156, 9157, 9158, 9159, 9160, 9161, 9162,\n",
       "       9163, 9164, 9165, 9166, 9167, 9168, 9169, 9170, 9171, 9172, 9173,\n",
       "       9174, 9175, 9176, 9177, 9178, 9179, 9180, 9181, 9182, 9183, 9184,\n",
       "       9185, 9186, 9187, 9188, 9189, 9190, 9191, 9192, 9193, 9194, 9195,\n",
       "       9196, 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206,\n",
       "       9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214, 9215, 9216, 9217,\n",
       "       9218, 9219, 9220, 9221, 9222, 9223, 9224, 9225, 9226, 9227, 9228,\n",
       "       9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237, 9238, 9239,\n",
       "       9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247, 9248, 9249, 9250,\n",
       "       9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258, 9259, 9260, 9261,\n",
       "       9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272,\n",
       "       9273, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283,\n",
       "       9284, 9285, 9286, 9287, 9288, 9289, 9290, 9291, 9292, 9293, 9294,\n",
       "       9295, 9296, 9297, 9298, 9299, 9300, 9301, 9302, 9303, 9304, 9305,\n",
       "       9306, 9307, 9308, 9309, 9310, 9311, 9312, 9313, 9314, 9315, 9316,\n",
       "       9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327,\n",
       "       9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335, 9336, 9337, 9338,\n",
       "       9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 9347, 9348, 9349,\n",
       "       9350, 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360,\n",
       "       9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371,\n",
       "       9372, 9373, 9374, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382,\n",
       "       9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392, 9393,\n",
       "       9394, 9395, 9396, 9397, 9398, 9399, 9400, 9401, 9402, 9403, 9404,\n",
       "       9405, 9406, 9407, 9408, 9409, 9410, 9411, 9412, 9413, 9414, 9415,\n",
       "       9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423, 9424, 9425, 9426,\n",
       "       9427, 9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435, 9436, 9437,\n",
       "       9438, 9439, 9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448,\n",
       "       9449, 9450, 9451, 9452, 9453, 9454, 9455, 9456, 9457, 9458, 9459,\n",
       "       9460, 9461, 9462, 9463, 9464, 9465, 9466, 9467, 9468, 9469, 9470,\n",
       "       9471, 9472, 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481,\n",
       "       9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9492,\n",
       "       9493, 9494, 9495, 9496, 9497, 9498, 9499, 9500, 9501, 9502, 9503,\n",
       "       9504, 9505, 9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9514,\n",
       "       9515, 9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523, 9524, 9525,\n",
       "       9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536,\n",
       "       9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547,\n",
       "       9548, 9549, 9550, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558,\n",
       "       9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569,\n",
       "       9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580,\n",
       "       9581, 9582, 9583, 9584, 9585, 9586, 9587, 9588, 9589, 9590, 9591,\n",
       "       9592, 9593, 9594, 9595, 9596, 9597, 9598, 9599, 9600, 9601, 9602,\n",
       "       9603, 9604, 9605, 9606, 9607, 9608, 9609, 9610, 9611, 9612, 9613,\n",
       "       9614, 9615, 9616, 9617, 9618, 9619, 9620, 9621, 9622, 9623, 9624,\n",
       "       9625, 9626, 9627, 9628, 9629, 9630, 9631, 9632, 9633, 9634, 9635,\n",
       "       9636, 9637, 9638, 9639, 9640, 9641, 9642, 9643, 9644, 9645, 9646,\n",
       "       9647, 9648, 9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657,\n",
       "       9658, 9659, 9660, 9661, 9662, 9663, 9664, 9665, 9666, 9667, 9668,\n",
       "       9669, 9670, 9671, 9672, 9673, 9674, 9675, 9676, 9677, 9678, 9679,\n",
       "       9680, 9681, 9682, 9683, 9684, 9685, 9686, 9687, 9688, 9689, 9690,\n",
       "       9691, 9692, 9693, 9694, 9695, 9696, 9697, 9698, 9699, 9700, 9701,\n",
       "       9702, 9703, 9704, 9705, 9706, 9707, 9708, 9709, 9710, 9711, 9712,\n",
       "       9713, 9714, 9715, 9716, 9717, 9718, 9719, 9720, 9721, 9722, 9723,\n",
       "       9724, 9725, 9726, 9727, 9728, 9729, 9730, 9731, 9732, 9733, 9734,\n",
       "       9735, 9736, 9737, 9738, 9739, 9740, 9741, 9742, 9743, 9744, 9745,\n",
       "       9746, 9747, 9748, 9749, 9750, 9751, 9752, 9753, 9754, 9755, 9756,\n",
       "       9757, 9758, 9759, 9760, 9761, 9762, 9763, 9764, 9765, 9766, 9767,\n",
       "       9768, 9769, 9770, 9771, 9772, 9773, 9774, 9775, 9776, 9777, 9778,\n",
       "       9779, 9780, 9781, 9782, 9783, 9784, 9785, 9786, 9787, 9788, 9789,\n",
       "       9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798, 9799, 9800,\n",
       "       9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809, 9810, 9811,\n",
       "       9812, 9813, 9814, 9815, 9816, 9817, 9818, 9819, 9820, 9821, 9822,\n",
       "       9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830, 9831, 9832, 9833,\n",
       "       9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844,\n",
       "       9845, 9846, 9847, 9848, 9849, 9850, 9851, 9852, 9853, 9854, 9855,\n",
       "       9856, 9857, 9858, 9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866,\n",
       "       9867, 9868, 9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877,\n",
       "       9878, 9879, 9880, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888,\n",
       "       9889, 9890, 9891, 9892, 9893, 9894, 9895, 9896, 9897, 9898, 9899,\n",
       "       9900, 9901, 9902, 9903, 9904, 9905, 9906, 9907, 9908, 9909, 9910,\n",
       "       9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918, 9919, 9920, 9921,\n",
       "       9922, 9923, 9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932,\n",
       "       9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943,\n",
       "       9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954,\n",
       "       9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965,\n",
       "       9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976,\n",
       "       9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987,\n",
       "       9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998,\n",
       "       9999])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\"\"\"10,000個の要素を表示できるようにする\"\"\"\n",
    "np.set_printoptions(threshold=10000)\n",
    "a = np.arange(10000)\n",
    "a"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b539bf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"pandasをインポートする\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"Seriesオブジェクトを生成する\"\"\"\n",
    "s = pd.Series([1, 2, 3])\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b936794",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba45c129",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "s = pd.Series([1, 2, 3])\n",
    "\"\"\"Seriesオブジェクトの合計値を求める\"\"\"\n",
    "s.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "043b0121",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0eb4baaa",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'set' type is unordered",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [2]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;124;03m\"\"\"Seriesオブジェクトの合計値を求める\"\"\"\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mA\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mB\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m}\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m df\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:636\u001b[0m, in \u001b[0;36mDataFrame.__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    630\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init_mgr(\n\u001b[1;32m    631\u001b[0m         data, axes\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m: index, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolumns\u001b[39m\u001b[38;5;124m\"\u001b[39m: columns}, dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39mcopy\n\u001b[1;32m    632\u001b[0m     )\n\u001b[1;32m    634\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, \u001b[38;5;28mdict\u001b[39m):\n\u001b[1;32m    635\u001b[0m     \u001b[38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[39;00m\n\u001b[0;32m--> 636\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m \u001b[43mdict_to_mgr\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtyp\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmanager\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    637\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, ma\u001b[38;5;241m.\u001b[39mMaskedArray):\n\u001b[1;32m    638\u001b[0m     \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mma\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmrecords\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mmrecords\u001b[39;00m\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py:502\u001b[0m, in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    494\u001b[0m     arrays \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m    495\u001b[0m         x\n\u001b[1;32m    496\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(x, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(x\u001b[38;5;241m.\u001b[39mdtype, ExtensionDtype)\n\u001b[1;32m    497\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m x\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m    498\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m arrays\n\u001b[1;32m    499\u001b[0m     ]\n\u001b[1;32m    500\u001b[0m     \u001b[38;5;66;03m# TODO: can we get rid of the dt64tz special case above?\u001b[39;00m\n\u001b[0;32m--> 502\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marrays_to_mgr\u001b[49m\u001b[43m(\u001b[49m\u001b[43marrays\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtyp\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtyp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconsolidate\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py:125\u001b[0m, in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    122\u001b[0m         index \u001b[38;5;241m=\u001b[39m ensure_index(index)\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;66;03m# don't force copy because getting jammed in an ndarray anyway\u001b[39;00m\n\u001b[0;32m--> 125\u001b[0m     arrays \u001b[38;5;241m=\u001b[39m \u001b[43m_homogenize\u001b[49m\u001b[43m(\u001b[49m\u001b[43marrays\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    126\u001b[0m     \u001b[38;5;66;03m# _homogenize ensures\u001b[39;00m\n\u001b[1;32m    127\u001b[0m     \u001b[38;5;66;03m#  - all(len(x) == len(index) for x in arrays)\u001b[39;00m\n\u001b[1;32m    128\u001b[0m     \u001b[38;5;66;03m#  - all(x.ndim == 1 for x in arrays)\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    131\u001b[0m \n\u001b[1;32m    132\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    133\u001b[0m     index \u001b[38;5;241m=\u001b[39m ensure_index(index)\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py:625\u001b[0m, in \u001b[0;36m_homogenize\u001b[0;34m(data, index, dtype)\u001b[0m\n\u001b[1;32m    622\u001b[0m             val \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mdict\u001b[39m(val)\n\u001b[1;32m    623\u001b[0m         val \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39mfast_multiget(val, oindex\u001b[38;5;241m.\u001b[39m_values, default\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mnan)\n\u001b[0;32m--> 625\u001b[0m     val \u001b[38;5;241m=\u001b[39m \u001b[43msanitize_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    626\u001b[0m \u001b[43m        \u001b[49m\u001b[43mval\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mraise_cast_failure\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\n\u001b[1;32m    627\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    628\u001b[0m     com\u001b[38;5;241m.\u001b[39mrequire_length_match(val, index)\n\u001b[1;32m    630\u001b[0m homogenized\u001b[38;5;241m.\u001b[39mappend(val)\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/construction.py:581\u001b[0m, in \u001b[0;36msanitize_array\u001b[0;34m(data, index, dtype, copy, raise_cast_failure, allow_2d)\u001b[0m\n\u001b[1;32m    578\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    579\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, (\u001b[38;5;28mset\u001b[39m, \u001b[38;5;28mfrozenset\u001b[39m)):\n\u001b[1;32m    580\u001b[0m         \u001b[38;5;66;03m# Raise only for unordered sets, e.g., not for dict_keys\u001b[39;00m\n\u001b[0;32m--> 581\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(data)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m type is unordered\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    583\u001b[0m     \u001b[38;5;66;03m# materialize e.g. generators, convert e.g. tuples, abc.ValueView\u001b[39;00m\n\u001b[1;32m    584\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(data, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__array__\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m    585\u001b[0m         \u001b[38;5;66;03m# e.g. dask array GH#38645\u001b[39;00m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'set' type is unordered"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\"\"\"Seriesオブジェクトの合計値を求める\"\"\"\n",
    "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e8ceab7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9582e552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.215556</td>\n",
       "      <td>0.466304</td>\n",
       "      <td>0.892664</td>\n",
       "      <td>-0.696464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.879427</td>\n",
       "      <td>-0.743755</td>\n",
       "      <td>-1.124335</td>\n",
       "      <td>-0.485873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.261433</td>\n",
       "      <td>0.256433</td>\n",
       "      <td>1.872438</td>\n",
       "      <td>-0.521721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.258935</td>\n",
       "      <td>0.710878</td>\n",
       "      <td>0.921548</td>\n",
       "      <td>1.106660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.650061</td>\n",
       "      <td>2.180435</td>\n",
       "      <td>-0.115508</td>\n",
       "      <td>-0.552536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.281590</td>\n",
       "      <td>-0.161249</td>\n",
       "      <td>-0.107559</td>\n",
       "      <td>1.182990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.215556  0.466304  0.892664 -0.696464\n",
       "1 -0.879427 -0.743755 -1.124335 -0.485873\n",
       "2  0.261433  0.256433  1.872438 -0.521721\n",
       "3 -1.258935  0.710878  0.921548  1.106660\n",
       "4  1.650061  2.180435 -0.115508 -0.552536\n",
       "5 -0.281590 -0.161249 -0.107559  1.182990"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"ランダムな数値からなるDataFrame\"\"\"\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f00b4f92",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_5-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98ed6508",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"DataFrameのindexに日付を指定\"\"\"\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6))\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_6-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2757191a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "###### コード:DataFrameのcolumnsに列名を指定\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df\n",
    "\n",
    "df.T"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2eaf119",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"DataFrameの先頭\"\"\"\n",
    "df.head(1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_8-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d2fe11e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.110620</td>\n",
       "      <td>1.106337</td>\n",
       "      <td>-0.844740</td>\n",
       "      <td>2.455905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>-0.486437</td>\n",
       "      <td>1.134828</td>\n",
       "      <td>-1.106468</td>\n",
       "      <td>0.560775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>-1.761830</td>\n",
       "      <td>1.354470</td>\n",
       "      <td>-0.040792</td>\n",
       "      <td>-0.933170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-04 -0.110620  1.106337 -0.844740  2.455905\n",
       "2022-01-05 -0.486437  1.134828 -1.106468  0.560775\n",
       "2022-01-06 -1.761830  1.354470 -0.040792 -0.933170"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"DataFrameの先頭\"\"\"\n",
    "df.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cf57ed1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_9-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "189669ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n",
       "               '2022-01-05', '2022-01-06'],\n",
       "              dtype='datetime64[ns]', freq='D')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"index属性\"\"\"\n",
    "df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfe597e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_10-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "646e4201",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['A', 'B', 'C', 'D'], dtype='object')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"columns属性\"\"\"\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ba9f129",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e72bbd63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.05008322, -0.55973608, -0.31797199,  0.16900556],\n",
       "       [-0.01880684, -0.69748068,  0.0137143 ,  2.40989895],\n",
       "       [ 0.49841545, -0.65376447,  0.03264572, -0.68804114],\n",
       "       [-0.97588242,  1.30541694, -1.33882049,  0.51304166],\n",
       "       [-1.75998177, -0.49197534,  0.50531257, -1.80077315],\n",
       "       [-0.12617988, -2.37072483, -1.20836652,  1.16397702]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"columns属性\"\"\"\n",
    "df.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c37751fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_12-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9da74900",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.489142</td>\n",
       "      <td>-0.333712</td>\n",
       "      <td>-0.656421</td>\n",
       "      <td>0.175168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.958346</td>\n",
       "      <td>1.406605</td>\n",
       "      <td>0.730524</td>\n",
       "      <td>1.035606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.872934</td>\n",
       "      <td>-2.210366</td>\n",
       "      <td>-1.812236</td>\n",
       "      <td>-1.574066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-1.178988</td>\n",
       "      <td>-1.079429</td>\n",
       "      <td>-0.997129</td>\n",
       "      <td>-0.287168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.004838</td>\n",
       "      <td>-0.633302</td>\n",
       "      <td>-0.522822</td>\n",
       "      <td>0.690588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.160918</td>\n",
       "      <td>0.790442</td>\n",
       "      <td>-0.293236</td>\n",
       "      <td>0.761833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.301960</td>\n",
       "      <td>1.437815</td>\n",
       "      <td>0.291293</td>\n",
       "      <td>1.071401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              A         B         C         D\n",
       "count  6.000000  6.000000  6.000000  6.000000\n",
       "mean  -0.489142 -0.333712 -0.656421  0.175168\n",
       "std    0.958346  1.406605  0.730524  1.035606\n",
       "min   -1.872934 -2.210366 -1.812236 -1.574066\n",
       "25%   -1.178988 -1.079429 -0.997129 -0.287168\n",
       "50%   -0.004838 -0.633302 -0.522822  0.690588\n",
       "75%    0.160918  0.790442 -0.293236  0.761833\n",
       "max    0.301960  1.437815  0.291293  1.071401"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"describeメソッド\"\"\"\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4658777",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_13-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_14-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd5988ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.473853</td>\n",
       "      <td>0.343174</td>\n",
       "      <td>0.478493</td>\n",
       "      <td>-1.368192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-0.884126</td>\n",
       "      <td>-0.272706</td>\n",
       "      <td>-0.098487</td>\n",
       "      <td>0.057563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.308660</td>\n",
       "      <td>-0.861267</td>\n",
       "      <td>0.846430</td>\n",
       "      <td>0.567810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01 -0.473853  0.343174  0.478493 -1.368192\n",
       "2022-01-02 -0.884126 -0.272706 -0.098487  0.057563\n",
       "2022-01-03 -0.308660 -0.861267  0.846430  0.567810"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"行の範囲を指定\"\"\"\n",
    "df[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afc15dbf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_15-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53a19cbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.474938</td>\n",
       "      <td>0.944919</td>\n",
       "      <td>-0.765822</td>\n",
       "      <td>-0.187672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.997117</td>\n",
       "      <td>0.498579</td>\n",
       "      <td>0.668966</td>\n",
       "      <td>0.288908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>0.331079</td>\n",
       "      <td>1.391152</td>\n",
       "      <td>-1.062023</td>\n",
       "      <td>-0.582052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-02  0.474938  0.944919 -0.765822 -0.187672\n",
       "2022-01-03 -0.997117  0.498579  0.668966  0.288908\n",
       "2022-01-04  0.331079  1.391152 -1.062023 -0.582052"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"列の範囲を指定\"\"\"\n",
    "df['20220102':'20220104']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f17e226",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_16-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "659ee9d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A   -0.904365\n",
       "B   -0.204817\n",
       "C   -1.329447\n",
       "D    0.522265\n",
       "Name: 2022-01-01 00:00:00, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"locプロパティでインデックスを指定\"\"\"\n",
    "df.loc['20220101']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "373ed4aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_17-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8ccbe501",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A   -0.780131\n",
       "B   -0.047350\n",
       "Name: 2022-01-02 00:00:00, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"locプロパティでインデックスと列を指定\"\"\"\n",
    "df.loc['20220102', ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1695428c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_18-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "791ce83f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.853643</td>\n",
       "      <td>2.349772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-1.815514</td>\n",
       "      <td>-1.143651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.090784</td>\n",
       "      <td>0.996545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-02  0.853643  2.349772\n",
       "2022-01-03 -1.815514 -1.143651\n",
       "2022-01-04 -0.090784  0.996545"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"locプロパティでインデックスの範囲を指定\"\"\"\n",
    "df.loc['20220102':'20220104', ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03caf1b2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_19-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "014fbc1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.963894</td>\n",
       "      <td>-2.225687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-1.095431</td>\n",
       "      <td>1.521852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>0.504786</td>\n",
       "      <td>0.719135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.983698</td>\n",
       "      <td>0.513307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.123881</td>\n",
       "      <td>-2.717262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>-0.203720</td>\n",
       "      <td>-0.746597</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-01 -0.963894 -2.225687\n",
       "2022-01-02 -1.095431  1.521852\n",
       "2022-01-03  0.504786  0.719135\n",
       "2022-01-04 -0.983698  0.513307\n",
       "2022-01-05  0.123881 -2.717262\n",
       "2022-01-06 -0.203720 -0.746597"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"locプロパティですべての行を指定\"\"\"\n",
    "df.loc[:, ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae73e9d7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_20-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d132842b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16462169178561117"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"ilocプロパティで数値で要素を指定\"\"\"\n",
    "df.iloc[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5dbdf318",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_21-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca0b0c3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-1.325454</td>\n",
       "      <td>0.296075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>1.015770</td>\n",
       "      <td>0.955343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-01 -1.325454  0.296075\n",
       "2022-01-02  1.015770  0.955343"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"ilocプロパティで数値で要素を指定\"\"\"\n",
    "df.iloc[0:2, 0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0485f614",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_22-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf24785f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.911003</td>\n",
       "      <td>-1.002141</td>\n",
       "      <td>-0.797392</td>\n",
       "      <td>-0.337514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>1.179693</td>\n",
       "      <td>-0.365456</td>\n",
       "      <td>0.652465</td>\n",
       "      <td>0.715872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>1.915022</td>\n",
       "      <td>-1.138884</td>\n",
       "      <td>0.435589</td>\n",
       "      <td>0.508299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01  0.911003 -1.002141 -0.797392 -0.337514\n",
       "2022-01-04  1.179693 -0.365456  0.652465  0.715872\n",
       "2022-01-06  1.915022 -1.138884  0.435589  0.508299"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"A列の値が0より大きい行を抽出\"\"\"\n",
    "df[df.A > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21890fab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_23-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69643a9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.722917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.188389</td>\n",
       "      <td>0.667193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.586067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.168548</td>\n",
       "      <td>0.053794</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>1.267385</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.575136</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.331244</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.057406</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01  0.722917       NaN  0.188389  0.667193\n",
       "2022-01-02       NaN       NaN       NaN  1.586067\n",
       "2022-01-03       NaN  0.168548  0.053794       NaN\n",
       "2022-01-04  1.267385       NaN  1.575136       NaN\n",
       "2022-01-05       NaN  0.331244       NaN       NaN\n",
       "2022-01-06       NaN       NaN       NaN  0.057406"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"0より大きい値を抽出\"\"\"\n",
    "df[df > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1fd2101",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_24-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0ef20efe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.634327</td>\n",
       "      <td>-0.160708</td>\n",
       "      <td>-1.204893</td>\n",
       "      <td>-0.110236</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.095349</td>\n",
       "      <td>2.629879</td>\n",
       "      <td>-0.203590</td>\n",
       "      <td>-0.723565</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>0.488426</td>\n",
       "      <td>-0.765891</td>\n",
       "      <td>1.049726</td>\n",
       "      <td>-0.216598</td>\n",
       "      <td>two</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.401396</td>\n",
       "      <td>-0.363015</td>\n",
       "      <td>0.306494</td>\n",
       "      <td>-1.420632</td>\n",
       "      <td>three</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.915427</td>\n",
       "      <td>0.474158</td>\n",
       "      <td>-1.356699</td>\n",
       "      <td>-0.210379</td>\n",
       "      <td>four</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>0.798489</td>\n",
       "      <td>0.642915</td>\n",
       "      <td>1.284028</td>\n",
       "      <td>0.912590</td>\n",
       "      <td>three</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D      E\n",
       "2022-01-01  0.634327 -0.160708 -1.204893 -0.110236    one\n",
       "2022-01-02  0.095349  2.629879 -0.203590 -0.723565    one\n",
       "2022-01-03  0.488426 -0.765891  1.049726 -0.216598    two\n",
       "2022-01-04 -0.401396 -0.363015  0.306494 -1.420632  three\n",
       "2022-01-05  0.915427  0.474158 -1.356699 -0.210379   four\n",
       "2022-01-06  0.798489  0.642915  1.284028  0.912590  three"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "\"\"\"0より大きい値を抽出\"\"\"\n",
    "df2 = df.copy()\n",
    "df2['E'] = ['one',  'one', 'two', 'three', 'four', 'three']\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5845eae1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_25-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "796d4fed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.094152</td>\n",
       "      <td>2.411495</td>\n",
       "      <td>0.063400</td>\n",
       "      <td>-0.351873</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-0.822614</td>\n",
       "      <td>-1.254059</td>\n",
       "      <td>-1.012093</td>\n",
       "      <td>0.892679</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.643923</td>\n",
       "      <td>-2.081679</td>\n",
       "      <td>-0.583174</td>\n",
       "      <td>-0.375567</td>\n",
       "      <td>four</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D     E\n",
       "2022-01-01 -0.094152  2.411495  0.063400 -0.351873   one\n",
       "2022-01-02 -0.822614 -1.254059 -1.012093  0.892679   one\n",
       "2022-01-05  0.643923 -2.081679 -0.583174 -0.375567  four"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df2 = df.copy()\n",
    "df2['E'] = ['one',  'one', 'two', 'three', 'four', 'three']\n",
    "\"\"\"E列の値で行を抽出\"\"\"\n",
    "df2[df2['E'].isin(['one', 'four'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b950a7b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_26-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_27-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7991f050",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.985163</td>\n",
       "      <td>-1.526807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.373044</td>\n",
       "      <td>-1.014113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1\n",
       "0  0.985163 -1.526807\n",
       "1 -0.373044 -1.014113"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"E列の値で行を抽出\"\"\"\n",
    "df = pd.DataFrame(np.random.randn(2, 2))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4cceacf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_28-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6084bbee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.382078</td>\n",
       "      <td>0.331823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.842626</td>\n",
       "      <td>0.387455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.382078</td>\n",
       "      <td>0.331823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.842626</td>\n",
       "      <td>0.387455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1\n",
       "0  0.382078  0.331823\n",
       "1  0.842626  0.387455\n",
       "0  0.382078  0.331823\n",
       "1  0.842626  0.387455"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(2, 2))\n",
    "\"\"\"concat関数で変数df2つを結合\"\"\"\n",
    "pd.concat([df, df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88b669d1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_29-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4677c165",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>foo</td>\n",
       "      <td>0.558333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bar</td>\n",
       "      <td>-0.827087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>foo</td>\n",
       "      <td>1.738726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bar</td>\n",
       "      <td>-0.989190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A         B\n",
       "0  foo  0.558333\n",
       "1  bar -0.827087\n",
       "2  foo  1.738726\n",
       "3  bar -0.989190"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"4行×2列のDataFrameを生成\"\"\"\n",
    "df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar'], 'B': np.random.randn(4)})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddba74cf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_3_30-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b0c67d6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bar</th>\n",
       "      <td>-0.891578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foo</th>\n",
       "      <td>-0.117049</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            B\n",
       "A            \n",
       "bar -0.891578\n",
       "foo -0.117049"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar'], 'B': np.random.randn(4)})\n",
    "\"\"\"groupbyメソッドでグループ化\"\"\"\n",
    "df.groupby('A').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57f4dfb4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4798c05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"pyplotとnumpyをインポート\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"グラフを描画して表示する\"\"\"\n",
    "plt.plot([1, 2, 3, 4])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "806c5542",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3210f562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"x軸とy軸を指定\"\"\"\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36a3781d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "21804019",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"丸い点でグラフを描画\"\"\"\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b2c1ff4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6bfa8e5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"x軸、y軸の範囲を指定\"\"\"\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'o')\n",
    "plt.axis([0, 6, 0, 10])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad86c322",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_5-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1317cd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"3つのグラフを表示\"\"\"\n",
    "t = np.arange(0, 5, 0.2)\n",
    "plt.plot(t, t, 'r--')\n",
    "plt.plot(t, t**2, 'bs')\n",
    "plt.plot(t, t**3, 'g^')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "537636db",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_6-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd8f4538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"3つのグラフを表示\"\"\"\n",
    "t = np.arange(0, 5, 0.2)\n",
    "plt.plot(t, t, 'r--', label='y=x')\n",
    "plt.plot(t, t**2, 'bs', label='y=x**2')\n",
    "plt.plot(t, t**3, 'g^', label='y=x**3')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07e2efaa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5433a4dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"散布図を作成\"\"\"\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "plt.scatter(x, y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e32a2bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_8-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b38db5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"散布図の点のサイズ、色を設定\"\"\"\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "sizes = np.random.rand(50) * 100\n",
    "colors = np.random.rand(50)\n",
    "plt.scatter(x, y, s=sizes, c=colors)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6e231a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_9-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4046c42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"棒グラフを描画\"\"\"\n",
    "values = [1, 2, 3, 4, 5, 6]\n",
    "x_pos = np.arange(len(values))\n",
    "\n",
    "plt.bar(x_pos, values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69b45b6c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_10-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9878cb55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"円グラフを作成\"\"\"\n",
    "rates = [10, 20, 30, 40]\n",
    "labels = ['Python', 'C++', 'Ruby', 'Java']\n",
    "colors = ['red', 'green', 'yellow', 'blue']\n",
    "\n",
    "plt.pie(rates, labels=labels, colors=colors)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73a3bcf5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_4_12-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "091ef714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"円グラフの項目に割合（%）を表示\"\"\"\n",
    "rates = [10, 20, 30, 40]\n",
    "labels = ['Python', 'C++', 'Ruby', 'Java']\n",
    "colors = ['red', 'green', 'yellow', 'blue']\n",
    "\n",
    "plt.pie(rates, labels=labels, colors=colors, autopct='%1.1f%%')\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3949b0e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_5_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49a62d51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>bp</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>s3</th>\n",
       "      <th>s4</th>\n",
       "      <th>s5</th>\n",
       "      <th>s6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.038076</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.061696</td>\n",
       "      <td>0.021872</td>\n",
       "      <td>-0.044223</td>\n",
       "      <td>-0.034821</td>\n",
       "      <td>-0.043401</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.019908</td>\n",
       "      <td>-0.017646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.001882</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.051474</td>\n",
       "      <td>-0.026328</td>\n",
       "      <td>-0.008449</td>\n",
       "      <td>-0.019163</td>\n",
       "      <td>0.074412</td>\n",
       "      <td>-0.039493</td>\n",
       "      <td>-0.068330</td>\n",
       "      <td>-0.092204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.085299</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.044451</td>\n",
       "      <td>-0.005671</td>\n",
       "      <td>-0.045599</td>\n",
       "      <td>-0.034194</td>\n",
       "      <td>-0.032356</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.002864</td>\n",
       "      <td>-0.025930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.089063</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.011595</td>\n",
       "      <td>-0.036656</td>\n",
       "      <td>0.012191</td>\n",
       "      <td>0.024991</td>\n",
       "      <td>-0.036038</td>\n",
       "      <td>0.034309</td>\n",
       "      <td>0.022692</td>\n",
       "      <td>-0.009362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.005383</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.036385</td>\n",
       "      <td>0.021872</td>\n",
       "      <td>0.003935</td>\n",
       "      <td>0.015596</td>\n",
       "      <td>0.008142</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>-0.031991</td>\n",
       "      <td>-0.046641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.041708</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.019662</td>\n",
       "      <td>0.059744</td>\n",
       "      <td>-0.005697</td>\n",
       "      <td>-0.002566</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.031193</td>\n",
       "      <td>0.007207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>-0.005515</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>-0.015906</td>\n",
       "      <td>-0.067642</td>\n",
       "      <td>0.049341</td>\n",
       "      <td>0.079165</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>0.034309</td>\n",
       "      <td>-0.018118</td>\n",
       "      <td>0.044485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>0.041708</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>-0.015906</td>\n",
       "      <td>0.017282</td>\n",
       "      <td>-0.037344</td>\n",
       "      <td>-0.013840</td>\n",
       "      <td>-0.024993</td>\n",
       "      <td>-0.011080</td>\n",
       "      <td>-0.046879</td>\n",
       "      <td>0.015491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>-0.045472</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>0.039062</td>\n",
       "      <td>0.001215</td>\n",
       "      <td>0.016318</td>\n",
       "      <td>0.015283</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>0.026560</td>\n",
       "      <td>0.044528</td>\n",
       "      <td>-0.025930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>-0.045472</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.073030</td>\n",
       "      <td>-0.081414</td>\n",
       "      <td>0.083740</td>\n",
       "      <td>0.027809</td>\n",
       "      <td>0.173816</td>\n",
       "      <td>-0.039493</td>\n",
       "      <td>-0.004220</td>\n",
       "      <td>0.003064</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>442 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          age       sex       bmi        bp        s1        s2        s3  \\\n",
       "0    0.038076  0.050680  0.061696  0.021872 -0.044223 -0.034821 -0.043401   \n",
       "1   -0.001882 -0.044642 -0.051474 -0.026328 -0.008449 -0.019163  0.074412   \n",
       "2    0.085299  0.050680  0.044451 -0.005671 -0.045599 -0.034194 -0.032356   \n",
       "3   -0.089063 -0.044642 -0.011595 -0.036656  0.012191  0.024991 -0.036038   \n",
       "4    0.005383 -0.044642 -0.036385  0.021872  0.003935  0.015596  0.008142   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "437  0.041708  0.050680  0.019662  0.059744 -0.005697 -0.002566 -0.028674   \n",
       "438 -0.005515  0.050680 -0.015906 -0.067642  0.049341  0.079165 -0.028674   \n",
       "439  0.041708  0.050680 -0.015906  0.017282 -0.037344 -0.013840 -0.024993   \n",
       "440 -0.045472 -0.044642  0.039062  0.001215  0.016318  0.015283 -0.028674   \n",
       "441 -0.045472 -0.044642 -0.073030 -0.081414  0.083740  0.027809  0.173816   \n",
       "\n",
       "           s4        s5        s6  \n",
       "0   -0.002592  0.019908 -0.017646  \n",
       "1   -0.039493 -0.068330 -0.092204  \n",
       "2   -0.002592  0.002864 -0.025930  \n",
       "3    0.034309  0.022692 -0.009362  \n",
       "4   -0.002592 -0.031991 -0.046641  \n",
       "..        ...       ...       ...  \n",
       "437 -0.002592  0.031193  0.007207  \n",
       "438  0.034309 -0.018118  0.044485  \n",
       "439 -0.011080 -0.046879  0.015491  \n",
       "440  0.026560  0.044528 -0.025930  \n",
       "441 -0.039493 -0.004220  0.003064  \n",
       "\n",
       "[442 rows x 10 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"各種ライブラリをインポート\"\"\"\n",
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "\"\"\"diabetesのdataプロパティを表示\"\"\"\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0adb4454",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_5_2-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_5_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0282b124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40052152529495044"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "\n",
    "\"\"\"変数Xとyにデータを格納\"\"\"\n",
    "X = diabetes.data\n",
    "y = diabetes.target\n",
    "\n",
    "\"\"\"データを訓練用とテスト用に分割\"\"\"\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "\"\"\"線形回帰の機械学習を実行\"\"\"\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "\"\"\"機械学習の結果を検証\"\"\"\n",
    "lr.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c35f2c89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_5_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3f89c38a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "\n",
    "X = diabetes.data\n",
    "y = diabetes.target\n",
    "\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "\"\"\"機械学習の結果を検証\"\"\"\n",
    "predicted = lr.predict(X)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(y, predicted, edgecolors=(0, 0, 0))\n",
    "ax.plot([y.min(), y.max()], [y.min(), y.max()], \"k--\", lw=4)\n",
    "ax.set_xlabel(\"Measured\")\n",
    "ax.set_ylabel(\"Predicted\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46f17aad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_1-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa2229ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-05-31</th>\n",
       "      <td>150.660004</td>\n",
       "      <td>146.839996</td>\n",
       "      <td>149.070007</td>\n",
       "      <td>148.839996</td>\n",
       "      <td>103718400.0</td>\n",
       "      <td>148.839996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-01</th>\n",
       "      <td>151.740005</td>\n",
       "      <td>147.679993</td>\n",
       "      <td>149.899994</td>\n",
       "      <td>148.710007</td>\n",
       "      <td>74286600.0</td>\n",
       "      <td>148.710007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-02</th>\n",
       "      <td>151.270004</td>\n",
       "      <td>146.860001</td>\n",
       "      <td>147.830002</td>\n",
       "      <td>151.210007</td>\n",
       "      <td>72232000.0</td>\n",
       "      <td>151.210007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close       Volume  \\\n",
       "Date                                                                      \n",
       "2022-05-31  150.660004  146.839996  149.070007  148.839996  103718400.0   \n",
       "2022-06-01  151.740005  147.679993  149.899994  148.710007   74286600.0   \n",
       "2022-06-02  151.270004  146.860001  147.830002  151.210007   72232000.0   \n",
       "\n",
       "             Adj Close  \n",
       "Date                    \n",
       "2022-05-31  148.839996  \n",
       "2022-06-01  148.710007  \n",
       "2022-06-02  151.210007  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ライブラリをインポート\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "\"\"\"株価のデータを取得\"\"\"\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.DataReader('FB', 'yahoo', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.DataReader('GLD', 'yahoo', '2020-01-01')\n",
    "df_aapl.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d442b42d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_2-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3392a755",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\"\"\"株価と単純移動平均をグラフ化\"\"\"\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_aapl['SMA'].plot(figsize=(15,6), color='green')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4591a3b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_3-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce89fd23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.DataReader('FB', 'yahoo', '2020-01-01')\n",
    "\"\"\"Apple社とMeta社の株価を比較\"\"\"\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_meta['Close'].plot(figsize=(15,6), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88ebcf62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_4-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b91680b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>changing</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-06-02</th>\n",
       "      <td>151.27</td>\n",
       "      <td>146.86</td>\n",
       "      <td>147.83</td>\n",
       "      <td>151.21</td>\n",
       "      <td>72348100.0</td>\n",
       "      <td>151.21</td>\n",
       "      <td>2.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-03</th>\n",
       "      <td>147.97</td>\n",
       "      <td>144.46</td>\n",
       "      <td>146.90</td>\n",
       "      <td>145.38</td>\n",
       "      <td>88471400.0</td>\n",
       "      <td>145.38</td>\n",
       "      <td>-1.03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              High     Low    Open   Close      Volume  Adj Close  changing\n",
       "Date                                                                       \n",
       "2022-06-02  151.27  146.86  147.83  151.21  72348100.0     151.21      2.29\n",
       "2022-06-03  147.97  144.46  146.90  145.38  88471400.0     145.38     -1.03"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.DataReader('FB', 'yahoo', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.DataReader('GLD', 'yahoo', '2020-01-01')\n",
    "\"\"\"株価の変化率を求める\"\"\"\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_meta['changing'] = (((df_meta['Close'] - df_meta['Open'])) / (df_meta['Open']) * 100)\n",
    "df_gold['changing'] = (((df_gold['Close'] - df_gold['Open'])) / (df_gold['Open']) * 100)\n",
    "df_aapl.tail(2).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87ebe90c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_5-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_6-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f806c0ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-04-14</th>\n",
       "      <td>171.270004</td>\n",
       "      <td>165.039993</td>\n",
       "      <td>170.619995</td>\n",
       "      <td>165.289993</td>\n",
       "      <td>75329400.0</td>\n",
       "      <td>165.047501</td>\n",
       "      <td>149.639999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-18</th>\n",
       "      <td>166.600006</td>\n",
       "      <td>163.570007</td>\n",
       "      <td>163.919998</td>\n",
       "      <td>165.070007</td>\n",
       "      <td>69023900.0</td>\n",
       "      <td>164.827835</td>\n",
       "      <td>148.839996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-19</th>\n",
       "      <td>167.820007</td>\n",
       "      <td>163.910004</td>\n",
       "      <td>165.020004</td>\n",
       "      <td>167.399994</td>\n",
       "      <td>67723800.0</td>\n",
       "      <td>167.154404</td>\n",
       "      <td>148.710007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-20</th>\n",
       "      <td>168.880005</td>\n",
       "      <td>166.100006</td>\n",
       "      <td>168.759995</td>\n",
       "      <td>167.229996</td>\n",
       "      <td>67929800.0</td>\n",
       "      <td>166.984650</td>\n",
       "      <td>151.210007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-21</th>\n",
       "      <td>171.529999</td>\n",
       "      <td>165.910004</td>\n",
       "      <td>168.910004</td>\n",
       "      <td>166.419998</td>\n",
       "      <td>87227800.0</td>\n",
       "      <td>166.175842</td>\n",
       "      <td>145.380005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-22</th>\n",
       "      <td>167.869995</td>\n",
       "      <td>161.500000</td>\n",
       "      <td>166.460007</td>\n",
       "      <td>161.789993</td>\n",
       "      <td>84882400.0</td>\n",
       "      <td>161.552628</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-25</th>\n",
       "      <td>163.169998</td>\n",
       "      <td>158.460007</td>\n",
       "      <td>161.119995</td>\n",
       "      <td>162.880005</td>\n",
       "      <td>96046400.0</td>\n",
       "      <td>162.641037</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-26</th>\n",
       "      <td>162.339996</td>\n",
       "      <td>156.720001</td>\n",
       "      <td>162.250000</td>\n",
       "      <td>156.800003</td>\n",
       "      <td>95623200.0</td>\n",
       "      <td>156.569962</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-27</th>\n",
       "      <td>159.789993</td>\n",
       "      <td>155.380005</td>\n",
       "      <td>155.910004</td>\n",
       "      <td>156.570007</td>\n",
       "      <td>88063200.0</td>\n",
       "      <td>156.340302</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-28</th>\n",
       "      <td>164.520004</td>\n",
       "      <td>158.929993</td>\n",
       "      <td>159.250000</td>\n",
       "      <td>163.639999</td>\n",
       "      <td>130216800.0</td>\n",
       "      <td>163.399918</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-04-29</th>\n",
       "      <td>166.199997</td>\n",
       "      <td>157.250000</td>\n",
       "      <td>161.839996</td>\n",
       "      <td>157.649994</td>\n",
       "      <td>131587100.0</td>\n",
       "      <td>157.418701</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-02</th>\n",
       "      <td>158.229996</td>\n",
       "      <td>153.270004</td>\n",
       "      <td>156.710007</td>\n",
       "      <td>157.960007</td>\n",
       "      <td>123055300.0</td>\n",
       "      <td>157.728256</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-03</th>\n",
       "      <td>160.710007</td>\n",
       "      <td>156.320007</td>\n",
       "      <td>158.149994</td>\n",
       "      <td>159.479996</td>\n",
       "      <td>88966500.0</td>\n",
       "      <td>159.246017</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-04</th>\n",
       "      <td>166.479996</td>\n",
       "      <td>159.259995</td>\n",
       "      <td>159.669998</td>\n",
       "      <td>166.020004</td>\n",
       "      <td>108256500.0</td>\n",
       "      <td>165.776428</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-05</th>\n",
       "      <td>164.080002</td>\n",
       "      <td>154.949997</td>\n",
       "      <td>163.850006</td>\n",
       "      <td>156.770004</td>\n",
       "      <td>130525300.0</td>\n",
       "      <td>156.540009</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-06</th>\n",
       "      <td>159.440002</td>\n",
       "      <td>154.179993</td>\n",
       "      <td>156.009995</td>\n",
       "      <td>157.279999</td>\n",
       "      <td>116055700.0</td>\n",
       "      <td>157.279999</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-09</th>\n",
       "      <td>155.830002</td>\n",
       "      <td>151.490005</td>\n",
       "      <td>154.929993</td>\n",
       "      <td>152.059998</td>\n",
       "      <td>131577900.0</td>\n",
       "      <td>152.059998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-10</th>\n",
       "      <td>156.740005</td>\n",
       "      <td>152.929993</td>\n",
       "      <td>155.520004</td>\n",
       "      <td>154.509995</td>\n",
       "      <td>115366700.0</td>\n",
       "      <td>154.509995</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-11</th>\n",
       "      <td>155.449997</td>\n",
       "      <td>145.809998</td>\n",
       "      <td>153.500000</td>\n",
       "      <td>146.500000</td>\n",
       "      <td>142689800.0</td>\n",
       "      <td>146.500000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-12</th>\n",
       "      <td>146.199997</td>\n",
       "      <td>138.800003</td>\n",
       "      <td>142.770004</td>\n",
       "      <td>142.559998</td>\n",
       "      <td>182602000.0</td>\n",
       "      <td>142.559998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-13</th>\n",
       "      <td>148.100006</td>\n",
       "      <td>143.110001</td>\n",
       "      <td>144.589996</td>\n",
       "      <td>147.110001</td>\n",
       "      <td>113787000.0</td>\n",
       "      <td>147.110001</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-16</th>\n",
       "      <td>147.520004</td>\n",
       "      <td>144.179993</td>\n",
       "      <td>145.550003</td>\n",
       "      <td>145.539993</td>\n",
       "      <td>86643800.0</td>\n",
       "      <td>145.539993</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-17</th>\n",
       "      <td>149.770004</td>\n",
       "      <td>146.679993</td>\n",
       "      <td>148.860001</td>\n",
       "      <td>149.240005</td>\n",
       "      <td>78336300.0</td>\n",
       "      <td>149.240005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-18</th>\n",
       "      <td>147.360001</td>\n",
       "      <td>139.899994</td>\n",
       "      <td>146.850006</td>\n",
       "      <td>140.820007</td>\n",
       "      <td>109742900.0</td>\n",
       "      <td>140.820007</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-19</th>\n",
       "      <td>141.660004</td>\n",
       "      <td>136.600006</td>\n",
       "      <td>139.880005</td>\n",
       "      <td>137.350006</td>\n",
       "      <td>136095600.0</td>\n",
       "      <td>137.350006</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-20</th>\n",
       "      <td>140.699997</td>\n",
       "      <td>132.610001</td>\n",
       "      <td>139.089996</td>\n",
       "      <td>137.589996</td>\n",
       "      <td>137194600.0</td>\n",
       "      <td>137.589996</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-23</th>\n",
       "      <td>143.259995</td>\n",
       "      <td>137.649994</td>\n",
       "      <td>137.789993</td>\n",
       "      <td>143.110001</td>\n",
       "      <td>117726300.0</td>\n",
       "      <td>143.110001</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-24</th>\n",
       "      <td>141.970001</td>\n",
       "      <td>137.330002</td>\n",
       "      <td>140.809998</td>\n",
       "      <td>140.360001</td>\n",
       "      <td>104132700.0</td>\n",
       "      <td>140.360001</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-25</th>\n",
       "      <td>141.789993</td>\n",
       "      <td>138.339996</td>\n",
       "      <td>138.429993</td>\n",
       "      <td>140.520004</td>\n",
       "      <td>92482700.0</td>\n",
       "      <td>140.520004</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-26</th>\n",
       "      <td>144.339996</td>\n",
       "      <td>137.139999</td>\n",
       "      <td>137.389999</td>\n",
       "      <td>143.779999</td>\n",
       "      <td>90601500.0</td>\n",
       "      <td>143.779999</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-27</th>\n",
       "      <td>149.679993</td>\n",
       "      <td>145.259995</td>\n",
       "      <td>145.389999</td>\n",
       "      <td>149.639999</td>\n",
       "      <td>90978500.0</td>\n",
       "      <td>149.639999</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-31</th>\n",
       "      <td>150.660004</td>\n",
       "      <td>146.839996</td>\n",
       "      <td>149.070007</td>\n",
       "      <td>148.839996</td>\n",
       "      <td>103718400.0</td>\n",
       "      <td>148.839996</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-01</th>\n",
       "      <td>151.740005</td>\n",
       "      <td>147.679993</td>\n",
       "      <td>149.899994</td>\n",
       "      <td>148.710007</td>\n",
       "      <td>74286600.0</td>\n",
       "      <td>148.710007</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-02</th>\n",
       "      <td>151.270004</td>\n",
       "      <td>146.860001</td>\n",
       "      <td>147.830002</td>\n",
       "      <td>151.210007</td>\n",
       "      <td>72348100.0</td>\n",
       "      <td>151.210007</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-03</th>\n",
       "      <td>147.970001</td>\n",
       "      <td>144.460007</td>\n",
       "      <td>146.899994</td>\n",
       "      <td>145.380005</td>\n",
       "      <td>88471400.0</td>\n",
       "      <td>145.380005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  High         Low        Open       Close       Volume  \\\n",
       "Date                                                                      \n",
       "2022-04-14  171.270004  165.039993  170.619995  165.289993   75329400.0   \n",
       "2022-04-18  166.600006  163.570007  163.919998  165.070007   69023900.0   \n",
       "2022-04-19  167.820007  163.910004  165.020004  167.399994   67723800.0   \n",
       "2022-04-20  168.880005  166.100006  168.759995  167.229996   67929800.0   \n",
       "2022-04-21  171.529999  165.910004  168.910004  166.419998   87227800.0   \n",
       "2022-04-22  167.869995  161.500000  166.460007  161.789993   84882400.0   \n",
       "2022-04-25  163.169998  158.460007  161.119995  162.880005   96046400.0   \n",
       "2022-04-26  162.339996  156.720001  162.250000  156.800003   95623200.0   \n",
       "2022-04-27  159.789993  155.380005  155.910004  156.570007   88063200.0   \n",
       "2022-04-28  164.520004  158.929993  159.250000  163.639999  130216800.0   \n",
       "2022-04-29  166.199997  157.250000  161.839996  157.649994  131587100.0   \n",
       "2022-05-02  158.229996  153.270004  156.710007  157.960007  123055300.0   \n",
       "2022-05-03  160.710007  156.320007  158.149994  159.479996   88966500.0   \n",
       "2022-05-04  166.479996  159.259995  159.669998  166.020004  108256500.0   \n",
       "2022-05-05  164.080002  154.949997  163.850006  156.770004  130525300.0   \n",
       "2022-05-06  159.440002  154.179993  156.009995  157.279999  116055700.0   \n",
       "2022-05-09  155.830002  151.490005  154.929993  152.059998  131577900.0   \n",
       "2022-05-10  156.740005  152.929993  155.520004  154.509995  115366700.0   \n",
       "2022-05-11  155.449997  145.809998  153.500000  146.500000  142689800.0   \n",
       "2022-05-12  146.199997  138.800003  142.770004  142.559998  182602000.0   \n",
       "2022-05-13  148.100006  143.110001  144.589996  147.110001  113787000.0   \n",
       "2022-05-16  147.520004  144.179993  145.550003  145.539993   86643800.0   \n",
       "2022-05-17  149.770004  146.679993  148.860001  149.240005   78336300.0   \n",
       "2022-05-18  147.360001  139.899994  146.850006  140.820007  109742900.0   \n",
       "2022-05-19  141.660004  136.600006  139.880005  137.350006  136095600.0   \n",
       "2022-05-20  140.699997  132.610001  139.089996  137.589996  137194600.0   \n",
       "2022-05-23  143.259995  137.649994  137.789993  143.110001  117726300.0   \n",
       "2022-05-24  141.970001  137.330002  140.809998  140.360001  104132700.0   \n",
       "2022-05-25  141.789993  138.339996  138.429993  140.520004   92482700.0   \n",
       "2022-05-26  144.339996  137.139999  137.389999  143.779999   90601500.0   \n",
       "2022-05-27  149.679993  145.259995  145.389999  149.639999   90978500.0   \n",
       "2022-05-31  150.660004  146.839996  149.070007  148.839996  103718400.0   \n",
       "2022-06-01  151.740005  147.679993  149.899994  148.710007   74286600.0   \n",
       "2022-06-02  151.270004  146.860001  147.830002  151.210007   72348100.0   \n",
       "2022-06-03  147.970001  144.460007  146.899994  145.380005   88471400.0   \n",
       "\n",
       "             Adj Close       label  \n",
       "Date                                \n",
       "2022-04-14  165.047501  149.639999  \n",
       "2022-04-18  164.827835  148.839996  \n",
       "2022-04-19  167.154404  148.710007  \n",
       "2022-04-20  166.984650  151.210007  \n",
       "2022-04-21  166.175842  145.380005  \n",
       "2022-04-22  161.552628         NaN  \n",
       "2022-04-25  162.641037         NaN  \n",
       "2022-04-26  156.569962         NaN  \n",
       "2022-04-27  156.340302         NaN  \n",
       "2022-04-28  163.399918         NaN  \n",
       "2022-04-29  157.418701         NaN  \n",
       "2022-05-02  157.728256         NaN  \n",
       "2022-05-03  159.246017         NaN  \n",
       "2022-05-04  165.776428         NaN  \n",
       "2022-05-05  156.540009         NaN  \n",
       "2022-05-06  157.279999         NaN  \n",
       "2022-05-09  152.059998         NaN  \n",
       "2022-05-10  154.509995         NaN  \n",
       "2022-05-11  146.500000         NaN  \n",
       "2022-05-12  142.559998         NaN  \n",
       "2022-05-13  147.110001         NaN  \n",
       "2022-05-16  145.539993         NaN  \n",
       "2022-05-17  149.240005         NaN  \n",
       "2022-05-18  140.820007         NaN  \n",
       "2022-05-19  137.350006         NaN  \n",
       "2022-05-20  137.589996         NaN  \n",
       "2022-05-23  143.110001         NaN  \n",
       "2022-05-24  140.360001         NaN  \n",
       "2022-05-25  140.520004         NaN  \n",
       "2022-05-26  143.779999         NaN  \n",
       "2022-05-27  149.639999         NaN  \n",
       "2022-05-31  148.839996         NaN  \n",
       "2022-06-01  148.710007         NaN  \n",
       "2022-06-02  151.210007         NaN  \n",
       "2022-06-03  145.380005         NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "\"\"\"3つの株価の変化率をグラフにする\"\"\"\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "840d8cb4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_7-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "76d9a21d",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['SMA'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m df_aapl [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m df_aapl[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mClose\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mshift(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m30\u001b[39m)\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124;03m\"\"\"学習させるデータをXに格納\"\"\"\u001b[39;00m\n\u001b[0;32m---> 16\u001b[0m X \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(\u001b[43mdf_aapl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlabel\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mSMA\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     17\u001b[0m X \u001b[38;5;241m=\u001b[39m sklearn\u001b[38;5;241m.\u001b[39mpreprocessing\u001b[38;5;241m.\u001b[39mscale(X)\n\u001b[1;32m     18\u001b[0m X\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    306\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    307\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39marguments),\n\u001b[1;32m    308\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    309\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mstacklevel,\n\u001b[1;32m    310\u001b[0m     )\n\u001b[0;32m--> 311\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:4954\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4806\u001b[0m \u001b[38;5;129m@deprecate_nonkeyword_arguments\u001b[39m(version\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, allowed_args\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mself\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlabels\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m   4807\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   4808\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4815\u001b[0m     errors: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   4816\u001b[0m ):\n\u001b[1;32m   4817\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4818\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   4819\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4952\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   4953\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4954\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4955\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4956\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4957\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4958\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4959\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4960\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4961\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4962\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py:4267\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4265\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4266\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4267\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4269\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4270\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py:4311\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, consolidate, only_slice)\u001b[0m\n\u001b[1;32m   4309\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4310\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4311\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4312\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4314\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4315\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/Applications/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:6644\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6642\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   6643\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 6644\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6645\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   6646\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['SMA'] not found in axis\""
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)\n",
    "\n",
    "\"\"\"学習させるデータをXに格納\"\"\"\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "X = sklearn.preprocessing.scale(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92a5219e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_8-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_9-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_10-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d18082f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([162.12087475, 160.99660474, 157.47538769, 161.2357374 ,\n",
       "       163.57448908, 164.78005643, 165.57319603, 167.38717431,\n",
       "       171.04728245, 172.16007394, 173.69624942, 173.92695885,\n",
       "       174.82682736, 175.96689531, 175.93437981, 173.77131942,\n",
       "       173.73621347, 177.68970744, 175.76836664, 172.19753988,\n",
       "       173.02920324, 170.95655846, 169.09428713, 169.97667703,\n",
       "       172.57783038, 170.54369832, 168.58799649, 170.21991065,\n",
       "       169.47956277, 170.70669693])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "\"\"\"過去30日間から未来の30日間を予測\"\"\"\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "predicted_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6a57a37",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_11-checkpoint.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35ae71f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "\n",
    "df_aapl = pandas_datareader.data.DataReader('AAPL', 'yahoo', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "\n",
    "\"\"\"未来の株価の予測をグラフにする\"\"\"\n",
    "df_aapl['Predict'] = np.nan\n",
    "\n",
    "last_date = df_aapl.iloc[-1].name\n",
    "one_day = 86400\n",
    "next_day = last_date.timestamp() + one_day\n",
    "\n",
    "for data in predicted_data:\n",
    "    next_date = datetime.datetime.fromtimestamp(next_day)\n",
    "    df_aapl.loc[next_date] = np.append([np.nan] * (len(df_aapl.columns)-1), data)\n",
    "    next_day += one_day\n",
    "\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='green')\n",
    "df_aapl['Predict'].plot(figsize=(15,6), color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "137d5a56",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\lesson13_6_12-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\.ipynb_checkpoints\test-checkpoint.ipynb
================================================================================

{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_1.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fdfdf4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"numpyで配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([1, 2, 3])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81a84238",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_2.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1868a879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3657383",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b813d416c36fb0bd22d28e8500bf7131554964114722910e55b20ab4a08edb2e"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_3.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a988d62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"配列のshapeプロパティ\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb46e388",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b813d416c36fb0bd22d28e8500bf7131554964114722910e55b20ab4a08edb2e"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_4.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1f1a983",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ndimプロパティ\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1adbe9e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_5.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a190a132",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"dtypeプロパティ\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f39c51e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_6.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e20d07c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"sizeプロパティ\"\"\"\n",
    "import numpy as np\n",
    "a = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "a.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2cf64c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_7.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7607bd68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  5, 10, 15, 20, 25])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"arange関数\"\"\"\n",
    "import numpy as np\n",
    "np.arange(0, 30, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4742c808",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_8.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53a53b91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"arange関数で浮動小数点数の配列を作る\"\"\"\n",
    "import numpy as np\n",
    "np.arange(0, 2, 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6ee3ecf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_9.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6eeeb1db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"zeros関数で2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "np.zeros((3, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d28936c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_10.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2ef9f78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0],\n",
       "       [0, 0, 0, 0],\n",
       "       [0, 0, 0, 0]], dtype=int16)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"zeros関数でデータ型を指定\"\"\"\n",
    "import numpy as np\n",
    "np.zeros((3, 4), dtype=np.int16)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_11.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45097c5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 1, 1, 1],\n",
       "       [1, 1, 1, 1],\n",
       "       [1, 1, 1, 1]], dtype=int16)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ones関数で2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "np.ones((3, 4), dtype=np.int16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddc5aa32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_12.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8baa383f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"linspace関数で2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "np.linspace(0, 2, 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "093858a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_13.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1206a5b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [3, 4, 5]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"reshapeメソッドで2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(6).reshape(2, 3)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "523507da",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_14.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d6487db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 3],\n",
       "       [1, 4],\n",
       "       [2, 5]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"reshapeメソッドで2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(6).reshape(2, 3)\n",
    "a.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d78e354c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_15.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a3c8a2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0,  1,  2,  3],\n",
       "        [ 4,  5,  6,  7],\n",
       "        [ 8,  9, 10, 11]],\n",
       "\n",
       "       [[12, 13, 14, 15],\n",
       "        [16, 17, 18, 19],\n",
       "        [20, 21, 22, 23]]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"reshapeメソッドで3次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(24).reshape(2, 3, 4)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c516584c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_16.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "74c11c54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 2 4 6 8] [0 1 2 3 4] [ 0 20 40 60 80]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"3つの配列x、y、zを作る\"\"\"\n",
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "print(x, y, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40454278",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_17.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6863ade2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 2, 4, 6, 8, 0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"append関数で1つの配列にまとめる\"\"\"\n",
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "np.append(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13512fed",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_18.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b1ec5043",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  2,  4,  6,  8],\n",
       "       [ 0,  1,  2,  3,  4],\n",
       "       [ 0, 20, 40, 60, 80]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"vstack関数で配列を縦に積み上げる\"\"\"\n",
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "np.vstack([x,y,z])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46229dec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_19.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e9205e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  2,  4,  6,  8,  0,  1,  2,  3,  4,  0, 20, 40, 60, 80])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"hstack関数で配列を横に連結する\"\"\"\n",
    "import numpy as np\n",
    "x = np.arange(0,10,2)\n",
    "y = np.arange(5)\n",
    "z = np.arange(0,100,20)\n",
    "np.hstack([x,y,z])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b5e6ec0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_20.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e8e71d7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10 20 30 40 50] [1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"2つの配列a、bを作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "b = np.arange(1, 6)\n",
    "print(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e4a49cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_21.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "04d4b734",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9, 18, 27, 36, 45])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"配列同士の引き算\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "b = np.arange(1, 6)\n",
    "a - b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af565995",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_22.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42afe14d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True, False, False, False])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"配列を比較演算子で演算\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(10, 51, 10)\n",
    "a  < 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82ea4d3f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_23.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "46fb9a8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.0729105 , 0.72651893, 0.92830202],\n",
       "       [0.51838171, 0.83911518, 0.4072436 ]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ランダムな数値からなる2次元配列\"\"\"\n",
    "import numpy as np\n",
    "a = np.random.random((2, 3))\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1026a520",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_24.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db771d03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"1から10までの数値の合計を求める\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11)\n",
    "a.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a84089e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_25.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e478eace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"配列の平均値を得る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11)\n",
    "a.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2c48104",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_26.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e4f4b6e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 1\n"
     ]
    }
   ],
   "source": [
    "\"\"\"配列の最大値、最小値を得る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11)\n",
    "print(a.max(), a.min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61408f05",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b813d416c36fb0bd22d28e8500bf7131554964114722910e55b20ab4a08edb2e"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_27.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03b92164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5],\n",
       "       [ 6,  7,  8,  9, 10]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"1から10までの数値の2次元配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f19e7c0d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_28.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4c830d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7,  9, 11, 13, 15])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"2次元配列の縦の列の合計を得る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "a.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25ba942a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_29.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db895287",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15, 40])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"2次元配列の横の行の合計を得る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(1, 11).reshape(2, 5)\n",
    "a.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d8188f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_30.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d4cfa8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,    1,    2, ..., 9997, 9998, 9999])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"要素数10,000の配列を作る\"\"\"\n",
    "import numpy as np\n",
    "a = np.arange(10000)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac46e3d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_2_31.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e2264708",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,\n",
       "         11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,\n",
       "         22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,\n",
       "         33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,\n",
       "         44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n",
       "         55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,\n",
       "         66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,\n",
       "         77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,\n",
       "         88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,\n",
       "         99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,\n",
       "        110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,\n",
       "        121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,\n",
       "        132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,\n",
       "        143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,\n",
       "        154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,\n",
       "        165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,\n",
       "        176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,\n",
       "        187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,\n",
       "        198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,\n",
       "        209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,\n",
       "        220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,\n",
       "        231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,\n",
       "        242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,\n",
       "        253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,\n",
       "        264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,\n",
       "        275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,\n",
       "        286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,\n",
       "        297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,\n",
       "        308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,\n",
       "        319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,\n",
       "        330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,\n",
       "        341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,\n",
       "        352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,\n",
       "        363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,\n",
       "        374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,\n",
       "        385,  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,\n",
       "        396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,\n",
       "        407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,\n",
       "        418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,\n",
       "        429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,\n",
       "        440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,\n",
       "        451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,\n",
       "        462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,\n",
       "        473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,\n",
       "        484,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,\n",
       "        495,  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,\n",
       "        506,  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,\n",
       "        517,  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,\n",
       "        528,  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,\n",
       "        539,  540,  541,  542,  543,  544,  545,  546,  547,  548,  549,\n",
       "        550,  551,  552,  553,  554,  555,  556,  557,  558,  559,  560,\n",
       "        561,  562,  563,  564,  565,  566,  567,  568,  569,  570,  571,\n",
       "        572,  573,  574,  575,  576,  577,  578,  579,  580,  581,  582,\n",
       "        583,  584,  585,  586,  587,  588,  589,  590,  591,  592,  593,\n",
       "        594,  595,  596,  597,  598,  599,  600,  601,  602,  603,  604,\n",
       "        605,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,\n",
       "        616,  617,  618,  619,  620,  621,  622,  623,  624,  625,  626,\n",
       "        627,  628,  629,  630,  631,  632,  633,  634,  635,  636,  637,\n",
       "        638,  639,  640,  641,  642,  643,  644,  645,  646,  647,  648,\n",
       "        649,  650,  651,  652,  653,  654,  655,  656,  657,  658,  659,\n",
       "        660,  661,  662,  663,  664,  665,  666,  667,  668,  669,  670,\n",
       "        671,  672,  673,  674,  675,  676,  677,  678,  679,  680,  681,\n",
       "        682,  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,\n",
       "        693,  694,  695,  696,  697,  698,  699,  700,  701,  702,  703,\n",
       "        704,  705,  706,  707,  708,  709,  710,  711,  712,  713,  714,\n",
       "        715,  716,  717,  718,  719,  720,  721,  722,  723,  724,  725,\n",
       "        726,  727,  728,  729,  730,  731,  732,  733,  734,  735,  736,\n",
       "        737,  738,  739,  740,  741,  742,  743,  744,  745,  746,  747,\n",
       "        748,  749,  750,  751,  752,  753,  754,  755,  756,  757,  758,\n",
       "        759,  760,  761,  762,  763,  764,  765,  766,  767,  768,  769,\n",
       "        770,  771,  772,  773,  774,  775,  776,  777,  778,  779,  780,\n",
       "        781,  782,  783,  784,  785,  786,  787,  788,  789,  790,  791,\n",
       "        792,  793,  794,  795,  796,  797,  798,  799,  800,  801,  802,\n",
       "        803,  804,  805,  806,  807,  808,  809,  810,  811,  812,  813,\n",
       "        814,  815,  816,  817,  818,  819,  820,  821,  822,  823,  824,\n",
       "        825,  826,  827,  828,  829,  830,  831,  832,  833,  834,  835,\n",
       "        836,  837,  838,  839,  840,  841,  842,  843,  844,  845,  846,\n",
       "        847,  848,  849,  850,  851,  852,  853,  854,  855,  856,  857,\n",
       "        858,  859,  860,  861,  862,  863,  864,  865,  866,  867,  868,\n",
       "        869,  870,  871,  872,  873,  874,  875,  876,  877,  878,  879,\n",
       "        880,  881,  882,  883,  884,  885,  886,  887,  888,  889,  890,\n",
       "        891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,\n",
       "        902,  903,  904,  905,  906,  907,  908,  909,  910,  911,  912,\n",
       "        913,  914,  915,  916,  917,  918,  919,  920,  921,  922,  923,\n",
       "        924,  925,  926,  927,  928,  929,  930,  931,  932,  933,  934,\n",
       "        935,  936,  937,  938,  939,  940,  941,  942,  943,  944,  945,\n",
       "        946,  947,  948,  949,  950,  951,  952,  953,  954,  955,  956,\n",
       "        957,  958,  959,  960,  961,  962,  963,  964,  965,  966,  967,\n",
       "        968,  969,  970,  971,  972,  973,  974,  975,  976,  977,  978,\n",
       "        979,  980,  981,  982,  983,  984,  985,  986,  987,  988,  989,\n",
       "        990,  991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,\n",
       "       1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,\n",
       "       1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,\n",
       "       1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,\n",
       "       1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,\n",
       "       1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,\n",
       "       1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,\n",
       "       1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,\n",
       "       1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,\n",
       "       1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,\n",
       "       1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,\n",
       "       1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,\n",
       "       1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,\n",
       "       1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,\n",
       "       1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,\n",
       "       1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,\n",
       "       1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,\n",
       "       1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,\n",
       "       1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,\n",
       "       1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,\n",
       "       1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,\n",
       "       1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,\n",
       "       1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,\n",
       "       1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,\n",
       "       1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,\n",
       "       1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,\n",
       "       1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,\n",
       "       1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,\n",
       "       1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,\n",
       "       1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,\n",
       "       1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,\n",
       "       1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,\n",
       "       1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,\n",
       "       1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,\n",
       "       1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,\n",
       "       1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,\n",
       "       1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,\n",
       "       1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,\n",
       "       1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,\n",
       "       1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,\n",
       "       1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,\n",
       "       1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,\n",
       "       1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,\n",
       "       1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,\n",
       "       1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,\n",
       "       1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,\n",
       "       1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,\n",
       "       1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,\n",
       "       1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,\n",
       "       1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,\n",
       "       1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,\n",
       "       1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,\n",
       "       1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,\n",
       "       1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,\n",
       "       1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,\n",
       "       1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,\n",
       "       1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,\n",
       "       1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,\n",
       "       1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,\n",
       "       1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,\n",
       "       1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,\n",
       "       1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,\n",
       "       1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,\n",
       "       1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,\n",
       "       1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,\n",
       "       1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,\n",
       "       1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,\n",
       "       1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,\n",
       "       1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,\n",
       "       1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,\n",
       "       1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,\n",
       "       1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,\n",
       "       1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,\n",
       "       1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,\n",
       "       1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,\n",
       "       1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,\n",
       "       1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,\n",
       "       1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,\n",
       "       1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,\n",
       "       1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,\n",
       "       1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,\n",
       "       1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,\n",
       "       1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,\n",
       "       1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,\n",
       "       1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,\n",
       "       1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,\n",
       "       1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,\n",
       "       1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,\n",
       "       1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,\n",
       "       1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,\n",
       "       1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,\n",
       "       1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n",
       "       2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\n",
       "       2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,\n",
       "       2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,\n",
       "       2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,\n",
       "       2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,\n",
       "       2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,\n",
       "       2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,\n",
       "       2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,\n",
       "       2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,\n",
       "       2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,\n",
       "       2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,\n",
       "       2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,\n",
       "       2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,\n",
       "       2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,\n",
       "       2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,\n",
       "       2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,\n",
       "       2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,\n",
       "       2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,\n",
       "       2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,\n",
       "       2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,\n",
       "       2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,\n",
       "       2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,\n",
       "       2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,\n",
       "       2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265,\n",
       "       2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,\n",
       "       2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,\n",
       "       2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,\n",
       "       2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,\n",
       "       2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320,\n",
       "       2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331,\n",
       "       2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,\n",
       "       2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353,\n",
       "       2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364,\n",
       "       2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375,\n",
       "       2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386,\n",
       "       2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,\n",
       "       2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408,\n",
       "       2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,\n",
       "       2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,\n",
       "       2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441,\n",
       "       2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452,\n",
       "       2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463,\n",
       "       2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,\n",
       "       2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485,\n",
       "       2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496,\n",
       "       2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,\n",
       "       2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518,\n",
       "       2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,\n",
       "       2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540,\n",
       "       2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,\n",
       "       2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562,\n",
       "       2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573,\n",
       "       2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584,\n",
       "       2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595,\n",
       "       2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606,\n",
       "       2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617,\n",
       "       2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628,\n",
       "       2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,\n",
       "       2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650,\n",
       "       2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661,\n",
       "       2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672,\n",
       "       2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,\n",
       "       2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694,\n",
       "       2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705,\n",
       "       2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716,\n",
       "       2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,\n",
       "       2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738,\n",
       "       2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,\n",
       "       2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,\n",
       "       2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,\n",
       "       2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782,\n",
       "       2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793,\n",
       "       2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804,\n",
       "       2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815,\n",
       "       2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826,\n",
       "       2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837,\n",
       "       2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848,\n",
       "       2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859,\n",
       "       2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,\n",
       "       2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,\n",
       "       2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892,\n",
       "       2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903,\n",
       "       2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914,\n",
       "       2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925,\n",
       "       2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936,\n",
       "       2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947,\n",
       "       2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958,\n",
       "       2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,\n",
       "       2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980,\n",
       "       2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991,\n",
       "       2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002,\n",
       "       3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013,\n",
       "       3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024,\n",
       "       3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035,\n",
       "       3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046,\n",
       "       3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057,\n",
       "       3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068,\n",
       "       3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,\n",
       "       3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090,\n",
       "       3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101,\n",
       "       3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112,\n",
       "       3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123,\n",
       "       3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134,\n",
       "       3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145,\n",
       "       3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156,\n",
       "       3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167,\n",
       "       3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178,\n",
       "       3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189,\n",
       "       3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200,\n",
       "       3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,\n",
       "       3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222,\n",
       "       3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233,\n",
       "       3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244,\n",
       "       3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,\n",
       "       3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266,\n",
       "       3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277,\n",
       "       3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288,\n",
       "       3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299,\n",
       "       3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310,\n",
       "       3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321,\n",
       "       3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332,\n",
       "       3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343,\n",
       "       3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354,\n",
       "       3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365,\n",
       "       3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376,\n",
       "       3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387,\n",
       "       3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398,\n",
       "       3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409,\n",
       "       3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420,\n",
       "       3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431,\n",
       "       3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442,\n",
       "       3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453,\n",
       "       3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464,\n",
       "       3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475,\n",
       "       3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486,\n",
       "       3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497,\n",
       "       3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508,\n",
       "       3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519,\n",
       "       3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530,\n",
       "       3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541,\n",
       "       3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552,\n",
       "       3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563,\n",
       "       3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574,\n",
       "       3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585,\n",
       "       3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596,\n",
       "       3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607,\n",
       "       3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618,\n",
       "       3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629,\n",
       "       3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640,\n",
       "       3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651,\n",
       "       3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662,\n",
       "       3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673,\n",
       "       3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684,\n",
       "       3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695,\n",
       "       3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706,\n",
       "       3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717,\n",
       "       3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728,\n",
       "       3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739,\n",
       "       3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750,\n",
       "       3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761,\n",
       "       3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772,\n",
       "       3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783,\n",
       "       3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794,\n",
       "       3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805,\n",
       "       3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816,\n",
       "       3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827,\n",
       "       3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838,\n",
       "       3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849,\n",
       "       3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860,\n",
       "       3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871,\n",
       "       3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882,\n",
       "       3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893,\n",
       "       3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904,\n",
       "       3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915,\n",
       "       3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926,\n",
       "       3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937,\n",
       "       3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948,\n",
       "       3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959,\n",
       "       3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970,\n",
       "       3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981,\n",
       "       3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992,\n",
       "       3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003,\n",
       "       4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014,\n",
       "       4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025,\n",
       "       4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036,\n",
       "       4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047,\n",
       "       4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058,\n",
       "       4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069,\n",
       "       4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080,\n",
       "       4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091,\n",
       "       4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102,\n",
       "       4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113,\n",
       "       4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124,\n",
       "       4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135,\n",
       "       4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146,\n",
       "       4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157,\n",
       "       4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168,\n",
       "       4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179,\n",
       "       4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190,\n",
       "       4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201,\n",
       "       4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212,\n",
       "       4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223,\n",
       "       4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234,\n",
       "       4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245,\n",
       "       4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256,\n",
       "       4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267,\n",
       "       4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278,\n",
       "       4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289,\n",
       "       4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300,\n",
       "       4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311,\n",
       "       4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,\n",
       "       4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333,\n",
       "       4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344,\n",
       "       4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355,\n",
       "       4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366,\n",
       "       4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377,\n",
       "       4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388,\n",
       "       4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399,\n",
       "       4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410,\n",
       "       4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421,\n",
       "       4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432,\n",
       "       4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443,\n",
       "       4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454,\n",
       "       4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465,\n",
       "       4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476,\n",
       "       4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487,\n",
       "       4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498,\n",
       "       4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509,\n",
       "       4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520,\n",
       "       4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531,\n",
       "       4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542,\n",
       "       4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553,\n",
       "       4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564,\n",
       "       4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575,\n",
       "       4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586,\n",
       "       4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597,\n",
       "       4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608,\n",
       "       4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619,\n",
       "       4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630,\n",
       "       4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641,\n",
       "       4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652,\n",
       "       4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663,\n",
       "       4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674,\n",
       "       4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685,\n",
       "       4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696,\n",
       "       4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707,\n",
       "       4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718,\n",
       "       4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729,\n",
       "       4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740,\n",
       "       4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751,\n",
       "       4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762,\n",
       "       4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773,\n",
       "       4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784,\n",
       "       4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795,\n",
       "       4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806,\n",
       "       4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817,\n",
       "       4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828,\n",
       "       4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839,\n",
       "       4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850,\n",
       "       4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861,\n",
       "       4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872,\n",
       "       4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883,\n",
       "       4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894,\n",
       "       4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905,\n",
       "       4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916,\n",
       "       4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927,\n",
       "       4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938,\n",
       "       4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949,\n",
       "       4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960,\n",
       "       4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971,\n",
       "       4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982,\n",
       "       4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993,\n",
       "       4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004,\n",
       "       5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015,\n",
       "       5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026,\n",
       "       5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037,\n",
       "       5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048,\n",
       "       5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059,\n",
       "       5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070,\n",
       "       5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081,\n",
       "       5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092,\n",
       "       5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103,\n",
       "       5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114,\n",
       "       5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125,\n",
       "       5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136,\n",
       "       5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147,\n",
       "       5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158,\n",
       "       5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169,\n",
       "       5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180,\n",
       "       5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191,\n",
       "       5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202,\n",
       "       5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213,\n",
       "       5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224,\n",
       "       5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235,\n",
       "       5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246,\n",
       "       5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257,\n",
       "       5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268,\n",
       "       5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279,\n",
       "       5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290,\n",
       "       5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301,\n",
       "       5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312,\n",
       "       5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323,\n",
       "       5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334,\n",
       "       5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345,\n",
       "       5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356,\n",
       "       5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367,\n",
       "       5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378,\n",
       "       5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389,\n",
       "       5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400,\n",
       "       5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411,\n",
       "       5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422,\n",
       "       5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433,\n",
       "       5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444,\n",
       "       5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455,\n",
       "       5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466,\n",
       "       5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477,\n",
       "       5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488,\n",
       "       5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499,\n",
       "       5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510,\n",
       "       5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521,\n",
       "       5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532,\n",
       "       5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543,\n",
       "       5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554,\n",
       "       5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565,\n",
       "       5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576,\n",
       "       5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587,\n",
       "       5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598,\n",
       "       5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609,\n",
       "       5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620,\n",
       "       5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631,\n",
       "       5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642,\n",
       "       5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653,\n",
       "       5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664,\n",
       "       5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675,\n",
       "       5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686,\n",
       "       5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697,\n",
       "       5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708,\n",
       "       5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719,\n",
       "       5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730,\n",
       "       5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741,\n",
       "       5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752,\n",
       "       5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763,\n",
       "       5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774,\n",
       "       5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785,\n",
       "       5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796,\n",
       "       5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807,\n",
       "       5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818,\n",
       "       5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829,\n",
       "       5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840,\n",
       "       5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851,\n",
       "       5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862,\n",
       "       5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873,\n",
       "       5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884,\n",
       "       5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895,\n",
       "       5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906,\n",
       "       5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917,\n",
       "       5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928,\n",
       "       5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939,\n",
       "       5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950,\n",
       "       5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961,\n",
       "       5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972,\n",
       "       5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983,\n",
       "       5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994,\n",
       "       5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005,\n",
       "       6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016,\n",
       "       6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027,\n",
       "       6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038,\n",
       "       6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049,\n",
       "       6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060,\n",
       "       6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071,\n",
       "       6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082,\n",
       "       6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093,\n",
       "       6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104,\n",
       "       6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115,\n",
       "       6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126,\n",
       "       6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137,\n",
       "       6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148,\n",
       "       6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159,\n",
       "       6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170,\n",
       "       6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181,\n",
       "       6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192,\n",
       "       6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203,\n",
       "       6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214,\n",
       "       6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225,\n",
       "       6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236,\n",
       "       6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247,\n",
       "       6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258,\n",
       "       6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269,\n",
       "       6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280,\n",
       "       6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291,\n",
       "       6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302,\n",
       "       6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313,\n",
       "       6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324,\n",
       "       6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335,\n",
       "       6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346,\n",
       "       6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357,\n",
       "       6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368,\n",
       "       6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379,\n",
       "       6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390,\n",
       "       6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401,\n",
       "       6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412,\n",
       "       6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423,\n",
       "       6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434,\n",
       "       6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445,\n",
       "       6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456,\n",
       "       6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467,\n",
       "       6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478,\n",
       "       6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489,\n",
       "       6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500,\n",
       "       6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511,\n",
       "       6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522,\n",
       "       6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533,\n",
       "       6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544,\n",
       "       6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555,\n",
       "       6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566,\n",
       "       6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577,\n",
       "       6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588,\n",
       "       6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599,\n",
       "       6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610,\n",
       "       6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621,\n",
       "       6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632,\n",
       "       6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643,\n",
       "       6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654,\n",
       "       6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665,\n",
       "       6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676,\n",
       "       6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687,\n",
       "       6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698,\n",
       "       6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709,\n",
       "       6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720,\n",
       "       6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731,\n",
       "       6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742,\n",
       "       6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753,\n",
       "       6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764,\n",
       "       6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775,\n",
       "       6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786,\n",
       "       6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797,\n",
       "       6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808,\n",
       "       6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819,\n",
       "       6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830,\n",
       "       6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841,\n",
       "       6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852,\n",
       "       6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863,\n",
       "       6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874,\n",
       "       6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885,\n",
       "       6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896,\n",
       "       6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907,\n",
       "       6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918,\n",
       "       6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929,\n",
       "       6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940,\n",
       "       6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951,\n",
       "       6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962,\n",
       "       6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973,\n",
       "       6974, 6975, 6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984,\n",
       "       6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995,\n",
       "       6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006,\n",
       "       7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017,\n",
       "       7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028,\n",
       "       7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039,\n",
       "       7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050,\n",
       "       7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061,\n",
       "       7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069, 7070, 7071, 7072,\n",
       "       7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083,\n",
       "       7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094,\n",
       "       7095, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105,\n",
       "       7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116,\n",
       "       7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127,\n",
       "       7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137, 7138,\n",
       "       7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149,\n",
       "       7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 7159, 7160,\n",
       "       7161, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171,\n",
       "       7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182,\n",
       "       7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191, 7192, 7193,\n",
       "       7194, 7195, 7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204,\n",
       "       7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215,\n",
       "       7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226,\n",
       "       7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237,\n",
       "       7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248,\n",
       "       7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259,\n",
       "       7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270,\n",
       "       7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281,\n",
       "       7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292,\n",
       "       7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303,\n",
       "       7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314,\n",
       "       7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325,\n",
       "       7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336,\n",
       "       7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347,\n",
       "       7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358,\n",
       "       7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369,\n",
       "       7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380,\n",
       "       7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391,\n",
       "       7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402,\n",
       "       7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413,\n",
       "       7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424,\n",
       "       7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435,\n",
       "       7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446,\n",
       "       7447, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457,\n",
       "       7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468,\n",
       "       7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479,\n",
       "       7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490,\n",
       "       7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501,\n",
       "       7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512,\n",
       "       7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523,\n",
       "       7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534,\n",
       "       7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545,\n",
       "       7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556,\n",
       "       7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567,\n",
       "       7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578,\n",
       "       7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589,\n",
       "       7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600,\n",
       "       7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611,\n",
       "       7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622,\n",
       "       7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633,\n",
       "       7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644,\n",
       "       7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655,\n",
       "       7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666,\n",
       "       7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677,\n",
       "       7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688,\n",
       "       7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699,\n",
       "       7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710,\n",
       "       7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721,\n",
       "       7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732,\n",
       "       7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741, 7742, 7743,\n",
       "       7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754,\n",
       "       7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765,\n",
       "       7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 7775, 7776,\n",
       "       7777, 7778, 7779, 7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787,\n",
       "       7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798,\n",
       "       7799, 7800, 7801, 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809,\n",
       "       7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819, 7820,\n",
       "       7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831,\n",
       "       7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839, 7840, 7841, 7842,\n",
       "       7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853,\n",
       "       7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864,\n",
       "       7865, 7866, 7867, 7868, 7869, 7870, 7871, 7872, 7873, 7874, 7875,\n",
       "       7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886,\n",
       "       7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897,\n",
       "       7898, 7899, 7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908,\n",
       "       7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919,\n",
       "       7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929, 7930,\n",
       "       7931, 7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941,\n",
       "       7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952,\n",
       "       7953, 7954, 7955, 7956, 7957, 7958, 7959, 7960, 7961, 7962, 7963,\n",
       "       7964, 7965, 7966, 7967, 7968, 7969, 7970, 7971, 7972, 7973, 7974,\n",
       "       7975, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7985,\n",
       "       7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993, 7994, 7995, 7996,\n",
       "       7997, 7998, 7999, 8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007,\n",
       "       8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018,\n",
       "       8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029,\n",
       "       8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040,\n",
       "       8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051,\n",
       "       8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062,\n",
       "       8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073,\n",
       "       8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084,\n",
       "       8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095,\n",
       "       8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106,\n",
       "       8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117,\n",
       "       8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125, 8126, 8127, 8128,\n",
       "       8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139,\n",
       "       8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150,\n",
       "       8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161,\n",
       "       8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172,\n",
       "       8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183,\n",
       "       8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194,\n",
       "       8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205,\n",
       "       8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216,\n",
       "       8217, 8218, 8219, 8220, 8221, 8222, 8223, 8224, 8225, 8226, 8227,\n",
       "       8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236, 8237, 8238,\n",
       "       8239, 8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249,\n",
       "       8250, 8251, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260,\n",
       "       8261, 8262, 8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271,\n",
       "       8272, 8273, 8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282,\n",
       "       8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290, 8291, 8292, 8293,\n",
       "       8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304,\n",
       "       8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315,\n",
       "       8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326,\n",
       "       8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337,\n",
       "       8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346, 8347, 8348,\n",
       "       8349, 8350, 8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359,\n",
       "       8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8370,\n",
       "       8371, 8372, 8373, 8374, 8375, 8376, 8377, 8378, 8379, 8380, 8381,\n",
       "       8382, 8383, 8384, 8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392,\n",
       "       8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403,\n",
       "       8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414,\n",
       "       8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425,\n",
       "       8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436,\n",
       "       8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8446, 8447,\n",
       "       8448, 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458,\n",
       "       8459, 8460, 8461, 8462, 8463, 8464, 8465, 8466, 8467, 8468, 8469,\n",
       "       8470, 8471, 8472, 8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480,\n",
       "       8481, 8482, 8483, 8484, 8485, 8486, 8487, 8488, 8489, 8490, 8491,\n",
       "       8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502,\n",
       "       8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513,\n",
       "       8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524,\n",
       "       8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533, 8534, 8535,\n",
       "       8536, 8537, 8538, 8539, 8540, 8541, 8542, 8543, 8544, 8545, 8546,\n",
       "       8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, 8556, 8557,\n",
       "       8558, 8559, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568,\n",
       "       8569, 8570, 8571, 8572, 8573, 8574, 8575, 8576, 8577, 8578, 8579,\n",
       "       8580, 8581, 8582, 8583, 8584, 8585, 8586, 8587, 8588, 8589, 8590,\n",
       "       8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598, 8599, 8600, 8601,\n",
       "       8602, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612,\n",
       "       8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623,\n",
       "       8624, 8625, 8626, 8627, 8628, 8629, 8630, 8631, 8632, 8633, 8634,\n",
       "       8635, 8636, 8637, 8638, 8639, 8640, 8641, 8642, 8643, 8644, 8645,\n",
       "       8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654, 8655, 8656,\n",
       "       8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8667,\n",
       "       8668, 8669, 8670, 8671, 8672, 8673, 8674, 8675, 8676, 8677, 8678,\n",
       "       8679, 8680, 8681, 8682, 8683, 8684, 8685, 8686, 8687, 8688, 8689,\n",
       "       8690, 8691, 8692, 8693, 8694, 8695, 8696, 8697, 8698, 8699, 8700,\n",
       "       8701, 8702, 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711,\n",
       "       8712, 8713, 8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722,\n",
       "       8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732, 8733,\n",
       "       8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742, 8743, 8744,\n",
       "       8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8753, 8754, 8755,\n",
       "       8756, 8757, 8758, 8759, 8760, 8761, 8762, 8763, 8764, 8765, 8766,\n",
       "       8767, 8768, 8769, 8770, 8771, 8772, 8773, 8774, 8775, 8776, 8777,\n",
       "       8778, 8779, 8780, 8781, 8782, 8783, 8784, 8785, 8786, 8787, 8788,\n",
       "       8789, 8790, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799,\n",
       "       8800, 8801, 8802, 8803, 8804, 8805, 8806, 8807, 8808, 8809, 8810,\n",
       "       8811, 8812, 8813, 8814, 8815, 8816, 8817, 8818, 8819, 8820, 8821,\n",
       "       8822, 8823, 8824, 8825, 8826, 8827, 8828, 8829, 8830, 8831, 8832,\n",
       "       8833, 8834, 8835, 8836, 8837, 8838, 8839, 8840, 8841, 8842, 8843,\n",
       "       8844, 8845, 8846, 8847, 8848, 8849, 8850, 8851, 8852, 8853, 8854,\n",
       "       8855, 8856, 8857, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8865,\n",
       "       8866, 8867, 8868, 8869, 8870, 8871, 8872, 8873, 8874, 8875, 8876,\n",
       "       8877, 8878, 8879, 8880, 8881, 8882, 8883, 8884, 8885, 8886, 8887,\n",
       "       8888, 8889, 8890, 8891, 8892, 8893, 8894, 8895, 8896, 8897, 8898,\n",
       "       8899, 8900, 8901, 8902, 8903, 8904, 8905, 8906, 8907, 8908, 8909,\n",
       "       8910, 8911, 8912, 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920,\n",
       "       8921, 8922, 8923, 8924, 8925, 8926, 8927, 8928, 8929, 8930, 8931,\n",
       "       8932, 8933, 8934, 8935, 8936, 8937, 8938, 8939, 8940, 8941, 8942,\n",
       "       8943, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8952, 8953,\n",
       "       8954, 8955, 8956, 8957, 8958, 8959, 8960, 8961, 8962, 8963, 8964,\n",
       "       8965, 8966, 8967, 8968, 8969, 8970, 8971, 8972, 8973, 8974, 8975,\n",
       "       8976, 8977, 8978, 8979, 8980, 8981, 8982, 8983, 8984, 8985, 8986,\n",
       "       8987, 8988, 8989, 8990, 8991, 8992, 8993, 8994, 8995, 8996, 8997,\n",
       "       8998, 8999, 9000, 9001, 9002, 9003, 9004, 9005, 9006, 9007, 9008,\n",
       "       9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019,\n",
       "       9020, 9021, 9022, 9023, 9024, 9025, 9026, 9027, 9028, 9029, 9030,\n",
       "       9031, 9032, 9033, 9034, 9035, 9036, 9037, 9038, 9039, 9040, 9041,\n",
       "       9042, 9043, 9044, 9045, 9046, 9047, 9048, 9049, 9050, 9051, 9052,\n",
       "       9053, 9054, 9055, 9056, 9057, 9058, 9059, 9060, 9061, 9062, 9063,\n",
       "       9064, 9065, 9066, 9067, 9068, 9069, 9070, 9071, 9072, 9073, 9074,\n",
       "       9075, 9076, 9077, 9078, 9079, 9080, 9081, 9082, 9083, 9084, 9085,\n",
       "       9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093, 9094, 9095, 9096,\n",
       "       9097, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107,\n",
       "       9108, 9109, 9110, 9111, 9112, 9113, 9114, 9115, 9116, 9117, 9118,\n",
       "       9119, 9120, 9121, 9122, 9123, 9124, 9125, 9126, 9127, 9128, 9129,\n",
       "       9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9139, 9140,\n",
       "       9141, 9142, 9143, 9144, 9145, 9146, 9147, 9148, 9149, 9150, 9151,\n",
       "       9152, 9153, 9154, 9155, 9156, 9157, 9158, 9159, 9160, 9161, 9162,\n",
       "       9163, 9164, 9165, 9166, 9167, 9168, 9169, 9170, 9171, 9172, 9173,\n",
       "       9174, 9175, 9176, 9177, 9178, 9179, 9180, 9181, 9182, 9183, 9184,\n",
       "       9185, 9186, 9187, 9188, 9189, 9190, 9191, 9192, 9193, 9194, 9195,\n",
       "       9196, 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206,\n",
       "       9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214, 9215, 9216, 9217,\n",
       "       9218, 9219, 9220, 9221, 9222, 9223, 9224, 9225, 9226, 9227, 9228,\n",
       "       9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237, 9238, 9239,\n",
       "       9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247, 9248, 9249, 9250,\n",
       "       9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258, 9259, 9260, 9261,\n",
       "       9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272,\n",
       "       9273, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283,\n",
       "       9284, 9285, 9286, 9287, 9288, 9289, 9290, 9291, 9292, 9293, 9294,\n",
       "       9295, 9296, 9297, 9298, 9299, 9300, 9301, 9302, 9303, 9304, 9305,\n",
       "       9306, 9307, 9308, 9309, 9310, 9311, 9312, 9313, 9314, 9315, 9316,\n",
       "       9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327,\n",
       "       9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335, 9336, 9337, 9338,\n",
       "       9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 9347, 9348, 9349,\n",
       "       9350, 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360,\n",
       "       9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371,\n",
       "       9372, 9373, 9374, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382,\n",
       "       9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391, 9392, 9393,\n",
       "       9394, 9395, 9396, 9397, 9398, 9399, 9400, 9401, 9402, 9403, 9404,\n",
       "       9405, 9406, 9407, 9408, 9409, 9410, 9411, 9412, 9413, 9414, 9415,\n",
       "       9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423, 9424, 9425, 9426,\n",
       "       9427, 9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435, 9436, 9437,\n",
       "       9438, 9439, 9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448,\n",
       "       9449, 9450, 9451, 9452, 9453, 9454, 9455, 9456, 9457, 9458, 9459,\n",
       "       9460, 9461, 9462, 9463, 9464, 9465, 9466, 9467, 9468, 9469, 9470,\n",
       "       9471, 9472, 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481,\n",
       "       9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9492,\n",
       "       9493, 9494, 9495, 9496, 9497, 9498, 9499, 9500, 9501, 9502, 9503,\n",
       "       9504, 9505, 9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9514,\n",
       "       9515, 9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523, 9524, 9525,\n",
       "       9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536,\n",
       "       9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547,\n",
       "       9548, 9549, 9550, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558,\n",
       "       9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569,\n",
       "       9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580,\n",
       "       9581, 9582, 9583, 9584, 9585, 9586, 9587, 9588, 9589, 9590, 9591,\n",
       "       9592, 9593, 9594, 9595, 9596, 9597, 9598, 9599, 9600, 9601, 9602,\n",
       "       9603, 9604, 9605, 9606, 9607, 9608, 9609, 9610, 9611, 9612, 9613,\n",
       "       9614, 9615, 9616, 9617, 9618, 9619, 9620, 9621, 9622, 9623, 9624,\n",
       "       9625, 9626, 9627, 9628, 9629, 9630, 9631, 9632, 9633, 9634, 9635,\n",
       "       9636, 9637, 9638, 9639, 9640, 9641, 9642, 9643, 9644, 9645, 9646,\n",
       "       9647, 9648, 9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657,\n",
       "       9658, 9659, 9660, 9661, 9662, 9663, 9664, 9665, 9666, 9667, 9668,\n",
       "       9669, 9670, 9671, 9672, 9673, 9674, 9675, 9676, 9677, 9678, 9679,\n",
       "       9680, 9681, 9682, 9683, 9684, 9685, 9686, 9687, 9688, 9689, 9690,\n",
       "       9691, 9692, 9693, 9694, 9695, 9696, 9697, 9698, 9699, 9700, 9701,\n",
       "       9702, 9703, 9704, 9705, 9706, 9707, 9708, 9709, 9710, 9711, 9712,\n",
       "       9713, 9714, 9715, 9716, 9717, 9718, 9719, 9720, 9721, 9722, 9723,\n",
       "       9724, 9725, 9726, 9727, 9728, 9729, 9730, 9731, 9732, 9733, 9734,\n",
       "       9735, 9736, 9737, 9738, 9739, 9740, 9741, 9742, 9743, 9744, 9745,\n",
       "       9746, 9747, 9748, 9749, 9750, 9751, 9752, 9753, 9754, 9755, 9756,\n",
       "       9757, 9758, 9759, 9760, 9761, 9762, 9763, 9764, 9765, 9766, 9767,\n",
       "       9768, 9769, 9770, 9771, 9772, 9773, 9774, 9775, 9776, 9777, 9778,\n",
       "       9779, 9780, 9781, 9782, 9783, 9784, 9785, 9786, 9787, 9788, 9789,\n",
       "       9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798, 9799, 9800,\n",
       "       9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809, 9810, 9811,\n",
       "       9812, 9813, 9814, 9815, 9816, 9817, 9818, 9819, 9820, 9821, 9822,\n",
       "       9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830, 9831, 9832, 9833,\n",
       "       9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844,\n",
       "       9845, 9846, 9847, 9848, 9849, 9850, 9851, 9852, 9853, 9854, 9855,\n",
       "       9856, 9857, 9858, 9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866,\n",
       "       9867, 9868, 9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877,\n",
       "       9878, 9879, 9880, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888,\n",
       "       9889, 9890, 9891, 9892, 9893, 9894, 9895, 9896, 9897, 9898, 9899,\n",
       "       9900, 9901, 9902, 9903, 9904, 9905, 9906, 9907, 9908, 9909, 9910,\n",
       "       9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918, 9919, 9920, 9921,\n",
       "       9922, 9923, 9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932,\n",
       "       9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943,\n",
       "       9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954,\n",
       "       9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965,\n",
       "       9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976,\n",
       "       9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987,\n",
       "       9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998,\n",
       "       9999])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"10,000個の要素を表示できるようにする\"\"\"\n",
    "import numpy as np\n",
    "np.set_printoptions(threshold=10000)\n",
    "a = np.arange(10000)\n",
    "a"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_1.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b539bf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Seriesオブジェクトを生成する\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "s = pd.Series([1, 2, 3])\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b936794",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_2.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba45c129",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Seriesオブジェクトの合計値を求める\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "s = pd.Series([1, 2, 3])\n",
    "s.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "043b0121",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_3.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "020c4f2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   A  B\n",
       "0  1  3\n",
       "1  2  4"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Seriesオブジェクトの合計値を求める\"\"\"\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b993835",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_4.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9582e552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.215556</td>\n",
       "      <td>0.466304</td>\n",
       "      <td>0.892664</td>\n",
       "      <td>-0.696464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.879427</td>\n",
       "      <td>-0.743755</td>\n",
       "      <td>-1.124335</td>\n",
       "      <td>-0.485873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.261433</td>\n",
       "      <td>0.256433</td>\n",
       "      <td>1.872438</td>\n",
       "      <td>-0.521721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.258935</td>\n",
       "      <td>0.710878</td>\n",
       "      <td>0.921548</td>\n",
       "      <td>1.106660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.650061</td>\n",
       "      <td>2.180435</td>\n",
       "      <td>-0.115508</td>\n",
       "      <td>-0.552536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.281590</td>\n",
       "      <td>-0.161249</td>\n",
       "      <td>-0.107559</td>\n",
       "      <td>1.182990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3\n",
       "0  0.215556  0.466304  0.892664 -0.696464\n",
       "1 -0.879427 -0.743755 -1.124335 -0.485873\n",
       "2  0.261433  0.256433  1.872438 -0.521721\n",
       "3 -1.258935  0.710878  0.921548  1.106660\n",
       "4  1.650061  2.180435 -0.115508 -0.552536\n",
       "5 -0.281590 -0.161249 -0.107559  1.182990"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ランダムな数値からなるDataFrame\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f00b4f92",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_5.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7a0ebe54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-1.672345</td>\n",
       "      <td>-0.754784</td>\n",
       "      <td>0.033675</td>\n",
       "      <td>1.665611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>1.004056</td>\n",
       "      <td>-0.683699</td>\n",
       "      <td>-0.594825</td>\n",
       "      <td>-0.301372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.012896</td>\n",
       "      <td>-0.863621</td>\n",
       "      <td>1.852837</td>\n",
       "      <td>-1.168827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.910269</td>\n",
       "      <td>-0.256505</td>\n",
       "      <td>-0.449434</td>\n",
       "      <td>-1.377675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.238284</td>\n",
       "      <td>1.783569</td>\n",
       "      <td>0.764727</td>\n",
       "      <td>-1.060644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>-1.051254</td>\n",
       "      <td>0.051841</td>\n",
       "      <td>-0.573673</td>\n",
       "      <td>0.755082</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   0         1         2         3\n",
       "2022-01-01 -1.672345 -0.754784  0.033675  1.665611\n",
       "2022-01-02  1.004056 -0.683699 -0.594825 -0.301372\n",
       "2022-01-03 -0.012896 -0.863621  1.852837 -1.168827\n",
       "2022-01-04 -0.910269 -0.256505 -0.449434 -1.377675\n",
       "2022-01-05  0.238284  1.783569  0.764727 -1.060644\n",
       "2022-01-06 -1.051254  0.051841 -0.573673  0.755082"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameのindexに日付を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f12a2ae",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_6.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5930681f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.517297</td>\n",
       "      <td>-0.544849</td>\n",
       "      <td>-0.539752</td>\n",
       "      <td>0.010104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-1.191587</td>\n",
       "      <td>-0.336844</td>\n",
       "      <td>0.191086</td>\n",
       "      <td>1.168171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>0.248434</td>\n",
       "      <td>-1.433488</td>\n",
       "      <td>0.587718</td>\n",
       "      <td>0.094791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.644326</td>\n",
       "      <td>0.606891</td>\n",
       "      <td>-0.255754</td>\n",
       "      <td>-0.060543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>1.521362</td>\n",
       "      <td>1.267967</td>\n",
       "      <td>-1.148776</td>\n",
       "      <td>0.531201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>1.164923</td>\n",
       "      <td>-1.322655</td>\n",
       "      <td>0.248253</td>\n",
       "      <td>1.250457</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01  0.517297 -0.544849 -0.539752  0.010104\n",
       "2022-01-02 -1.191587 -0.336844  0.191086  1.168171\n",
       "2022-01-03  0.248434 -1.433488  0.587718  0.094791\n",
       "2022-01-04 -0.644326  0.606891 -0.255754 -0.060543\n",
       "2022-01-05  1.521362  1.267967 -1.148776  0.531201\n",
       "2022-01-06  1.164923 -1.322655  0.248253  1.250457"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameのcolumnsに列名を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3354e334",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2022-01-01</th>\n",
       "      <th>2022-01-02</th>\n",
       "      <th>2022-01-03</th>\n",
       "      <th>2022-01-04</th>\n",
       "      <th>2022-01-05</th>\n",
       "      <th>2022-01-06</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.119232</td>\n",
       "      <td>0.782822</td>\n",
       "      <td>-0.856779</td>\n",
       "      <td>0.029636</td>\n",
       "      <td>0.030984</td>\n",
       "      <td>-1.200586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>-0.058922</td>\n",
       "      <td>0.276994</td>\n",
       "      <td>0.909797</td>\n",
       "      <td>-0.150001</td>\n",
       "      <td>-1.460427</td>\n",
       "      <td>-1.428395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>-2.130461</td>\n",
       "      <td>-0.777569</td>\n",
       "      <td>1.777723</td>\n",
       "      <td>1.994896</td>\n",
       "      <td>-1.332485</td>\n",
       "      <td>-0.559773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>1.668342</td>\n",
       "      <td>0.906461</td>\n",
       "      <td>0.119276</td>\n",
       "      <td>-1.183900</td>\n",
       "      <td>0.284308</td>\n",
       "      <td>0.770175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   2022-01-01  2022-01-02  2022-01-03  2022-01-04  2022-01-05  2022-01-06\n",
       "A    0.119232    0.782822   -0.856779    0.029636    0.030984   -1.200586\n",
       "B   -0.058922    0.276994    0.909797   -0.150001   -1.460427   -1.428395\n",
       "C   -2.130461   -0.777569    1.777723    1.994896   -1.332485   -0.559773\n",
       "D    1.668342    0.906461    0.119276   -1.183900    0.284308    0.770175"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameのcolumnsに列名を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4cab862",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_7.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "20108d97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.26646</td>\n",
       "      <td>0.057403</td>\n",
       "      <td>-0.531848</td>\n",
       "      <td>-0.864509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  A         B         C         D\n",
       "2022-01-01  0.26646  0.057403 -0.531848 -0.864509"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameの先頭\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d0f9bb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_8.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d2fe11e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.110620</td>\n",
       "      <td>1.106337</td>\n",
       "      <td>-0.844740</td>\n",
       "      <td>2.455905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>-0.486437</td>\n",
       "      <td>1.134828</td>\n",
       "      <td>-1.106468</td>\n",
       "      <td>0.560775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>-1.761830</td>\n",
       "      <td>1.354470</td>\n",
       "      <td>-0.040792</td>\n",
       "      <td>-0.933170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-04 -0.110620  1.106337 -0.844740  2.455905\n",
       "2022-01-05 -0.486437  1.134828 -1.106468  0.560775\n",
       "2022-01-06 -1.761830  1.354470 -0.040792 -0.933170"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameの末尾\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cf57ed1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_9.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "189669ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n",
       "               '2022-01-05', '2022-01-06'],\n",
       "              dtype='datetime64[ns]', freq='D')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"index属性\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfe597e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_10.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "646e4201",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['A', 'B', 'C', 'D'], dtype='object')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"columns属性\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ba9f129",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_11.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e72bbd63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.4493736 ,  1.94253149,  0.54420619,  0.43236626],\n",
       "       [-1.63613319,  0.19197624,  0.10534745,  0.4487452 ],\n",
       "       [-1.18245165, -0.67482281,  1.37219083, -1.38855014],\n",
       "       [ 0.80569372, -0.61566242,  1.50219918, -0.45525597],\n",
       "       [ 0.82864023, -0.9377323 ,  2.08845685,  0.55141632],\n",
       "       [-0.55278099, -1.22086152,  0.99461458, -1.10501461]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"columns属性\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c37751fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_12.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9da74900",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.489142</td>\n",
       "      <td>-0.333712</td>\n",
       "      <td>-0.656421</td>\n",
       "      <td>0.175168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.958346</td>\n",
       "      <td>1.406605</td>\n",
       "      <td>0.730524</td>\n",
       "      <td>1.035606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.872934</td>\n",
       "      <td>-2.210366</td>\n",
       "      <td>-1.812236</td>\n",
       "      <td>-1.574066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-1.178988</td>\n",
       "      <td>-1.079429</td>\n",
       "      <td>-0.997129</td>\n",
       "      <td>-0.287168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.004838</td>\n",
       "      <td>-0.633302</td>\n",
       "      <td>-0.522822</td>\n",
       "      <td>0.690588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.160918</td>\n",
       "      <td>0.790442</td>\n",
       "      <td>-0.293236</td>\n",
       "      <td>0.761833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.301960</td>\n",
       "      <td>1.437815</td>\n",
       "      <td>0.291293</td>\n",
       "      <td>1.071401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              A         B         C         D\n",
       "count  6.000000  6.000000  6.000000  6.000000\n",
       "mean  -0.489142 -0.333712 -0.656421  0.175168\n",
       "std    0.958346  1.406605  0.730524  1.035606\n",
       "min   -1.872934 -2.210366 -1.812236 -1.574066\n",
       "25%   -1.178988 -1.079429 -0.997129 -0.287168\n",
       "50%   -0.004838 -0.633302 -0.522822  0.690588\n",
       "75%    0.160918  0.790442 -0.293236  0.761833\n",
       "max    0.301960  1.437815  0.291293  1.071401"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"describeメソッド\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4658777",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_13.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d7f04d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>1.158216</td>\n",
       "      <td>-1.515249</td>\n",
       "      <td>0.143748</td>\n",
       "      <td>0.935589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.270661</td>\n",
       "      <td>-0.842137</td>\n",
       "      <td>-0.740164</td>\n",
       "      <td>-0.060833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>-0.279937</td>\n",
       "      <td>-0.364837</td>\n",
       "      <td>1.052721</td>\n",
       "      <td>-0.909132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>0.769836</td>\n",
       "      <td>1.063415</td>\n",
       "      <td>0.962210</td>\n",
       "      <td>0.472274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.270285</td>\n",
       "      <td>1.401629</td>\n",
       "      <td>1.675531</td>\n",
       "      <td>-1.158370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.036560</td>\n",
       "      <td>1.697824</td>\n",
       "      <td>0.434932</td>\n",
       "      <td>-0.361276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-06  1.158216 -1.515249  0.143748  0.935589\n",
       "2022-01-03 -0.270661 -0.842137 -0.740164 -0.060833\n",
       "2022-01-05 -0.279937 -0.364837  1.052721 -0.909132\n",
       "2022-01-04  0.769836  1.063415  0.962210  0.472274\n",
       "2022-01-02  0.270285  1.401629  1.675531 -1.158370\n",
       "2022-01-01 -0.036560  1.697824  0.434932 -0.361276"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"B列の値でソート\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.sort_values(by='B')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46af44a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_14.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd5988ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.473853</td>\n",
       "      <td>0.343174</td>\n",
       "      <td>0.478493</td>\n",
       "      <td>-1.368192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-0.884126</td>\n",
       "      <td>-0.272706</td>\n",
       "      <td>-0.098487</td>\n",
       "      <td>0.057563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.308660</td>\n",
       "      <td>-0.861267</td>\n",
       "      <td>0.846430</td>\n",
       "      <td>0.567810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01 -0.473853  0.343174  0.478493 -1.368192\n",
       "2022-01-02 -0.884126 -0.272706 -0.098487  0.057563\n",
       "2022-01-03 -0.308660 -0.861267  0.846430  0.567810"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"行の範囲を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afc15dbf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_15.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53a19cbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.474938</td>\n",
       "      <td>0.944919</td>\n",
       "      <td>-0.765822</td>\n",
       "      <td>-0.187672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-0.997117</td>\n",
       "      <td>0.498579</td>\n",
       "      <td>0.668966</td>\n",
       "      <td>0.288908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>0.331079</td>\n",
       "      <td>1.391152</td>\n",
       "      <td>-1.062023</td>\n",
       "      <td>-0.582052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-02  0.474938  0.944919 -0.765822 -0.187672\n",
       "2022-01-03 -0.997117  0.498579  0.668966  0.288908\n",
       "2022-01-04  0.331079  1.391152 -1.062023 -0.582052"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"列の範囲を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df['20220102':'20220104']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f17e226",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_16.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "659ee9d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A   -0.904365\n",
       "B   -0.204817\n",
       "C   -1.329447\n",
       "D    0.522265\n",
       "Name: 2022-01-01 00:00:00, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"locプロパティでインデックスを指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.loc['20220101']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "373ed4aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_17.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8ccbe501",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A   -0.780131\n",
       "B   -0.047350\n",
       "Name: 2022-01-02 00:00:00, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"locプロパティでインデックスと列を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.loc['20220102', ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1695428c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_18.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "791ce83f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.853643</td>\n",
       "      <td>2.349772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-1.815514</td>\n",
       "      <td>-1.143651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.090784</td>\n",
       "      <td>0.996545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-02  0.853643  2.349772\n",
       "2022-01-03 -1.815514 -1.143651\n",
       "2022-01-04 -0.090784  0.996545"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"locプロパティでインデックスの範囲を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.loc['20220102':'20220104', ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03caf1b2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_19.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "014fbc1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.963894</td>\n",
       "      <td>-2.225687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-1.095431</td>\n",
       "      <td>1.521852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>0.504786</td>\n",
       "      <td>0.719135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.983698</td>\n",
       "      <td>0.513307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.123881</td>\n",
       "      <td>-2.717262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>-0.203720</td>\n",
       "      <td>-0.746597</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-01 -0.963894 -2.225687\n",
       "2022-01-02 -1.095431  1.521852\n",
       "2022-01-03  0.504786  0.719135\n",
       "2022-01-04 -0.983698  0.513307\n",
       "2022-01-05  0.123881 -2.717262\n",
       "2022-01-06 -0.203720 -0.746597"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"locプロパティですべての行を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.loc[:, ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae73e9d7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_20.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d132842b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16462169178561117"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ilocプロパティで数値で要素を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.iloc[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5dbdf318",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_21.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca0b0c3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-1.325454</td>\n",
       "      <td>0.296075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>1.015770</td>\n",
       "      <td>0.955343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B\n",
       "2022-01-01 -1.325454  0.296075\n",
       "2022-01-02  1.015770  0.955343"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"ilocプロパティで数値で要素を指定\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df.iloc[0:2, 0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0485f614",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_22.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf24785f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.911003</td>\n",
       "      <td>-1.002141</td>\n",
       "      <td>-0.797392</td>\n",
       "      <td>-0.337514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>1.179693</td>\n",
       "      <td>-0.365456</td>\n",
       "      <td>0.652465</td>\n",
       "      <td>0.715872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>1.915022</td>\n",
       "      <td>-1.138884</td>\n",
       "      <td>0.435589</td>\n",
       "      <td>0.508299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01  0.911003 -1.002141 -0.797392 -0.337514\n",
       "2022-01-04  1.179693 -0.365456  0.652465  0.715872\n",
       "2022-01-06  1.915022 -1.138884  0.435589  0.508299"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"A列の値が0より大きい行を抽出\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df[df.A > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21890fab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_23.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69643a9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.722917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.188389</td>\n",
       "      <td>0.667193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.586067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.168548</td>\n",
       "      <td>0.053794</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>1.267385</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.575136</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.331244</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.057406</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "2022-01-01  0.722917       NaN  0.188389  0.667193\n",
       "2022-01-02       NaN       NaN       NaN  1.586067\n",
       "2022-01-03       NaN  0.168548  0.053794       NaN\n",
       "2022-01-04  1.267385       NaN  1.575136       NaN\n",
       "2022-01-05       NaN  0.331244       NaN       NaN\n",
       "2022-01-06       NaN       NaN       NaN  0.057406"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"0より大きい値を抽出\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df[df > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1fd2101",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_24.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0ef20efe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>0.634327</td>\n",
       "      <td>-0.160708</td>\n",
       "      <td>-1.204893</td>\n",
       "      <td>-0.110236</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.095349</td>\n",
       "      <td>2.629879</td>\n",
       "      <td>-0.203590</td>\n",
       "      <td>-0.723565</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>0.488426</td>\n",
       "      <td>-0.765891</td>\n",
       "      <td>1.049726</td>\n",
       "      <td>-0.216598</td>\n",
       "      <td>two</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.401396</td>\n",
       "      <td>-0.363015</td>\n",
       "      <td>0.306494</td>\n",
       "      <td>-1.420632</td>\n",
       "      <td>three</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.915427</td>\n",
       "      <td>0.474158</td>\n",
       "      <td>-1.356699</td>\n",
       "      <td>-0.210379</td>\n",
       "      <td>four</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>0.798489</td>\n",
       "      <td>0.642915</td>\n",
       "      <td>1.284028</td>\n",
       "      <td>0.912590</td>\n",
       "      <td>three</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D      E\n",
       "2022-01-01  0.634327 -0.160708 -1.204893 -0.110236    one\n",
       "2022-01-02  0.095349  2.629879 -0.203590 -0.723565    one\n",
       "2022-01-03  0.488426 -0.765891  1.049726 -0.216598    two\n",
       "2022-01-04 -0.401396 -0.363015  0.306494 -1.420632  three\n",
       "2022-01-05  0.915427  0.474158 -1.356699 -0.210379   four\n",
       "2022-01-06  0.798489  0.642915  1.284028  0.912590  three"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"0より大きい値を抽出\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df2 = df.copy()\n",
    "df2['E'] = ['one',  'one', 'two', 'three', 'four', 'three']\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5845eae1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_25.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "796d4fed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>-0.094152</td>\n",
       "      <td>2.411495</td>\n",
       "      <td>0.063400</td>\n",
       "      <td>-0.351873</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>-0.822614</td>\n",
       "      <td>-1.254059</td>\n",
       "      <td>-1.012093</td>\n",
       "      <td>0.892679</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.643923</td>\n",
       "      <td>-2.081679</td>\n",
       "      <td>-0.583174</td>\n",
       "      <td>-0.375567</td>\n",
       "      <td>four</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D     E\n",
       "2022-01-01 -0.094152  2.411495  0.063400 -0.351873   one\n",
       "2022-01-02 -0.822614 -1.254059 -1.012093  0.892679   one\n",
       "2022-01-05  0.643923 -2.081679 -0.583174 -0.375567  four"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"E列の値で行を抽出\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df2 = df.copy()\n",
    "df2['E'] = ['one',  'one', 'two', 'three', 'four', 'three']\n",
    "df2[df2['E'].isin(['one', 'four'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b950a7b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_26.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1201495c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-02</th>\n",
       "      <td>0.010286</td>\n",
       "      <td>-2.928486</td>\n",
       "      <td>-1.262276</td>\n",
       "      <td>-1.929657</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-03</th>\n",
       "      <td>-1.347482</td>\n",
       "      <td>-0.125805</td>\n",
       "      <td>-1.022905</td>\n",
       "      <td>0.183743</td>\n",
       "      <td>one</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-04</th>\n",
       "      <td>-0.714027</td>\n",
       "      <td>0.685431</td>\n",
       "      <td>-0.240065</td>\n",
       "      <td>0.084788</td>\n",
       "      <td>two</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-05</th>\n",
       "      <td>0.822113</td>\n",
       "      <td>0.667813</td>\n",
       "      <td>0.838916</td>\n",
       "      <td>-0.511102</td>\n",
       "      <td>three</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-06</th>\n",
       "      <td>0.970670</td>\n",
       "      <td>1.000258</td>\n",
       "      <td>0.915151</td>\n",
       "      <td>-0.808291</td>\n",
       "      <td>four</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D      E\n",
       "2022-01-01       NaN       NaN       NaN       NaN    NaN\n",
       "2022-01-02  0.010286 -2.928486 -1.262276 -1.929657    one\n",
       "2022-01-03 -1.347482 -0.125805 -1.022905  0.183743    one\n",
       "2022-01-04 -0.714027  0.685431 -0.240065  0.084788    two\n",
       "2022-01-05  0.822113  0.667813  0.838916 -0.511102  three\n",
       "2022-01-06  0.970670  1.000258  0.915151 -0.808291   four"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"行をずらす\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range('20220101', periods=6), columns=['A', 'B', 'C', 'D'])\n",
    "df2 = df.copy()\n",
    "df2['E'] = ['one',  'one', 'two', 'three', 'four', 'three']\n",
    "df2.shift(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "595489b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_27.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7991f050",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.985163</td>\n",
       "      <td>-1.526807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.373044</td>\n",
       "      <td>-1.014113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1\n",
       "0  0.985163 -1.526807\n",
       "1 -0.373044 -1.014113"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DataFrameを抽出\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(2, 2))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4cceacf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_28.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6084bbee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.382078</td>\n",
       "      <td>0.331823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.842626</td>\n",
       "      <td>0.387455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.382078</td>\n",
       "      <td>0.331823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.842626</td>\n",
       "      <td>0.387455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1\n",
       "0  0.382078  0.331823\n",
       "1  0.842626  0.387455\n",
       "0  0.382078  0.331823\n",
       "1  0.842626  0.387455"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"concat関数で変数df2つを結合\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame(np.random.randn(2, 2))\n",
    "pd.concat([df, df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88b669d1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_29.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4677c165",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>foo</td>\n",
       "      <td>0.558333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bar</td>\n",
       "      <td>-0.827087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>foo</td>\n",
       "      <td>1.738726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bar</td>\n",
       "      <td>-0.989190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A         B\n",
       "0  foo  0.558333\n",
       "1  bar -0.827087\n",
       "2  foo  1.738726\n",
       "3  bar -0.989190"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"4行×2列のDataFrameを生成\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar'], 'B': np.random.randn(4)})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddba74cf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_3_30.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b0c67d6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bar</th>\n",
       "      <td>-0.891578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foo</th>\n",
       "      <td>-0.117049</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            B\n",
       "A            \n",
       "bar -0.891578\n",
       "foo -0.117049"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"groupbyメソッドでグループ化\"\"\"\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar'], 'B': np.random.randn(4)})\n",
    "df.groupby('A').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57f4dfb4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_1.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4798c05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"グラフを描画して表示する\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.plot([1, 2, 3, 4])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "806c5542",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_2.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3210f562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"x軸とy軸を指定\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36a3781d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_3.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "21804019",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"丸い点でグラフを描画\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'o')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b2c1ff4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_4.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6bfa8e5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"x軸、y軸の範囲を指定\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'o')\n",
    "plt.axis([0, 6, 0, 10])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad86c322",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_5.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1317cd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"3つのグラフを表示\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "t = np.arange(0, 5, 0.2)\n",
    "plt.plot(t, t, 'r--')\n",
    "plt.plot(t, t**2, 'bs')\n",
    "plt.plot(t, t**3, 'g^')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "537636db",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_6.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd8f4538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"3つのグラフを表示\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "t = np.arange(0, 5, 0.2)\n",
    "plt.plot(t, t, 'r--', label='y=x')\n",
    "plt.plot(t, t**2, 'bs', label='y=x**2')\n",
    "plt.plot(t, t**3, 'g^', label='y=x**3')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07e2efaa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_7.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5433a4dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"散布図を作成\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "plt.scatter(x, y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e32a2bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_8.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b38db5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"散布図の点のサイズ、色を設定\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x = np.random.rand(50)\n",
    "y = np.random.rand(50)\n",
    "sizes = np.random.rand(50) * 100\n",
    "colors = np.random.rand(50)\n",
    "plt.scatter(x, y, s=sizes, c=colors)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba05b588",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_9.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4046c42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"棒グラフを描画\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "values = [1, 2, 3, 4, 5, 6]\n",
    "x_pos = np.arange(len(values))\n",
    "\n",
    "plt.bar(x_pos, values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69b45b6c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_10.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ff72d4aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"棒グラフのx軸の値を設定\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "values = [1, 2, 3, 4, 5, 6]\n",
    "x_pos = np.arange(len(values))\n",
    "objects = ['a', 'b', 'c', 'd', 'e', 'f']\n",
    "\n",
    "plt.bar(x_pos, values)\n",
    "plt.xticks(x_pos, objects)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7359261",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_11.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9878cb55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"円グラフを作成\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "rates = [10, 20, 30, 40]\n",
    "labels = ['Python', 'C++', 'Ruby', 'Java']\n",
    "colors = ['red', 'green', 'yellow', 'blue']\n",
    "\n",
    "plt.pie(rates, labels=labels, colors=colors)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73a3bcf5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_4_12.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "091ef714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"円グラフの項目に割合（%）を表示\"\"\"\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "rates = [10, 20, 30, 40]\n",
    "labels = ['Python', 'C++', 'Ruby', 'Java']\n",
    "colors = ['red', 'green', 'yellow', 'blue']\n",
    "\n",
    "plt.pie(rates, labels=labels, colors=colors, autopct='%1.1f%%')\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3949b0e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_5_1.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49a62d51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>bp</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>s3</th>\n",
       "      <th>s4</th>\n",
       "      <th>s5</th>\n",
       "      <th>s6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.038076</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.061696</td>\n",
       "      <td>0.021872</td>\n",
       "      <td>-0.044223</td>\n",
       "      <td>-0.034821</td>\n",
       "      <td>-0.043401</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.019908</td>\n",
       "      <td>-0.017646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.001882</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.051474</td>\n",
       "      <td>-0.026328</td>\n",
       "      <td>-0.008449</td>\n",
       "      <td>-0.019163</td>\n",
       "      <td>0.074412</td>\n",
       "      <td>-0.039493</td>\n",
       "      <td>-0.068330</td>\n",
       "      <td>-0.092204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.085299</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.044451</td>\n",
       "      <td>-0.005671</td>\n",
       "      <td>-0.045599</td>\n",
       "      <td>-0.034194</td>\n",
       "      <td>-0.032356</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.002864</td>\n",
       "      <td>-0.025930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.089063</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.011595</td>\n",
       "      <td>-0.036656</td>\n",
       "      <td>0.012191</td>\n",
       "      <td>0.024991</td>\n",
       "      <td>-0.036038</td>\n",
       "      <td>0.034309</td>\n",
       "      <td>0.022692</td>\n",
       "      <td>-0.009362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.005383</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.036385</td>\n",
       "      <td>0.021872</td>\n",
       "      <td>0.003935</td>\n",
       "      <td>0.015596</td>\n",
       "      <td>0.008142</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>-0.031991</td>\n",
       "      <td>-0.046641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>0.041708</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>0.019662</td>\n",
       "      <td>0.059744</td>\n",
       "      <td>-0.005697</td>\n",
       "      <td>-0.002566</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>-0.002592</td>\n",
       "      <td>0.031193</td>\n",
       "      <td>0.007207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>-0.005515</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>-0.015906</td>\n",
       "      <td>-0.067642</td>\n",
       "      <td>0.049341</td>\n",
       "      <td>0.079165</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>0.034309</td>\n",
       "      <td>-0.018118</td>\n",
       "      <td>0.044485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>0.041708</td>\n",
       "      <td>0.050680</td>\n",
       "      <td>-0.015906</td>\n",
       "      <td>0.017282</td>\n",
       "      <td>-0.037344</td>\n",
       "      <td>-0.013840</td>\n",
       "      <td>-0.024993</td>\n",
       "      <td>-0.011080</td>\n",
       "      <td>-0.046879</td>\n",
       "      <td>0.015491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>-0.045472</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>0.039062</td>\n",
       "      <td>0.001215</td>\n",
       "      <td>0.016318</td>\n",
       "      <td>0.015283</td>\n",
       "      <td>-0.028674</td>\n",
       "      <td>0.026560</td>\n",
       "      <td>0.044528</td>\n",
       "      <td>-0.025930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>-0.045472</td>\n",
       "      <td>-0.044642</td>\n",
       "      <td>-0.073030</td>\n",
       "      <td>-0.081414</td>\n",
       "      <td>0.083740</td>\n",
       "      <td>0.027809</td>\n",
       "      <td>0.173816</td>\n",
       "      <td>-0.039493</td>\n",
       "      <td>-0.004220</td>\n",
       "      <td>0.003064</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>442 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          age       sex       bmi        bp        s1        s2        s3  \\\n",
       "0    0.038076  0.050680  0.061696  0.021872 -0.044223 -0.034821 -0.043401   \n",
       "1   -0.001882 -0.044642 -0.051474 -0.026328 -0.008449 -0.019163  0.074412   \n",
       "2    0.085299  0.050680  0.044451 -0.005671 -0.045599 -0.034194 -0.032356   \n",
       "3   -0.089063 -0.044642 -0.011595 -0.036656  0.012191  0.024991 -0.036038   \n",
       "4    0.005383 -0.044642 -0.036385  0.021872  0.003935  0.015596  0.008142   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "437  0.041708  0.050680  0.019662  0.059744 -0.005697 -0.002566 -0.028674   \n",
       "438 -0.005515  0.050680 -0.015906 -0.067642  0.049341  0.079165 -0.028674   \n",
       "439  0.041708  0.050680 -0.015906  0.017282 -0.037344 -0.013840 -0.024993   \n",
       "440 -0.045472 -0.044642  0.039062  0.001215  0.016318  0.015283 -0.028674   \n",
       "441 -0.045472 -0.044642 -0.073030 -0.081414  0.083740  0.027809  0.173816   \n",
       "\n",
       "           s4        s5        s6  \n",
       "0   -0.002592  0.019908 -0.017646  \n",
       "1   -0.039493 -0.068330 -0.092204  \n",
       "2   -0.002592  0.002864 -0.025930  \n",
       "3    0.034309  0.022692 -0.009362  \n",
       "4   -0.002592 -0.031991 -0.046641  \n",
       "..        ...       ...       ...  \n",
       "437 -0.002592  0.031193  0.007207  \n",
       "438  0.034309 -0.018118  0.044485  \n",
       "439 -0.011080 -0.046879  0.015491  \n",
       "440  0.026560  0.044528 -0.025930  \n",
       "441 -0.039493 -0.004220  0.003064  \n",
       "\n",
       "[442 rows x 10 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"diabetesのdataプロパティを表示\"\"\"\n",
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0adb4454",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_5_2.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "09d71de5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([151.,  75., 141., 206., 135.,  97., 138.,  63., 110., 310., 101.,\n",
       "        69., 179., 185., 118., 171., 166., 144.,  97., 168.,  68.,  49.,\n",
       "        68., 245., 184., 202., 137.,  85., 131., 283., 129.,  59., 341.,\n",
       "        87.,  65., 102., 265., 276., 252.,  90., 100.,  55.,  61.,  92.,\n",
       "       259.,  53., 190., 142.,  75., 142., 155., 225.,  59., 104., 182.,\n",
       "       128.,  52.,  37., 170., 170.,  61., 144.,  52., 128.,  71., 163.,\n",
       "       150.,  97., 160., 178.,  48., 270., 202., 111.,  85.,  42., 170.,\n",
       "       200., 252., 113., 143.,  51.,  52., 210.,  65., 141.,  55., 134.,\n",
       "        42., 111.,  98., 164.,  48.,  96.,  90., 162., 150., 279.,  92.,\n",
       "        83., 128., 102., 302., 198.,  95.,  53., 134., 144., 232.,  81.,\n",
       "       104.,  59., 246., 297., 258., 229., 275., 281., 179., 200., 200.,\n",
       "       173., 180.,  84., 121., 161.,  99., 109., 115., 268., 274., 158.,\n",
       "       107.,  83., 103., 272.,  85., 280., 336., 281., 118., 317., 235.,\n",
       "        60., 174., 259., 178., 128.,  96., 126., 288.,  88., 292.,  71.,\n",
       "       197., 186.,  25.,  84.,  96., 195.,  53., 217., 172., 131., 214.,\n",
       "        59.,  70., 220., 268., 152.,  47.,  74., 295., 101., 151., 127.,\n",
       "       237., 225.,  81., 151., 107.,  64., 138., 185., 265., 101., 137.,\n",
       "       143., 141.,  79., 292., 178.,  91., 116.,  86., 122.,  72., 129.,\n",
       "       142.,  90., 158.,  39., 196., 222., 277.,  99., 196., 202., 155.,\n",
       "        77., 191.,  70.,  73.,  49.,  65., 263., 248., 296., 214., 185.,\n",
       "        78.,  93., 252., 150.,  77., 208.,  77., 108., 160.,  53., 220.,\n",
       "       154., 259.,  90., 246., 124.,  67.,  72., 257., 262., 275., 177.,\n",
       "        71.,  47., 187., 125.,  78.,  51., 258., 215., 303., 243.,  91.,\n",
       "       150., 310., 153., 346.,  63.,  89.,  50.,  39., 103., 308., 116.,\n",
       "       145.,  74.,  45., 115., 264.,  87., 202., 127., 182., 241.,  66.,\n",
       "        94., 283.,  64., 102., 200., 265.,  94., 230., 181., 156., 233.,\n",
       "        60., 219.,  80.,  68., 332., 248.,  84., 200.,  55.,  85.,  89.,\n",
       "        31., 129.,  83., 275.,  65., 198., 236., 253., 124.,  44., 172.,\n",
       "       114., 142., 109., 180., 144., 163., 147.,  97., 220., 190., 109.,\n",
       "       191., 122., 230., 242., 248., 249., 192., 131., 237.,  78., 135.,\n",
       "       244., 199., 270., 164.,  72.,  96., 306.,  91., 214.,  95., 216.,\n",
       "       263., 178., 113., 200., 139., 139.,  88., 148.,  88., 243.,  71.,\n",
       "        77., 109., 272.,  60.,  54., 221.,  90., 311., 281., 182., 321.,\n",
       "        58., 262., 206., 233., 242., 123., 167.,  63., 197.,  71., 168.,\n",
       "       140., 217., 121., 235., 245.,  40.,  52., 104., 132.,  88.,  69.,\n",
       "       219.,  72., 201., 110.,  51., 277.,  63., 118.,  69., 273., 258.,\n",
       "        43., 198., 242., 232., 175.,  93., 168., 275., 293., 281.,  72.,\n",
       "       140., 189., 181., 209., 136., 261., 113., 131., 174., 257.,  55.,\n",
       "        84.,  42., 146., 212., 233.,  91., 111., 152., 120.,  67., 310.,\n",
       "        94., 183.,  66., 173.,  72.,  49.,  64.,  48., 178., 104., 132.,\n",
       "       220.,  57.])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "\"\"\"diabetesのtargetプロパティを表示\"\"\"\n",
    "diabetes.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "698390ff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_5_3.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0282b124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40052152529495044"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"機械学習の結果を検証\"\"\"\n",
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "\n",
    "X = diabetes.data\n",
    "y = diabetes.target\n",
    "\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "lr.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c35f2c89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_5_4.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3f89c38a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"機械学習の結果を検証\"\"\"\n",
    "import sklearn.datasets\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "diabetes = sklearn.datasets.load_diabetes()\n",
    "\n",
    "X = diabetes.data\n",
    "y = diabetes.target\n",
    "\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted = lr.predict(X)\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(y, predicted, edgecolors=(0, 0, 0))\n",
    "ax.plot([y.min(), y.max()], [y.min(), y.max()], \"k--\", lw=4)\n",
    "ax.set_xlabel(\"Measured\")\n",
    "ax.set_ylabel(\"Predicted\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46f17aad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_1.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa2229ee",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-24</th>\n",
       "      <td>140.309998</td>\n",
       "      <td>143.160004</td>\n",
       "      <td>140.300003</td>\n",
       "      <td>142.529999</td>\n",
       "      <td>142.529999</td>\n",
       "      <td>66435100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-25</th>\n",
       "      <td>140.889999</td>\n",
       "      <td>142.429993</td>\n",
       "      <td>138.809998</td>\n",
       "      <td>141.860001</td>\n",
       "      <td>141.860001</td>\n",
       "      <td>65799300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-26</th>\n",
       "      <td>143.169998</td>\n",
       "      <td>144.250000</td>\n",
       "      <td>141.899994</td>\n",
       "      <td>143.960007</td>\n",
       "      <td>143.960007</td>\n",
       "      <td>54003800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Open        High         Low       Close   Adj Close  \\\n",
       "Date                                                                     \n",
       "2023-01-24  140.309998  143.160004  140.300003  142.529999  142.529999   \n",
       "2023-01-25  140.889999  142.429993  138.809998  141.860001  141.860001   \n",
       "2023-01-26  143.169998  144.250000  141.899994  143.960007  143.960007   \n",
       "\n",
       "              Volume  \n",
       "Date                  \n",
       "2023-01-24  66435100  \n",
       "2023-01-25  65799300  \n",
       "2023-01-26  54003800  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"株価のデータを取得\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.get_data_yahoo('GLD', '2020-01-01')\n",
    "df_aapl.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28844e02",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_2.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3392a755",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"株価と単純移動平均をグラフ化\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_aapl['SMA'].plot(figsize=(15,6), color='green')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4591a3b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_3.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ce89fd23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"Apple社とMeta社の株価を比較\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='red')\n",
    "df_meta['Close'].plot(figsize=(15,6), color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88ebcf62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_4.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b91680b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>changing</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-25</th>\n",
       "      <td>140.89</td>\n",
       "      <td>142.43</td>\n",
       "      <td>138.81</td>\n",
       "      <td>141.86</td>\n",
       "      <td>141.86</td>\n",
       "      <td>65799300</td>\n",
       "      <td>0.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-26</th>\n",
       "      <td>143.17</td>\n",
       "      <td>144.25</td>\n",
       "      <td>141.90</td>\n",
       "      <td>143.96</td>\n",
       "      <td>143.96</td>\n",
       "      <td>54003800</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Open    High     Low   Close  Adj Close    Volume  changing\n",
       "Date                                                                     \n",
       "2023-01-25  140.89  142.43  138.81  141.86     141.86  65799300      0.69\n",
       "2023-01-26  143.17  144.25  141.90  143.96     143.96  54003800      0.55"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"株価の変化率を求める\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.get_data_yahoo('GLD', '2020-01-01')\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_meta['changing'] = (((df_meta['Close'] - df_meta['Open'])) / (df_meta['Open']) * 100)\n",
    "df_gold['changing'] = (((df_gold['Close'] - df_gold['Open'])) / (df_gold['Open']) * 100)\n",
    "df_aapl.tail(2).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87ebe90c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_5.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9d2c5ae9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"3つの株価の変化率をグラフにする\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "df_meta = pandas_datareader.data.get_data_yahoo('META', '2020-01-01')\n",
    "df_gold = pandas_datareader.data.get_data_yahoo('GLD', '2020-01-01')\n",
    "\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_meta['changing'] = (((df_meta['Close'] - df_meta['Open'])) / (df_meta['Open']) * 100)\n",
    "df_gold['changing'] = (((df_gold['Close'] - df_gold['Open'])) / (df_gold['Open']) * 100)\n",
    "df_aapl.tail(2).round(2)\n",
    "\n",
    "df_aapl['changing'].tail(100).plot(grid=True, figsize=(15,6), color='red')\n",
    "df_meta['changing'].tail(100).plot(grid=True, figsize=(15,6), color='blue')\n",
    "df_gold['changing'].tail(100).plot(grid=True, figsize=(15,6), color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acb40906",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_6.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f806c0ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>changing</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-12-06</th>\n",
       "      <td>147.070007</td>\n",
       "      <td>147.300003</td>\n",
       "      <td>141.919998</td>\n",
       "      <td>142.910004</td>\n",
       "      <td>142.910004</td>\n",
       "      <td>64727200</td>\n",
       "      <td>-2.828587</td>\n",
       "      <td>137.869995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-07</th>\n",
       "      <td>142.190002</td>\n",
       "      <td>143.369995</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>140.940002</td>\n",
       "      <td>140.940002</td>\n",
       "      <td>69721100</td>\n",
       "      <td>-0.879105</td>\n",
       "      <td>141.110001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-08</th>\n",
       "      <td>142.360001</td>\n",
       "      <td>143.520004</td>\n",
       "      <td>141.100006</td>\n",
       "      <td>142.649994</td>\n",
       "      <td>142.649994</td>\n",
       "      <td>62128300</td>\n",
       "      <td>0.203704</td>\n",
       "      <td>142.529999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-09</th>\n",
       "      <td>142.339996</td>\n",
       "      <td>145.570007</td>\n",
       "      <td>140.899994</td>\n",
       "      <td>142.160004</td>\n",
       "      <td>142.160004</td>\n",
       "      <td>76097000</td>\n",
       "      <td>-0.126453</td>\n",
       "      <td>141.860001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-12</th>\n",
       "      <td>142.699997</td>\n",
       "      <td>144.500000</td>\n",
       "      <td>141.059998</td>\n",
       "      <td>144.490005</td>\n",
       "      <td>144.490005</td>\n",
       "      <td>70462700</td>\n",
       "      <td>1.254386</td>\n",
       "      <td>143.960007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-13</th>\n",
       "      <td>149.500000</td>\n",
       "      <td>149.970001</td>\n",
       "      <td>144.240005</td>\n",
       "      <td>145.470001</td>\n",
       "      <td>145.470001</td>\n",
       "      <td>93886200</td>\n",
       "      <td>-2.695651</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-14</th>\n",
       "      <td>145.350006</td>\n",
       "      <td>146.660004</td>\n",
       "      <td>141.160004</td>\n",
       "      <td>143.210007</td>\n",
       "      <td>143.210007</td>\n",
       "      <td>82291200</td>\n",
       "      <td>-1.472308</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-15</th>\n",
       "      <td>141.110001</td>\n",
       "      <td>141.800003</td>\n",
       "      <td>136.029999</td>\n",
       "      <td>136.500000</td>\n",
       "      <td>136.500000</td>\n",
       "      <td>98931900</td>\n",
       "      <td>-3.266955</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-16</th>\n",
       "      <td>136.690002</td>\n",
       "      <td>137.649994</td>\n",
       "      <td>133.729996</td>\n",
       "      <td>134.509995</td>\n",
       "      <td>134.509995</td>\n",
       "      <td>160156900</td>\n",
       "      <td>-1.594855</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-19</th>\n",
       "      <td>135.110001</td>\n",
       "      <td>135.199997</td>\n",
       "      <td>131.320007</td>\n",
       "      <td>132.369995</td>\n",
       "      <td>132.369995</td>\n",
       "      <td>79592600</td>\n",
       "      <td>-2.027981</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-20</th>\n",
       "      <td>131.389999</td>\n",
       "      <td>133.250000</td>\n",
       "      <td>129.889999</td>\n",
       "      <td>132.300003</td>\n",
       "      <td>132.300003</td>\n",
       "      <td>77432800</td>\n",
       "      <td>0.692597</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-21</th>\n",
       "      <td>132.979996</td>\n",
       "      <td>136.809998</td>\n",
       "      <td>132.750000</td>\n",
       "      <td>135.449997</td>\n",
       "      <td>135.449997</td>\n",
       "      <td>85928000</td>\n",
       "      <td>1.857423</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-22</th>\n",
       "      <td>134.350006</td>\n",
       "      <td>134.559998</td>\n",
       "      <td>130.300003</td>\n",
       "      <td>132.229996</td>\n",
       "      <td>132.229996</td>\n",
       "      <td>77852100</td>\n",
       "      <td>-1.577976</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-23</th>\n",
       "      <td>130.919998</td>\n",
       "      <td>132.419998</td>\n",
       "      <td>129.639999</td>\n",
       "      <td>131.860001</td>\n",
       "      <td>131.860001</td>\n",
       "      <td>63814900</td>\n",
       "      <td>0.717998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-27</th>\n",
       "      <td>131.380005</td>\n",
       "      <td>131.410004</td>\n",
       "      <td>128.720001</td>\n",
       "      <td>130.029999</td>\n",
       "      <td>130.029999</td>\n",
       "      <td>69007800</td>\n",
       "      <td>-1.027558</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-28</th>\n",
       "      <td>129.669998</td>\n",
       "      <td>131.029999</td>\n",
       "      <td>125.870003</td>\n",
       "      <td>126.040001</td>\n",
       "      <td>126.040001</td>\n",
       "      <td>85438400</td>\n",
       "      <td>-2.799412</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-29</th>\n",
       "      <td>127.989998</td>\n",
       "      <td>130.479996</td>\n",
       "      <td>127.730003</td>\n",
       "      <td>129.610001</td>\n",
       "      <td>129.610001</td>\n",
       "      <td>75703700</td>\n",
       "      <td>1.265726</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-30</th>\n",
       "      <td>128.410004</td>\n",
       "      <td>129.949997</td>\n",
       "      <td>127.430000</td>\n",
       "      <td>129.929993</td>\n",
       "      <td>129.929993</td>\n",
       "      <td>76960600</td>\n",
       "      <td>1.183700</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-03</th>\n",
       "      <td>130.279999</td>\n",
       "      <td>130.899994</td>\n",
       "      <td>124.169998</td>\n",
       "      <td>125.070000</td>\n",
       "      <td>125.070000</td>\n",
       "      <td>112117500</td>\n",
       "      <td>-3.999078</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-04</th>\n",
       "      <td>126.889999</td>\n",
       "      <td>128.660004</td>\n",
       "      <td>125.080002</td>\n",
       "      <td>126.360001</td>\n",
       "      <td>126.360001</td>\n",
       "      <td>89113600</td>\n",
       "      <td>-0.417684</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-05</th>\n",
       "      <td>127.129997</td>\n",
       "      <td>127.769997</td>\n",
       "      <td>124.760002</td>\n",
       "      <td>125.019997</td>\n",
       "      <td>125.019997</td>\n",
       "      <td>80962700</td>\n",
       "      <td>-1.659719</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-06</th>\n",
       "      <td>126.010002</td>\n",
       "      <td>130.289993</td>\n",
       "      <td>124.889999</td>\n",
       "      <td>129.619995</td>\n",
       "      <td>129.619995</td>\n",
       "      <td>87686600</td>\n",
       "      <td>2.864846</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-09</th>\n",
       "      <td>130.470001</td>\n",
       "      <td>133.410004</td>\n",
       "      <td>129.889999</td>\n",
       "      <td>130.149994</td>\n",
       "      <td>130.149994</td>\n",
       "      <td>70790800</td>\n",
       "      <td>-0.245273</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-10</th>\n",
       "      <td>130.259995</td>\n",
       "      <td>131.259995</td>\n",
       "      <td>128.119995</td>\n",
       "      <td>130.729996</td>\n",
       "      <td>130.729996</td>\n",
       "      <td>63896200</td>\n",
       "      <td>0.360818</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-11</th>\n",
       "      <td>131.250000</td>\n",
       "      <td>133.509995</td>\n",
       "      <td>130.460007</td>\n",
       "      <td>133.490005</td>\n",
       "      <td>133.490005</td>\n",
       "      <td>69458900</td>\n",
       "      <td>1.706671</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-12</th>\n",
       "      <td>133.880005</td>\n",
       "      <td>134.259995</td>\n",
       "      <td>131.440002</td>\n",
       "      <td>133.410004</td>\n",
       "      <td>133.410004</td>\n",
       "      <td>71379600</td>\n",
       "      <td>-0.351062</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-13</th>\n",
       "      <td>132.029999</td>\n",
       "      <td>134.919998</td>\n",
       "      <td>131.660004</td>\n",
       "      <td>134.759995</td>\n",
       "      <td>134.759995</td>\n",
       "      <td>57758000</td>\n",
       "      <td>2.067709</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-17</th>\n",
       "      <td>134.830002</td>\n",
       "      <td>137.289993</td>\n",
       "      <td>134.130005</td>\n",
       "      <td>135.940002</td>\n",
       "      <td>135.940002</td>\n",
       "      <td>63646600</td>\n",
       "      <td>0.823259</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-18</th>\n",
       "      <td>136.820007</td>\n",
       "      <td>138.610001</td>\n",
       "      <td>135.029999</td>\n",
       "      <td>135.210007</td>\n",
       "      <td>135.210007</td>\n",
       "      <td>69672800</td>\n",
       "      <td>-1.176729</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-19</th>\n",
       "      <td>134.080002</td>\n",
       "      <td>136.250000</td>\n",
       "      <td>133.770004</td>\n",
       "      <td>135.270004</td>\n",
       "      <td>135.270004</td>\n",
       "      <td>58280400</td>\n",
       "      <td>0.887532</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-20</th>\n",
       "      <td>135.279999</td>\n",
       "      <td>138.020004</td>\n",
       "      <td>134.220001</td>\n",
       "      <td>137.869995</td>\n",
       "      <td>137.869995</td>\n",
       "      <td>79972200</td>\n",
       "      <td>1.914545</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-23</th>\n",
       "      <td>138.119995</td>\n",
       "      <td>143.320007</td>\n",
       "      <td>137.899994</td>\n",
       "      <td>141.110001</td>\n",
       "      <td>141.110001</td>\n",
       "      <td>81760300</td>\n",
       "      <td>2.164788</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-24</th>\n",
       "      <td>140.309998</td>\n",
       "      <td>143.160004</td>\n",
       "      <td>140.300003</td>\n",
       "      <td>142.529999</td>\n",
       "      <td>142.529999</td>\n",
       "      <td>66435100</td>\n",
       "      <td>1.582212</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-25</th>\n",
       "      <td>140.889999</td>\n",
       "      <td>142.429993</td>\n",
       "      <td>138.809998</td>\n",
       "      <td>141.860001</td>\n",
       "      <td>141.860001</td>\n",
       "      <td>65799300</td>\n",
       "      <td>0.688481</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-26</th>\n",
       "      <td>143.169998</td>\n",
       "      <td>144.250000</td>\n",
       "      <td>141.899994</td>\n",
       "      <td>143.960007</td>\n",
       "      <td>143.960007</td>\n",
       "      <td>54003800</td>\n",
       "      <td>0.551798</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Open        High         Low       Close   Adj Close  \\\n",
       "Date                                                                     \n",
       "2022-12-06  147.070007  147.300003  141.919998  142.910004  142.910004   \n",
       "2022-12-07  142.190002  143.369995  140.000000  140.940002  140.940002   \n",
       "2022-12-08  142.360001  143.520004  141.100006  142.649994  142.649994   \n",
       "2022-12-09  142.339996  145.570007  140.899994  142.160004  142.160004   \n",
       "2022-12-12  142.699997  144.500000  141.059998  144.490005  144.490005   \n",
       "2022-12-13  149.500000  149.970001  144.240005  145.470001  145.470001   \n",
       "2022-12-14  145.350006  146.660004  141.160004  143.210007  143.210007   \n",
       "2022-12-15  141.110001  141.800003  136.029999  136.500000  136.500000   \n",
       "2022-12-16  136.690002  137.649994  133.729996  134.509995  134.509995   \n",
       "2022-12-19  135.110001  135.199997  131.320007  132.369995  132.369995   \n",
       "2022-12-20  131.389999  133.250000  129.889999  132.300003  132.300003   \n",
       "2022-12-21  132.979996  136.809998  132.750000  135.449997  135.449997   \n",
       "2022-12-22  134.350006  134.559998  130.300003  132.229996  132.229996   \n",
       "2022-12-23  130.919998  132.419998  129.639999  131.860001  131.860001   \n",
       "2022-12-27  131.380005  131.410004  128.720001  130.029999  130.029999   \n",
       "2022-12-28  129.669998  131.029999  125.870003  126.040001  126.040001   \n",
       "2022-12-29  127.989998  130.479996  127.730003  129.610001  129.610001   \n",
       "2022-12-30  128.410004  129.949997  127.430000  129.929993  129.929993   \n",
       "2023-01-03  130.279999  130.899994  124.169998  125.070000  125.070000   \n",
       "2023-01-04  126.889999  128.660004  125.080002  126.360001  126.360001   \n",
       "2023-01-05  127.129997  127.769997  124.760002  125.019997  125.019997   \n",
       "2023-01-06  126.010002  130.289993  124.889999  129.619995  129.619995   \n",
       "2023-01-09  130.470001  133.410004  129.889999  130.149994  130.149994   \n",
       "2023-01-10  130.259995  131.259995  128.119995  130.729996  130.729996   \n",
       "2023-01-11  131.250000  133.509995  130.460007  133.490005  133.490005   \n",
       "2023-01-12  133.880005  134.259995  131.440002  133.410004  133.410004   \n",
       "2023-01-13  132.029999  134.919998  131.660004  134.759995  134.759995   \n",
       "2023-01-17  134.830002  137.289993  134.130005  135.940002  135.940002   \n",
       "2023-01-18  136.820007  138.610001  135.029999  135.210007  135.210007   \n",
       "2023-01-19  134.080002  136.250000  133.770004  135.270004  135.270004   \n",
       "2023-01-20  135.279999  138.020004  134.220001  137.869995  137.869995   \n",
       "2023-01-23  138.119995  143.320007  137.899994  141.110001  141.110001   \n",
       "2023-01-24  140.309998  143.160004  140.300003  142.529999  142.529999   \n",
       "2023-01-25  140.889999  142.429993  138.809998  141.860001  141.860001   \n",
       "2023-01-26  143.169998  144.250000  141.899994  143.960007  143.960007   \n",
       "\n",
       "               Volume  changing       label  \n",
       "Date                                         \n",
       "2022-12-06   64727200 -2.828587  137.869995  \n",
       "2022-12-07   69721100 -0.879105  141.110001  \n",
       "2022-12-08   62128300  0.203704  142.529999  \n",
       "2022-12-09   76097000 -0.126453  141.860001  \n",
       "2022-12-12   70462700  1.254386  143.960007  \n",
       "2022-12-13   93886200 -2.695651         NaN  \n",
       "2022-12-14   82291200 -1.472308         NaN  \n",
       "2022-12-15   98931900 -3.266955         NaN  \n",
       "2022-12-16  160156900 -1.594855         NaN  \n",
       "2022-12-19   79592600 -2.027981         NaN  \n",
       "2022-12-20   77432800  0.692597         NaN  \n",
       "2022-12-21   85928000  1.857423         NaN  \n",
       "2022-12-22   77852100 -1.577976         NaN  \n",
       "2022-12-23   63814900  0.717998         NaN  \n",
       "2022-12-27   69007800 -1.027558         NaN  \n",
       "2022-12-28   85438400 -2.799412         NaN  \n",
       "2022-12-29   75703700  1.265726         NaN  \n",
       "2022-12-30   76960600  1.183700         NaN  \n",
       "2023-01-03  112117500 -3.999078         NaN  \n",
       "2023-01-04   89113600 -0.417684         NaN  \n",
       "2023-01-05   80962700 -1.659719         NaN  \n",
       "2023-01-06   87686600  2.864846         NaN  \n",
       "2023-01-09   70790800 -0.245273         NaN  \n",
       "2023-01-10   63896200  0.360818         NaN  \n",
       "2023-01-11   69458900  1.706671         NaN  \n",
       "2023-01-12   71379600 -0.351062         NaN  \n",
       "2023-01-13   57758000  2.067709         NaN  \n",
       "2023-01-17   63646600  0.823259         NaN  \n",
       "2023-01-18   69672800 -1.176729         NaN  \n",
       "2023-01-19   58280400  0.887532         NaN  \n",
       "2023-01-20   79972200  1.914545         NaN  \n",
       "2023-01-23   81760300  2.164788         NaN  \n",
       "2023-01-24   66435100  1.582212         NaN  \n",
       "2023-01-25   65799300  0.688481         NaN  \n",
       "2023-01-26   54003800  0.551798         NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"終値を格納する\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl['changing'] = (((df_aapl['Close'] - df_aapl['Open'])) / (df_aapl['Open']) * 100)\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c6a9ade",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_7.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fb02dda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[-1.85629054, -1.8604869 , -1.83000261, -1.8268695 , -1.82905257,\n",
       "         0.43281289],\n",
       "       [-1.84877835, -1.86065084, -1.81907897, -1.85099494, -1.8524951 ,\n",
       "         0.62742498],\n",
       "       [-1.87651545, -1.86572794, -1.85034898, -1.8314138 , -1.83346783,\n",
       "         0.12600412],\n",
       "       ...,\n",
       "       [ 0.16522451,  0.1988648 ,  0.1853704 ,  0.24799143,  0.27892979,\n",
       "        -0.56351327],\n",
       "       [ 0.25900261,  0.37247017,  0.30811536,  0.35506843,  0.38513469,\n",
       "        -0.53141836],\n",
       "       [ 0.33131759,  0.36722914,  0.3881669 ,  0.40199709,  0.43168115,\n",
       "        -0.81283443]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"学習させるデータをXに格納\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "X = sklearn.preprocessing.scale(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ff0a025",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b813d416c36fb0bd22d28e8500bf7131554964114722910e55b20ab4a08edb2e"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_8.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23113868",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 81.23750305,  79.75      ,  80.90499878,  80.07499695,\n",
       "        78.26249695,  74.54499817,  72.01999664,  73.16249847,\n",
       "        68.37999725,  68.33999634,  74.70249939,  72.33000183,\n",
       "        75.68499756,  73.23000336,  72.25749969,  66.54250336,\n",
       "        71.33499908,  68.85749817,  62.05749893,  69.49250031,\n",
       "        60.55250168,  63.21500015,  61.66749954,  61.19499969,\n",
       "        57.31000137,  56.09249878,  61.72000122,  61.38000107,\n",
       "        64.61000061,  61.93500137,  63.70249939,  63.57249832,\n",
       "        60.22750092,  61.23249817,  60.35250092,  65.61750031,\n",
       "        64.85749817,  66.51750183,  66.99749756,  68.3125    ,\n",
       "        71.76249695,  71.10749817,  71.67250061,  70.69999695,\n",
       "        69.23249817,  67.09249878,  69.02500153,  68.75749969,\n",
       "        70.74250031,  70.79250336,  69.64499664,  71.93250275,\n",
       "        73.44999695,  72.26750183,  73.29000092,  74.38999939,\n",
       "        75.15750122,  75.93499756,  77.53250122,  78.75250244,\n",
       "        77.85250092,  76.91249847,  77.38500214,  76.92749786,\n",
       "        78.73999786,  78.28500366,  79.80750275,  79.21250153,\n",
       "        79.72250366,  79.18250275,  79.52749634,  79.5625    ,\n",
       "        79.48500061,  80.46250153,  80.83499908,  81.27999878,\n",
       "        80.58000183,  82.875     ,  83.36499786,  85.99749756,\n",
       "        88.20999908,  83.97499847,  84.69999695,  85.74749756,\n",
       "        88.01999664,  87.89749908,  87.93250275,  87.43000031,\n",
       "        89.71749878,  91.63249969,  90.01499939,  91.20999908,\n",
       "        88.40750122,  90.44499969,  91.19999695,  91.02749634,\n",
       "        91.02749634,  93.46250153,  93.17250061,  95.34249878,\n",
       "        95.75250244,  95.91999817,  95.47750092,  97.05750275,\n",
       "        97.72499847,  96.52249908,  96.32749939,  98.35749817,\n",
       "        97.        ,  97.27249908,  92.84500122,  92.61499786,\n",
       "        94.80999756,  93.25250244,  95.04000092,  96.19000244,\n",
       "       106.26000214, 108.9375    , 109.66500092, 110.0625    ,\n",
       "       113.90249634, 111.11250305, 112.72750092, 109.375     ,\n",
       "       113.01000214, 115.01000214, 114.90750122, 114.60749817,\n",
       "       115.5625    , 115.70749664, 118.27500153, 124.37000275,\n",
       "       125.85749817, 124.82499695, 126.52249908, 125.01000214,\n",
       "       124.80750275, 129.03999329, 134.17999268, 131.3999939 ,\n",
       "       120.87999725, 120.95999908, 112.81999969, 117.31999969,\n",
       "       113.48999786, 112.        , 115.36000061, 115.54000092,\n",
       "       112.12999725, 110.33999634, 106.83999634, 110.08000183,\n",
       "       111.80999756, 107.12000275, 108.22000122, 112.27999878,\n",
       "       114.95999908, 114.08999634, 115.80999756, 116.79000092,\n",
       "       113.01999664, 116.5       , 113.16000366, 115.08000183,\n",
       "       114.97000122, 116.97000122, 124.40000153, 121.09999847,\n",
       "       121.19000244, 120.70999908, 119.01999664, 115.98000336,\n",
       "       117.51000214, 116.87000275, 115.75      , 115.04000092,\n",
       "       115.05000305, 116.59999847, 111.19999695, 115.31999969,\n",
       "       108.86000061, 108.76999664, 110.44000244, 114.94999695,\n",
       "       119.02999878, 118.69000244, 116.31999969, 115.97000122,\n",
       "       119.48999786, 119.20999908, 119.26000214, 120.30000305,\n",
       "       119.38999939, 118.02999878, 118.63999939, 117.33999634,\n",
       "       113.84999847, 115.16999817, 116.02999878, 116.58999634,\n",
       "       119.05000305, 122.72000122, 123.08000183, 122.94000244,\n",
       "       122.25      , 123.75      , 124.37999725, 121.77999878,\n",
       "       123.23999786, 122.41000366, 121.77999878, 127.87999725,\n",
       "       127.80999756, 128.69999695, 126.66000366, 128.22999573,\n",
       "       131.88000488, 130.96000671, 131.97000122, 136.69000244,\n",
       "       134.86999512, 133.72000122, 132.69000244, 129.41000366,\n",
       "       131.00999451, 126.59999847, 130.91999817, 132.05000305,\n",
       "       128.97999573, 128.80000305, 130.88999939, 128.91000366,\n",
       "       127.13999939, 127.83000183, 132.02999878, 136.86999512,\n",
       "       139.07000732, 142.91999817, 143.16000366, 142.05999756,\n",
       "       137.08999634, 131.96000671, 134.13999939, 134.99000549,\n",
       "       133.94000244, 137.38999939, 136.75999451, 136.91000366,\n",
       "       136.00999451, 135.38999939, 135.13000488, 135.36999512,\n",
       "       133.19000244, 130.83999634, 129.71000671, 129.86999512,\n",
       "       126.        , 125.86000061, 125.34999847, 120.98999786,\n",
       "       121.26000214, 127.79000092, 125.12000275, 122.05999756,\n",
       "       120.12999725, 121.41999817, 116.36000061, 121.08999634,\n",
       "       119.98000336, 121.95999908, 121.02999878, 123.98999786,\n",
       "       125.56999969, 124.76000214, 120.52999878, 119.98999786,\n",
       "       123.38999939, 122.54000092, 120.08999634, 120.58999634,\n",
       "       121.20999908, 121.38999939, 119.90000153, 122.15000153,\n",
       "       123.        , 125.90000153, 126.20999908, 127.90000153,\n",
       "       130.36000061, 133.        , 131.24000549, 134.42999268,\n",
       "       132.02999878, 134.5       , 134.16000366, 134.83999634,\n",
       "       133.11000061, 133.5       , 131.94000244, 134.32000732,\n",
       "       134.72000122, 134.38999939, 133.58000183, 133.47999573,\n",
       "       131.46000671, 132.53999329, 127.84999847, 128.1000061 ,\n",
       "       129.74000549, 130.21000671, 126.84999847, 125.91000366,\n",
       "       122.76999664, 124.97000122, 127.44999695, 126.26999664,\n",
       "       124.84999847, 124.69000244, 127.30999756, 125.43000031,\n",
       "       127.09999847, 126.90000153, 126.84999847, 125.27999878,\n",
       "       124.61000061, 124.27999878, 125.05999756, 123.54000092,\n",
       "       125.88999939, 125.90000153, 126.73999786, 127.12999725,\n",
       "       126.11000061, 127.34999847, 130.47999573, 129.63999939,\n",
       "       130.1499939 , 131.78999329, 130.46000671, 132.30000305,\n",
       "       133.97999573, 133.69999695, 133.41000366, 133.11000061,\n",
       "       134.77999878, 136.33000183, 136.96000671, 137.27000427,\n",
       "       139.96000671, 142.02000427, 144.57000732, 143.24000549,\n",
       "       145.11000061, 144.5       , 145.63999939, 149.1499939 ,\n",
       "       148.47999573, 146.38999939, 142.44999695, 146.1499939 ,\n",
       "       145.3999939 , 146.80000305, 148.55999756, 148.99000549,\n",
       "       146.77000427, 144.97999573, 145.63999939, 145.86000061,\n",
       "       145.52000427, 147.36000061, 146.94999695, 147.05999756,\n",
       "       146.13999939, 146.08999634, 145.6000061 , 145.86000061,\n",
       "       148.88999939, 149.1000061 , 151.11999512, 150.19000244,\n",
       "       146.36000061, 146.69999695, 148.19000244, 149.71000671,\n",
       "       149.61999512, 148.36000061, 147.53999329, 148.6000061 ,\n",
       "       153.11999512, 151.83000183, 152.50999451, 153.6499939 ,\n",
       "       154.30000305, 156.69000244, 155.11000061, 154.07000732,\n",
       "       148.97000122, 149.55000305, 148.11999512, 149.02999878,\n",
       "       148.78999329, 146.05999756, 142.94000244, 143.42999268,\n",
       "       145.8500061 , 146.83000183, 146.91999817, 145.36999512,\n",
       "       141.91000366, 142.83000183, 141.5       , 142.6499939 ,\n",
       "       139.13999939, 141.11000061, 142.        , 143.28999329,\n",
       "       142.8999939 , 142.80999756, 141.50999451, 140.91000366,\n",
       "       143.75999451, 144.83999634, 146.55000305, 148.75999451,\n",
       "       149.25999451, 149.47999573, 148.69000244, 148.63999939,\n",
       "       149.32000732, 148.8500061 , 152.57000732, 149.80000305,\n",
       "       148.96000671, 150.02000427, 151.49000549, 150.96000671,\n",
       "       151.27999878, 150.44000244, 150.80999756, 147.91999817,\n",
       "       147.86999512, 149.99000549, 150.        , 151.        ,\n",
       "       153.49000549, 157.86999512, 160.55000305, 161.02000427,\n",
       "       161.41000366, 161.94000244, 156.80999756, 160.24000549,\n",
       "       165.30000305, 164.77000427, 163.75999451, 161.83999634,\n",
       "       165.32000732, 171.17999268, 175.08000183, 174.55999756,\n",
       "       179.44999695, 175.74000549, 174.33000183, 179.30000305,\n",
       "       172.25999451, 171.13999939, 169.75      , 172.99000549,\n",
       "       175.63999939, 176.27999878, 180.33000183, 179.28999329,\n",
       "       179.38000488, 178.19999695, 177.57000732, 182.00999451,\n",
       "       179.69999695, 174.91999817, 172.        , 172.16999817,\n",
       "       172.19000244, 175.08000183, 175.52999878, 172.19000244,\n",
       "       173.07000732, 169.80000305, 166.22999573, 164.50999451,\n",
       "       162.41000366, 161.61999512, 159.77999878, 159.69000244,\n",
       "       159.22000122, 170.33000183, 174.77999878, 174.61000061,\n",
       "       175.83999634, 172.8999939 , 172.38999939, 171.66000366,\n",
       "       174.83000183, 176.27999878, 172.11999512, 168.63999939,\n",
       "       168.88000488, 172.78999329, 172.55000305, 168.88000488,\n",
       "       167.30000305, 164.32000732, 160.07000732, 162.74000549,\n",
       "       164.8500061 , 165.11999512, 163.19999695, 166.55999756,\n",
       "       166.22999573, 163.16999817, 159.30000305, 157.44000244,\n",
       "       162.94999695, 158.52000427, 154.72999573, 150.61999512,\n",
       "       155.08999634, 159.58999634, 160.61999512, 163.97999573,\n",
       "       165.38000488, 168.82000732, 170.21000671, 174.07000732,\n",
       "       174.72000122, 175.6000061 , 178.96000671, 177.77000427,\n",
       "       174.61000061, 174.30999756, 178.44000244, 175.05999756,\n",
       "       171.83000183, 172.13999939, 170.08999634, 165.75      ,\n",
       "       167.66000366, 170.3999939 , 165.28999329, 165.07000732,\n",
       "       167.3999939 , 167.22999573, 166.41999817, 161.78999329,\n",
       "       162.88000488, 156.80000305, 156.57000732, 163.63999939,\n",
       "       157.6499939 , 157.96000671, 159.47999573, 166.02000427,\n",
       "       156.77000427, 157.27999878, 152.05999756, 154.50999451,\n",
       "       146.5       , 142.55999756, 147.11000061, 145.53999329,\n",
       "       149.24000549, 140.82000732, 137.3500061 , 137.58999634,\n",
       "       143.11000061, 140.36000061, 140.52000427, 143.77999878,\n",
       "       149.63999939, 148.83999634, 148.71000671, 151.21000671,\n",
       "       145.38000488, 146.13999939, 148.71000671, 147.96000671,\n",
       "       142.63999939, 137.13000488, 131.88000488, 132.75999451,\n",
       "       135.42999268, 130.05999756, 131.55999756, 135.86999512,\n",
       "       135.3500061 , 138.27000427, 141.66000366, 141.66000366,\n",
       "       137.44000244, 139.22999573, 136.72000122, 138.92999268,\n",
       "       141.55999756, 142.91999817, 146.3500061 , 147.03999329,\n",
       "       144.86999512, 145.86000061, 145.49000549, 148.47000122,\n",
       "       150.16999817, 147.07000732, 151.        , 153.03999329,\n",
       "       155.3500061 , 154.08999634, 152.94999695, 151.6000061 ,\n",
       "       156.78999329, 157.3500061 , 162.50999451, 161.50999451,\n",
       "       160.00999451, 166.13000488, 165.80999756, 165.3500061 ,\n",
       "       164.86999512, 164.91999817, 169.24000549, 168.49000549,\n",
       "       172.1000061 , 173.19000244, 173.02999878, 174.55000305,\n",
       "       174.1499939 , 171.52000427, 167.57000732, 167.22999573,\n",
       "       167.52999878, 170.02999878, 163.61999512, 161.38000488,\n",
       "       158.91000366, 157.22000122, 157.96000671, 155.80999756,\n",
       "       154.52999878, 155.96000671, 154.46000671, 157.36999512,\n",
       "       163.42999268, 153.83999634, 155.30999756, 152.36999512,\n",
       "       150.69999695, 154.47999573, 156.8999939 , 153.72000122,\n",
       "       152.74000549, 150.42999268, 150.77000427, 151.75999451,\n",
       "       149.83999634, 142.47999573, 138.19999695, 142.44999695,\n",
       "       146.1000061 , 146.3999939 , 145.42999268, 140.08999634,\n",
       "       140.41999817, 138.97999573, 138.33999634, 142.99000549,\n",
       "       138.38000488, 142.41000366, 143.75      , 143.86000061,\n",
       "       143.38999939, 147.27000427, 149.44999695, 152.33999634,\n",
       "       149.3500061 , 144.80000305, 155.74000549, 153.33999634,\n",
       "       150.6499939 , 145.02999878, 138.88000488, 138.38000488,\n",
       "       138.91999817, 139.5       , 134.86999512, 146.86999512,\n",
       "       149.69999695, 148.27999878, 150.03999329, 148.78999329,\n",
       "       150.72000122, 151.28999329, 148.00999451, 150.17999268,\n",
       "       151.07000732, 148.11000061, 144.22000122, 141.16999817,\n",
       "       148.02999878, 148.30999756, 147.80999756, 146.63000488,\n",
       "       142.91000366, 140.94000244, 142.6499939 , 142.16000366,\n",
       "       144.49000549, 145.47000122, 143.21000671, 136.5       ,\n",
       "       134.50999451, 132.36999512, 132.30000305, 135.44999695,\n",
       "       132.22999573, 131.86000061, 130.02999878, 126.04000092,\n",
       "       129.61000061, 129.92999268, 125.06999969, 126.36000061,\n",
       "       125.01999664, 129.61999512, 130.1499939 , 130.72999573,\n",
       "       133.49000549, 133.41000366, 134.75999451, 135.94000244,\n",
       "       135.21000671, 135.27000427, 137.86999512, 141.11000061,\n",
       "       142.52999878,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan,          nan,\n",
       "                nan,          nan,          nan])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"正解のデータをyに格納\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl.tail(35)\n",
    "\n",
    "y = np.array(df_aapl['label'])\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6813ace",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_9.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6dc48576",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7443885776870891"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"機械学習オブジェクトを作成して学習させる\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "accuracy = lr.score(X_test, y_test)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c63fec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_10.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d18082f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([145.89457466, 151.08429702, 151.46790487, 151.32164895,\n",
       "       150.04356983, 142.19276883, 136.85235097, 140.95639718,\n",
       "       141.6444782 , 140.10682579, 144.58289355, 148.66421737,\n",
       "       150.28318469, 150.7603316 , 150.10132241, 151.53651589,\n",
       "       151.30832094, 150.6963459 , 151.6180574 , 153.10018648,\n",
       "       151.49859625, 147.76045702, 144.28910999, 147.29541139,\n",
       "       149.20902314, 149.47644569, 151.41531689, 146.73907945,\n",
       "       144.9647762 , 145.7859464 ])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"過去30日間から未来の30日間を予測\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "predicted_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6a57a37",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_11.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3ad20a60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"未来の株価の予測をグラフにする\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "\n",
    "df_aapl['Predict'] = np.nan\n",
    "\n",
    "last_date = df_aapl.iloc[-1].name\n",
    "one_day = 86400\n",
    "next_day = last_date.timestamp() + one_day\n",
    "\n",
    "for data in predicted_data:\n",
    "    next_date = datetime.datetime.fromtimestamp(next_day)\n",
    "    df_aapl.loc[next_date] = np.append([np.nan] * (len(df_aapl.columns)-1), data)\n",
    "    next_day += one_day\n",
    "\n",
    "df_aapl['Close'].plot(figsize=(15,6), color='green')\n",
    "df_aapl['Predict'].plot(figsize=(15,6), color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "888994ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\c13_6_12.ipynb
================================================================================

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ab3744d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "Buy Now.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"株を買うべきか売るべきか判断する\"\"\"\n",
    "import datetime\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas_datareader\n",
    "import sklearn\n",
    "import sklearn.linear_model\n",
    "import sklearn.model_selection\n",
    "import yfinance\n",
    "\n",
    "yfinance.pdr_override()\n",
    "\n",
    "df_aapl = pandas_datareader.data.get_data_yahoo('AAPL', '2020-01-01')\n",
    "\n",
    "df_aapl ['label'] = df_aapl['Close'].shift(-30)\n",
    "df_aapl['SMA'] = df_aapl['Close'].rolling(window=14).mean()\n",
    "df_aapl.tail(35)\n",
    "\n",
    "X = np.array(df_aapl.drop(['label', 'SMA'], axis='columns'))\n",
    "y = np.array(df_aapl['label'])\n",
    "\n",
    "y = y[:-30]\n",
    "X = X[:-30]\n",
    "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n",
    "    X, y, test_size=0.2)\n",
    "\n",
    "lr = sklearn.linear_model.LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "predicted_data = lr.predict(X[-30:])\n",
    "\n",
    "df_aapl['Predict'] = np.nan\n",
    "\n",
    "last_date = df_aapl.iloc[-1].name\n",
    "one_day = 86400\n",
    "next_day = last_date.timestamp() + one_day\n",
    "\n",
    "for data in predicted_data:\n",
    "    next_date = datetime.datetime.fromtimestamp(next_day)\n",
    "    df_aapl.loc[next_date] = np.append([np.nan] * (len(df_aapl.columns)-1), data)\n",
    "    next_day += one_day\n",
    "\n",
    "stock_after_a_month = df_aapl['Predict'][-1]\n",
    "stock_today = df_aapl['Close'][-31]\n",
    "if stock_after_a_month > stock_today:\n",
    "    print('Buy Now.')\n",
    "else:\n",
    "    print('Sell Now.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "920b3737",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}



================================================================================
☐ファイル: lesson13\uninstall.txt
================================================================================

alabaster @ file:///home/ktietz/src/ci/alabaster_1611921544520/work
anaconda-client==1.7.2
anaconda-navigator==2.0.3
anaconda-project @ file:///tmp/build/80754af9/anaconda-project_1610472525955/work
anyio @ file:///opt/concourse/worker/volumes/live/64740ac7-3a9c-4fbb-6685-a51c4ff8b4ca/volume/anyio_1617783319350/work/dist
appdirs==1.4.4
applaunchservices==0.2.1
appnope @ file:///opt/concourse/worker/volumes/live/5f13e5b3-5355-4541-5fc3-f08850c73cf9/volume/appnope_1606859448618/work
appscript @ file:///opt/concourse/worker/volumes/live/82e8b4c7-2416-4d10-509e-144ca79d9b1d/volume/appscript_1611426996703/work
argh==0.26.2
argon2-cffi @ file:///opt/concourse/worker/volumes/live/d733ceb5-7f19-407b-7da7-a386540ab855/volume/argon2-cffi_1613037492998/work
asn1crypto @ file:///tmp/build/80754af9/asn1crypto_1596577642040/work
astroid @ file:///opt/concourse/worker/volumes/live/343a8902-287c-47fb-6db8-923a63364302/volume/astroid_1613500849157/work
astropy @ file:///opt/concourse/worker/volumes/live/0a514e04-301a-48f9-530f-90365df6420e/volume/astropy_1617745469121/work
async-generator @ file:///home/ktietz/src/ci/async_generator_1611927993394/work
atomicwrites==1.4.0
attrs @ file:///tmp/build/80754af9/attrs_1604765588209/work
autopep8 @ file:///tmp/build/80754af9/autopep8_1615918855173/work
Babel @ file:///tmp/build/80754af9/babel_1607110387436/work
backcall @ file:///home/ktietz/src/ci/backcall_1611930011877/work
backports.functools-lru-cache @ file:///tmp/build/80754af9/backports.functools_lru_cache_1618170165463/work
backports.shutil-get-terminal-size @ file:///tmp/build/80754af9/backports.shutil_get_terminal_size_1608222128777/work
backports.tempfile @ file:///home/linux1/recipes/ci/backports.tempfile_1610991236607/work
backports.weakref==1.0.post1
beautifulsoup4==4.11.1
bitarray @ file:///opt/concourse/worker/volumes/live/21dd8f41-3cae-47b4-5fab-684b9b2db14f/volume/bitarray_1618434866960/work
bkcharts==0.2
black==19.10b0
bleach @ file:///tmp/build/80754af9/bleach_1612211392645/work
bokeh @ file:///opt/concourse/worker/volumes/live/65ce9588-f765-4deb-5b52-1c552a693654/volume/bokeh_1620783891289/work
boto==2.49.0
Bottleneck==1.3.2
brotlipy==0.7.0
certifi==2020.12.5
cffi @ file:///opt/concourse/worker/volumes/live/0ef369cc-6ba0-47e7-75da-208c6400381d/volume/cffi_1613246948181/work
chardet @ file:///opt/concourse/worker/volumes/live/c798b2ee-88b1-4341-6830-161a92c2399e/volume/chardet_1607706832595/work
charset-normalizer==2.1.1
click @ file:///home/linux1/recipes/ci/click_1610990599742/work
cloudpickle @ file:///tmp/build/80754af9/cloudpickle_1598884132938/work
clyent==1.2.2
colorama @ file:///tmp/build/80754af9/colorama_1607707115595/work
conda==4.10.1
conda-build==3.21.4
conda-content-trust @ file:///tmp/build/80754af9/conda-content-trust_1617045594566/work
conda-package-handling @ file:///opt/concourse/worker/volumes/live/73497069-9b43-4ad9-50ec-1abb340e14eb/volume/conda-package-handling_1618262140058/work
conda-repo-cli @ file:///tmp/build/80754af9/conda-repo-cli_1620168426516/work
conda-token @ file:///tmp/build/80754af9/conda-token_1620076980546/work
conda-verify==3.4.2
contextlib2==0.6.0.post1
cryptography @ file:///opt/concourse/worker/volumes/live/c515855a-effc-46df-74dc-542901b701da/volume/cryptography_1616769282442/work
cycler==0.10.0
Cython @ file:///opt/concourse/worker/volumes/live/da4db94a-3449-4978-4400-64181f888dab/volume/cython_1618435143829/work
cytoolz==0.11.0
dask @ file:///tmp/build/80754af9/dask-core_1617390489108/work
decorator @ file:///tmp/build/80754af9/decorator_1617916966915/work
defusedxml @ file:///tmp/build/80754af9/defusedxml_1615228127516/work
diff-match-patch @ file:///tmp/build/80754af9/diff-match-patch_1594828741838/work
distributed @ file:///opt/concourse/worker/volumes/live/061a375f-fbe4-45b4-4d80-0ba96d3ee7cb/volume/distributed_1617384077473/work
docutils @ file:///opt/concourse/worker/volumes/live/c75adaac-4aab-4f8b-53ac-e2f0ae899bdf/volume/docutils_1617481416178/work
entrypoints==0.3
et-xmlfile==1.0.1
fastcache==1.1.0
filelock @ file:///home/linux1/recipes/ci/filelock_1610993975404/work
flake8 @ file:///tmp/build/80754af9/flake8_1615834841867/work
Flask @ file:///home/ktietz/src/ci/flask_1611932660458/work
frozendict==2.3.4
fsspec @ file:///tmp/build/80754af9/fsspec_1617959894824/work
future==0.18.2
gevent @ file:///opt/concourse/worker/volumes/live/123efac8-0706-463e-4084-078386897222/volume/gevent_1616772940436/work
glob2 @ file:///home/linux1/recipes/ci/glob2_1610991677669/work
gmpy2==2.0.8
greenlet @ file:///opt/concourse/worker/volumes/live/de3154a2-fbbd-4797-71f5-5fe8ea617adf/volume/greenlet_1611958369459/work
h5py==2.10.0
HeapDict==1.0.1
html5lib @ file:///tmp/build/80754af9/html5lib_1593446221756/work
idna @ file:///home/linux1/recipes/ci/idna_1610986105248/work
imageio @ file:///tmp/build/80754af9/imageio_1617700267927/work
imagesize @ file:///home/ktietz/src/ci/imagesize_1611921604382/work
importlib-metadata @ file:///opt/concourse/worker/volumes/live/a634a87c-b5e5-41bd-628d-cd0413666c93/volume/importlib-metadata_1617877368300/work
iniconfig @ file:///home/linux1/recipes/ci/iniconfig_1610983019677/work
intervaltree @ file:///tmp/build/80754af9/intervaltree_1598376443606/work
ipykernel @ file:///opt/concourse/worker/volumes/live/88f541d3-5a27-498f-7391-f2e50ca36560/volume/ipykernel_1596206680118/work/dist/ipykernel-5.3.4-py3-none-any.whl
ipython @ file:///opt/concourse/worker/volumes/live/c432d8a7-d8f3-4e24-590f-f03d7e5f35e1/volume/ipython_1617120884257/work
ipython-genutils @ file:///tmp/build/80754af9/ipython_genutils_1606773439826/work
ipywidgets @ file:///tmp/build/80754af9/ipywidgets_1610481889018/work
isort @ file:///tmp/build/80754af9/isort_1616355431277/work
itsdangerous @ file:///home/ktietz/src/ci/itsdangerous_1611932585308/work
jdcal==1.4.1
jedi @ file:///opt/concourse/worker/volumes/live/12a2c347-a8e4-4b62-5b19-dcc92a2254f6/volume/jedi_1606932552286/work
Jinja2 @ file:///tmp/build/80754af9/jinja2_1612213139570/work
joblib @ file:///tmp/build/80754af9/joblib_1613502643832/work
json5==0.9.5
jsonschema @ file:///tmp/build/80754af9/jsonschema_1602607155483/work
jupyter==1.0.0
jupyter-client @ file:///tmp/build/80754af9/jupyter_client_1616770841739/work
jupyter-console @ file:///tmp/build/80754af9/jupyter_console_1616615302928/work
jupyter-core @ file:///opt/concourse/worker/volumes/live/c8df8dce-dbb3-46e7-649c-adf4ed2dd00a/volume/jupyter_core_1612213293829/work
jupyter-packaging @ file:///tmp/build/80754af9/jupyter-packaging_1613502826984/work
jupyter-server @ file:///opt/concourse/worker/volumes/live/4f2e970c-4cba-4227-75ae-10ebe3b5f9c3/volume/jupyter_server_1616084051538/work
jupyterlab @ file:///tmp/build/80754af9/jupyterlab_1619133235951/work
jupyterlab-pygments @ file:///tmp/build/80754af9/jupyterlab_pygments_1601490720602/work
jupyterlab-server @ file:///tmp/build/80754af9/jupyterlab_server_1617134334258/work
jupyterlab-widgets @ file:///tmp/build/80754af9/jupyterlab_widgets_1609884341231/work
keyring @ file:///opt/concourse/worker/volumes/live/107edf16-ab8b-49bb-692b-65f944af2b43/volume/keyring_1614616747185/work
kiwisolver @ file:///opt/concourse/worker/volumes/live/0b2f3e77-eaa3-4995-7dd0-c994762fcbde/volume/kiwisolver_1612282417472/work
lazy-object-proxy @ file:///opt/concourse/worker/volumes/live/e4bc3ba3-f365-4387-5772-cbb667714c62/volume/lazy-object-proxy_1616529072711/work
libarchive-c @ file:///tmp/build/80754af9/python-libarchive-c_1617780486945/work
llvmlite==0.36.0
locket==0.2.1
lxml==4.9.2
MarkupSafe @ file:///opt/concourse/worker/volumes/live/cb778296-98db-45ad-411e-6f726e102dc3/volume/markupsafe_1594371638608/work
matplotlib @ file:///opt/concourse/worker/volumes/live/41e8cd50-031f-4dda-5787-dd3c4f4e0f08/volume/matplotlib-suite_1613407855571/work
mccabe==0.6.1
mistune @ file:///opt/concourse/worker/volumes/live/95802d64-d39c-491b-74ce-b9326880ca54/volume/mistune_1594373201816/work
mkl-fft==1.3.0
mkl-random @ file:///opt/concourse/worker/volumes/live/54b31a45-1da5-4512-5c3a-93c9ff2af8bc/volume/mkl_random_1618853970587/work
mkl-service==2.3.0
mock @ file:///tmp/build/80754af9/mock_1607622725907/work
more-itertools @ file:///tmp/build/80754af9/more-itertools_1613676688952/work
mpmath==1.2.1
msgpack @ file:///opt/concourse/worker/volumes/live/d7400f3a-e5de-4e85-5d4c-0c984c648401/volume/msgpack-python_1612287157185/work
multipledispatch==0.6.0
multitasking==0.0.11
mypy-extensions==0.4.3
navigator-updater==0.2.1
nbclassic @ file:///tmp/build/80754af9/nbclassic_1616085367084/work
nbclient @ file:///tmp/build/80754af9/nbclient_1614364831625/work
nbconvert @ file:///opt/concourse/worker/volumes/live/2b9c1d93-d0fd-432f-7d93-66c93d81b614/volume/nbconvert_1601914875037/work
nbformat @ file:///tmp/build/80754af9/nbformat_1617383369282/work
nest-asyncio @ file:///tmp/build/80754af9/nest-asyncio_1613680548246/work
networkx @ file:///tmp/build/80754af9/networkx_1598376031484/work
nltk @ file:///tmp/build/80754af9/nltk_1618327084230/work
nose @ file:///tmp/build/80754af9/nose_1606773131901/work
notebook @ file:///opt/concourse/worker/volumes/live/06e4d8fc-70ed-4cb0-554c-65c20061cb7f/volume/notebook_1616443453928/work
numba @ file:///opt/concourse/worker/volumes/live/263a950e-7ddc-4297-63df-0c284f0b6d22/volume/numba_1616774255536/work
numexpr @ file:///opt/concourse/worker/volumes/live/e845d683-bbb9-4fa2-79ce-743b84c61560/volume/numexpr_1618856522192/work
numpy==1.24.1
numpydoc @ file:///tmp/build/80754af9/numpydoc_1605117425582/work
olefile==0.46
openpyxl @ file:///tmp/build/80754af9/openpyxl_1615411699337/work
packaging @ file:///tmp/build/80754af9/packaging_1611952188834/work
pandas==1.5.2
pandas-datareader==0.10.0
pandocfilters @ file:///opt/concourse/worker/volumes/live/c330e404-216d-466b-5327-8ce8fe854d3a/volume/pandocfilters_1605120442288/work
parso==0.7.0
partd @ file:///tmp/build/80754af9/partd_1618000087440/work
path @ file:///opt/concourse/worker/volumes/live/6493576b-552d-426b-432c-5e0fafcd8a43/volume/path_1614022213143/work
pathlib2 @ file:///opt/concourse/worker/volumes/live/cca4007b-e85e-4f77-430e-d30b2149548d/volume/pathlib2_1607024978319/work
pathspec==0.7.0
patsy==0.5.1
pep8==1.7.1
pexpect @ file:///tmp/build/80754af9/pexpect_1605563209008/work
pickleshare @ file:///tmp/build/80754af9/pickleshare_1606932040724/work
Pillow @ file:///opt/concourse/worker/volumes/live/ca23594b-6e35-4c8c-5637-50ac0b550473/volume/pillow_1617386168018/work
pkginfo==1.7.0
pluggy @ file:///opt/concourse/worker/volumes/live/2d655872-b6f5-4225-538c-dd87e481f5c8/volume/pluggy_1615976700299/work
ply==3.11
prometheus-client @ file:///tmp/build/80754af9/prometheus_client_1618088486455/work
prompt-toolkit @ file:///tmp/build/80754af9/prompt-toolkit_1616415428029/work
psutil @ file:///opt/concourse/worker/volumes/live/0673cd4b-30c1-4470-7490-d8955610f5d5/volume/psutil_1612298002202/work
ptyprocess @ file:///tmp/build/80754af9/ptyprocess_1609355006118/work/dist/ptyprocess-0.7.0-py2.py3-none-any.whl
py @ file:///tmp/build/80754af9/py_1607971587848/work
pycodestyle @ file:///home/ktietz/src/ci_mi/pycodestyle_1612807597675/work
pycosat==0.6.3
pycparser @ file:///tmp/build/80754af9/pycparser_1594388511720/work
pycurl==7.43.0.6
pydocstyle @ file:///tmp/build/80754af9/pydocstyle_1616182067796/work
pyerfa @ file:///opt/concourse/worker/volumes/live/499ad55d-d083-454d-5032-b5d62181519d/volume/pyerfa_1619390898734/work
pyflakes @ file:///home/ktietz/src/ci_ipy2/pyflakes_1612551159640/work
Pygments @ file:///tmp/build/80754af9/pygments_1615143339740/work
pylint @ file:///opt/concourse/worker/volumes/live/39bfc6db-5da7-4bc4-5240-e8a1167491ff/volume/pylint_1617135827184/work
pyls-black @ file:///tmp/build/80754af9/pyls-black_1607553132291/work
pyls-spyder @ file:///tmp/build/80754af9/pyls-spyder_1613849700860/work
pyodbc===4.0.0-unsupported
pyOpenSSL @ file:///tmp/build/80754af9/pyopenssl_1608057966937/work
pyparsing @ file:///home/linux1/recipes/ci/pyparsing_1610983426697/work
pyrsistent @ file:///opt/concourse/worker/volumes/live/ff11f3f0-615b-4508-471d-4d9f19fa6657/volume/pyrsistent_1600141727281/work
PySocks @ file:///opt/concourse/worker/volumes/live/85a5b906-0e08-41d9-6f59-084cee4e9492/volume/pysocks_1594394636991/work
pytest==6.2.3
python-dateutil @ file:///home/ktietz/src/ci/python-dateutil_1611928101742/work
python-jsonrpc-server @ file:///tmp/build/80754af9/python-jsonrpc-server_1600278539111/work
python-language-server @ file:///tmp/build/80754af9/python-language-server_1607972495879/work
python-pptx==0.6.21
pytz==2022.7
PyWavelets @ file:///opt/concourse/worker/volumes/live/ea36e10f-66e8-43ae-511e-c4092764493f/volume/pywavelets_1601658378672/work
PyYAML==5.4.1
pyzmq==20.0.0
QDarkStyle==2.8.1
QtAwesome @ file:///tmp/build/80754af9/qtawesome_1615991616277/work
qtconsole @ file:///tmp/build/80754af9/qtconsole_1616775094278/work
QtPy==1.9.0
regex @ file:///opt/concourse/worker/volumes/live/e81f6b8c-e3b5-481b-6b5d-4fa8d9bb9405/volume/regex_1617569701251/work
requests==2.28.1
rope @ file:///tmp/build/80754af9/rope_1602264064449/work
Rtree @ file:///opt/concourse/worker/volumes/live/7b97d6e1-aeee-4f6d-418c-32be5bbd5ed3/volume/rtree_1618420839839/work
ruamel-yaml-conda @ file:///opt/concourse/worker/volumes/live/53b096c9-f5b7-4029-7f1b-056927554e08/volume/ruamel_yaml_1616016691174/work
scikit-image==0.18.1
scikit-learn @ file:///opt/concourse/worker/volumes/live/0c77b068-a026-4996-6842-33e5544ec13b/volume/scikit-learn_1614446667823/work
scipy @ file:///opt/concourse/worker/volumes/live/7d10d993-3825-404e-6e5d-9947c19e8c6d/volume/scipy_1618855951189/work
seaborn @ file:///tmp/build/80754af9/seaborn_1608578541026/work
Send2Trash @ file:///tmp/build/80754af9/send2trash_1607525499227/work
simplegeneric==0.8.1
singledispatch @ file:///tmp/build/80754af9/singledispatch_1614366001199/work
six @ file:///opt/concourse/worker/volumes/live/5b31cb27-1e37-4ca5-6e9f-86246eb206d2/volume/six_1605205320872/work
sniffio @ file:///opt/concourse/worker/volumes/live/1faeb672-6d3f-4f1f-7861-294fcf282962/volume/sniffio_1614030462215/work
snowballstemmer @ file:///tmp/build/80754af9/snowballstemmer_1611258885636/work
sortedcollections @ file:///tmp/build/80754af9/sortedcollections_1611172717284/work
sortedcontainers @ file:///tmp/build/80754af9/sortedcontainers_1606865132123/work
soupsieve @ file:///tmp/build/80754af9/soupsieve_1616183228191/work
Sphinx @ file:///tmp/build/80754af9/sphinx_1620777493457/work
sphinxcontrib-applehelp @ file:///home/ktietz/src/ci/sphinxcontrib-applehelp_1611920841464/work
sphinxcontrib-devhelp @ file:///home/ktietz/src/ci/sphinxcontrib-devhelp_1611920923094/work
sphinxcontrib-htmlhelp @ file:///home/ktietz/src/ci/sphinxcontrib-htmlhelp_1611920974801/work
sphinxcontrib-jsmath @ file:///home/ktietz/src/ci/sphinxcontrib-jsmath_1611920942228/work
sphinxcontrib-qthelp @ file:///home/ktietz/src/ci/sphinxcontrib-qthelp_1611921055322/work
sphinxcontrib-serializinghtml @ file:///home/ktietz/src/ci/sphinxcontrib-serializinghtml_1611920755253/work
sphinxcontrib-websupport @ file:///tmp/build/80754af9/sphinxcontrib-websupport_1597081412696/work
spyder @ file:///opt/concourse/worker/volumes/live/b2db1f66-1cfc-4529-6e21-61097ab49952/volume/spyder_1616775698806/work
spyder-kernels @ file:///opt/concourse/worker/volumes/live/12a19b85-7733-4e39-55a2-982abb6f0274/volume/spyder-kernels_1614030593315/work
SQLAlchemy @ file:///opt/concourse/worker/volumes/live/31df50e1-4e8b-40a3-6d21-5c6d01ae48e8/volume/sqlalchemy_1618089538006/work
statsmodels @ file:///opt/concourse/worker/volumes/live/f55add71-53cb-4510-4c08-7ae9e294a482/volume/statsmodels_1614023740731/work
sympy @ file:///opt/concourse/worker/volumes/live/0bf7d347-8399-4af8-5e6f-4267d4aabdd9/volume/sympy_1618255318469/work
tables==3.6.1
tblib @ file:///tmp/build/80754af9/tblib_1597928476713/work
termcolor==1.1.0
terminado==0.9.4
testpath @ file:///home/ktietz/src/ci/testpath_1611930608132/work
textdistance @ file:///tmp/build/80754af9/textdistance_1612461398012/work
threadpoolctl @ file:///tmp/tmp9twdgx9k/threadpoolctl-2.1.0-py3-none-any.whl
three-merge @ file:///tmp/build/80754af9/three-merge_1607553261110/work
tifffile==2020.10.1
toml @ file:///tmp/build/80754af9/toml_1616166611790/work
toolz @ file:///home/linux1/recipes/ci/toolz_1610987900194/work
tornado @ file:///opt/concourse/worker/volumes/live/05341796-4198-4ded-4a9a-332fde3cdfd1/volume/tornado_1606942323372/work
tqdm @ file:///tmp/build/80754af9/tqdm_1615925068909/work
traitlets @ file:///home/ktietz/src/ci/traitlets_1611929699868/work
typed-ast @ file:///opt/concourse/worker/volumes/live/b635b0af-0037-435d-5a8b-38d096f36bbf/volume/typed-ast_1610484559102/work
typing-extensions @ file:///home/ktietz/src/ci_mi/typing_extensions_1612808209620/work
ujson @ file:///opt/concourse/worker/volumes/live/b4182deb-c6ce-4bc8-7783-61027c162049/volume/ujson_1611259506235/work
unicodecsv==0.14.1
urllib3 @ file:///tmp/build/80754af9/urllib3_1615837158687/work
watchdog @ file:///opt/concourse/worker/volumes/live/ba071b65-d6ec-4539-5875-0791be503584/volume/watchdog_1612471127391/work
wcwidth @ file:///tmp/build/80754af9/wcwidth_1593447189090/work
webencodings==0.5.1
Werkzeug @ file:///home/ktietz/src/ci/werkzeug_1611932622770/work
widgetsnbextension==3.5.1
wrapt @ file:///opt/concourse/worker/volumes/live/e3646d84-e961-4523-6bed-01532273c57e/volume/wrapt_1597851473852/work
wurlitzer @ file:///opt/concourse/worker/volumes/live/bf42cded-f988-433c-5eca-a88c3905d29b/volume/wurlitzer_1617224650715/work
xlrd @ file:///tmp/build/80754af9/xlrd_1608072521494/work
XlsxWriter @ file:///tmp/build/80754af9/xlsxwriter_1617224712951/work
xlwings==0.23.0
xlwt==1.3.0
xmltodict==0.12.0
yapf @ file:///tmp/build/80754af9/yapf_1615749224965/work
yfinance==0.2.3
zict==2.0.0
zipp @ file:///tmp/build/80754af9/zipp_1615904174917/work
zope.event==4.5.0
zope.interface @ file:///opt/concourse/worker/volumes/live/2b8309a3-732c-445e-5670-ab75beb9637c/volume/zope.interface_1616357204515/work



================================================================================
統計: フォルダ数 12個、ファイル数 806個
================================================================================
